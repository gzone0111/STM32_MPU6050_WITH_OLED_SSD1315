
bluepill_MPU6050_OLED_SSD1315.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cac  080087d8  080087d8  000187d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009484  08009484  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009484  08009484  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009484  08009484  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009488  08009488  00019488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800948c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200001e8  08009674  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08009674  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b308  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e78  00000000  00000000  0002b519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018438  00000000  00000000  0002e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b596  00000000  00000000  000468a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084413  00000000  00000000  00051e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003804  00000000  00000000  000d629c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080087bc 	.word	0x080087bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080087bc 	.word	0x080087bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a23      	ldr	r2, [pc, #140]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0320 	and.w	r3, r3, #32
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_GPIO_Init+0xa8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c52:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_GPIO_Init+0xac>)
 8000c54:	f001 fa36 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_GPIO_Init+0xac>)
 8000c72:	f001 f8a3 	bl	8001dbc <HAL_GPIO_Init>

}
 8000c76:	bf00      	nop
 8000c78:	3720      	adds	r7, #32
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40011000 	.word	0x40011000

08000c88 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <MX_I2C1_Init+0x54>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_I2C1_Init+0x58>)
 8000c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cc6:	f001 fa2f 	bl	8002128 <HAL_I2C_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd0:	f000 fb21 	bl	8001316 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000618 	.word	0x20000618
 8000cdc:	40005400 	.word	0x40005400
 8000ce0:	00061a80 	.word	0x00061a80

08000ce4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000cea:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <MX_I2C2_Init+0x54>)
 8000cec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_I2C2_Init+0x58>)
 8000cf2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d06:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_I2C2_Init+0x50>)
 8000d22:	f001 fa01 	bl	8002128 <HAL_I2C_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d2c:	f000 faf3 	bl	8001316 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000066c 	.word	0x2000066c
 8000d38:	40005800 	.word	0x40005800
 8000d3c:	00061a80 	.word	0x00061a80

08000d40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <HAL_I2C_MspInit+0xc8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d124      	bne.n	8000daa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a29      	ldr	r2, [pc, #164]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d78:	23c0      	movs	r3, #192	; 0xc0
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4821      	ldr	r0, [pc, #132]	; (8000e10 <HAL_I2C_MspInit+0xd0>)
 8000d8c:	f001 f816 	bl	8001dbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9a:	61d3      	str	r3, [r2, #28]
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000da8:	e029      	b.n	8000dfe <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_I2C_MspInit+0xd4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d124      	bne.n	8000dfe <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0308 	and.w	r3, r3, #8
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dcc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd2:	2312      	movs	r3, #18
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	4619      	mov	r1, r3
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <HAL_I2C_MspInit+0xd0>)
 8000de2:	f000 ffeb 	bl	8001dbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000dec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_I2C_MspInit+0xcc>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010c00 	.word	0x40010c00
 8000e14:	40005800 	.word	0x40005800

08000e18 <HALIIC_WriteByteToSlave>:
  }
}

/* USER CODE BEGIN 1 */
uint8_t HALIIC_WriteByteToSlave(uint8_t I2C_Addr,uint8_t reg,uint8_t data)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af04      	add	r7, sp, #16
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	460b      	mov	r3, r1
 8000e24:	71bb      	strb	r3, [r7, #6]
 8000e26:	4613      	mov	r3, r2
 8000e28:	717b      	strb	r3, [r7, #5]
  uint8_t  *pData;
  pData = &data;
 8000e2a:	1d7b      	adds	r3, r7, #5
 8000e2c:	60fb      	str	r3, [r7, #12]
  return HAL_I2C_Mem_Write(&hi2c2, I2C_Addr, reg, I2C_MEMADD_SIZE_8BIT, pData, 1, 100);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	b299      	uxth	r1, r3
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2301      	movs	r3, #1
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <HALIIC_WriteByteToSlave+0x3c>)
 8000e46:	f001 fbb1 	bl	80025ac <HAL_I2C_Mem_Write>
 8000e4a:	4603      	mov	r3, r0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000066c 	.word	0x2000066c

08000e58 <HALIIC_ReadByteFromSlave>:
uint8_t HALIIC_ReadByteFromSlave(uint8_t I2C_Addr,uint8_t reg,uint8_t *buf)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af04      	add	r7, sp, #16
 8000e5e:	4603      	mov	r3, r0
 8000e60:	603a      	str	r2, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	460b      	mov	r3, r1
 8000e66:	71bb      	strb	r3, [r7, #6]
  return HAL_I2C_Mem_Read(&hi2c2, I2C_Addr, reg, I2C_MEMADD_SIZE_8BIT, buf, 1, 100);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	b299      	uxth	r1, r3
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	2364      	movs	r3, #100	; 0x64
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	2301      	movs	r3, #1
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <HALIIC_ReadByteFromSlave+0x38>)
 8000e80:	f001 fc8e 	bl	80027a0 <HAL_I2C_Mem_Read>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000066c 	.word	0x2000066c

08000e94 <MPU6050_GET_DATA>:
}
uint8_t HALIIC_WriteMultByteToSlave(uint8_t dev, uint8_t reg, uint8_t length, uint8_t* data)
{
  return HAL_I2C_Mem_Write(&hi2c2, dev, reg, I2C_MEMADD_SIZE_8BIT, data, length, 200);
}
int16_t MPU6050_GET_DATA(uint8_t regAddr){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t Data_H, Data_L;
	uint16_t data;
	HALIIC_ReadByteFromSlave(MPU_ADDRESS,regAddr, &Data_H);
 8000e9e:	f107 020d 	add.w	r2, r7, #13
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	20d0      	movs	r0, #208	; 0xd0
 8000ea8:	f7ff ffd6 	bl	8000e58 <HALIIC_ReadByteFromSlave>
	HALIIC_ReadByteFromSlave(MPU_ADDRESS,regAddr+1, &Data_L);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f107 020c 	add.w	r2, r7, #12
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	20d0      	movs	r0, #208	; 0xd0
 8000eba:	f7ff ffcd 	bl	8000e58 <HALIIC_ReadByteFromSlave>
	data = (Data_H<<8) | Data_L;
 8000ebe:	7b7b      	ldrb	r3, [r7, #13]
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	7b3b      	ldrb	r3, [r7, #12]
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	81fb      	strh	r3, [r7, #14]
	return data;
 8000ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <MPU6050_INIT>:
void MPU6050_INIT(){
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
	HALIIC_WriteByteToSlave(MPU_ADDRESS,MPU6050_PWR_MGMT_1,0x00);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	216b      	movs	r1, #107	; 0x6b
 8000ee2:	20d0      	movs	r0, #208	; 0xd0
 8000ee4:	f7ff ff98 	bl	8000e18 <HALIIC_WriteByteToSlave>
	HALIIC_WriteByteToSlave(MPU_ADDRESS,MPU6050_SMPLRT_DIV,0x07);
 8000ee8:	2207      	movs	r2, #7
 8000eea:	2119      	movs	r1, #25
 8000eec:	20d0      	movs	r0, #208	; 0xd0
 8000eee:	f7ff ff93 	bl	8000e18 <HALIIC_WriteByteToSlave>
	HALIIC_WriteByteToSlave(MPU_ADDRESS,MPU6050_CONFIG,0x06);
 8000ef2:	2206      	movs	r2, #6
 8000ef4:	211a      	movs	r1, #26
 8000ef6:	20d0      	movs	r0, #208	; 0xd0
 8000ef8:	f7ff ff8e 	bl	8000e18 <HALIIC_WriteByteToSlave>
	HALIIC_WriteByteToSlave(MPU_ADDRESS,MPU6050_GYRO_CONFIG,0x18);
 8000efc:	2218      	movs	r2, #24
 8000efe:	211b      	movs	r1, #27
 8000f00:	20d0      	movs	r0, #208	; 0xd0
 8000f02:	f7ff ff89 	bl	8000e18 <HALIIC_WriteByteToSlave>
	HALIIC_WriteByteToSlave(MPU_ADDRESS,MPU6050_ACCEL_CONFIG,0x01);
 8000f06:	2201      	movs	r2, #1
 8000f08:	211c      	movs	r1, #28
 8000f0a:	20d0      	movs	r0, #208	; 0xd0
 8000f0c:	f7ff ff84 	bl	8000e18 <HALIIC_WriteByteToSlave>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	0000      	movs	r0, r0
	...

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 fde3 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f9b3 	bl	800128c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f7ff fe57 	bl	8000bd8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f2a:	f7ff fead 	bl	8000c88 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f2e:	f7ff fed9 	bl	8000ce4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000f32:	f000 f9f5 	bl	8001320 <SSD1306_Init>
  MPU6050_INIT();
 8000f36:	f7ff ffd0 	bl	8000eda <MPU6050_INIT>
  uint8_t test_Who_Am_I = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	74fb      	strb	r3, [r7, #19]
  HALIIC_ReadByteFromSlave(MPU_ADDRESS,MPU6050_WHO_AM_I,&test_Who_Am_I);
 8000f3e:	f107 0313 	add.w	r3, r7, #19
 8000f42:	461a      	mov	r2, r3
 8000f44:	2175      	movs	r1, #117	; 0x75
 8000f46:	20d0      	movs	r0, #208	; 0xd0
 8000f48:	f7ff ff86 	bl	8000e58 <HALIIC_ReadByteFromSlave>
  if(test_Who_Am_I != 0x68){
 8000f4c:	7cfb      	ldrb	r3, [r7, #19]
 8000f4e:	2b68      	cmp	r3, #104	; 0x68
 8000f50:	d011      	beq.n	8000f76 <main+0x5e>
	  for(int i = 0; i < 5; i++){
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e00b      	b.n	8000f70 <main+0x58>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	48be      	ldr	r0, [pc, #760]	; (8001258 <main+0x340>)
 8000f5e:	f001 f8c9 	bl	80020f4 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f66:	f000 fe21 	bl	8001bac <HAL_Delay>
	  for(int i = 0; i < 5; i++){
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	ddf0      	ble.n	8000f58 <main+0x40>
	  }
  }

  char buf[9];
  char temp[6];
  	SSD1306_GotoXY (0,0);
 8000f76:	2100      	movs	r1, #0
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 fb39 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("accelX:", &Font_7x10, 1);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	49b6      	ldr	r1, [pc, #728]	; (800125c <main+0x344>)
 8000f82:	48b7      	ldr	r0, [pc, #732]	; (8001260 <main+0x348>)
 8000f84:	f000 fbca 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (56, 0);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2038      	movs	r0, #56	; 0x38
 8000f8c:	f000 fb30 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("0", &Font_7x10, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	49b2      	ldr	r1, [pc, #712]	; (800125c <main+0x344>)
 8000f94:	48b3      	ldr	r0, [pc, #716]	; (8001264 <main+0x34c>)
 8000f96:	f000 fbc1 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (0, 10);
 8000f9a:	210a      	movs	r1, #10
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 fb27 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("accelY:", &Font_7x10, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	49ad      	ldr	r1, [pc, #692]	; (800125c <main+0x344>)
 8000fa6:	48b0      	ldr	r0, [pc, #704]	; (8001268 <main+0x350>)
 8000fa8:	f000 fbb8 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (56, 10);
 8000fac:	210a      	movs	r1, #10
 8000fae:	2038      	movs	r0, #56	; 0x38
 8000fb0:	f000 fb1e 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("0", &Font_7x10, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	49a9      	ldr	r1, [pc, #676]	; (800125c <main+0x344>)
 8000fb8:	48aa      	ldr	r0, [pc, #680]	; (8001264 <main+0x34c>)
 8000fba:	f000 fbaf 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (0, 20);
 8000fbe:	2114      	movs	r1, #20
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fb15 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("accelZ:", &Font_7x10, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	49a4      	ldr	r1, [pc, #656]	; (800125c <main+0x344>)
 8000fca:	48a8      	ldr	r0, [pc, #672]	; (800126c <main+0x354>)
 8000fcc:	f000 fba6 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (56, 20);
 8000fd0:	2114      	movs	r1, #20
 8000fd2:	2038      	movs	r0, #56	; 0x38
 8000fd4:	f000 fb0c 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("0", &Font_7x10, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	49a0      	ldr	r1, [pc, #640]	; (800125c <main+0x344>)
 8000fdc:	48a1      	ldr	r0, [pc, #644]	; (8001264 <main+0x34c>)
 8000fde:	f000 fb9d 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (0, 30);
 8000fe2:	211e      	movs	r1, #30
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 fb03 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("angleX:", &Font_7x10, 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	499b      	ldr	r1, [pc, #620]	; (800125c <main+0x344>)
 8000fee:	48a0      	ldr	r0, [pc, #640]	; (8001270 <main+0x358>)
 8000ff0:	f000 fb94 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (56, 30);
 8000ff4:	211e      	movs	r1, #30
 8000ff6:	2038      	movs	r0, #56	; 0x38
 8000ff8:	f000 fafa 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("0", &Font_7x10, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4997      	ldr	r1, [pc, #604]	; (800125c <main+0x344>)
 8001000:	4898      	ldr	r0, [pc, #608]	; (8001264 <main+0x34c>)
 8001002:	f000 fb8b 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);
 8001006:	2128      	movs	r1, #40	; 0x28
 8001008:	2000      	movs	r0, #0
 800100a:	f000 faf1 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("angleY:", &Font_7x10, 1);
 800100e:	2201      	movs	r2, #1
 8001010:	4992      	ldr	r1, [pc, #584]	; (800125c <main+0x344>)
 8001012:	4898      	ldr	r0, [pc, #608]	; (8001274 <main+0x35c>)
 8001014:	f000 fb82 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (56, 40);
 8001018:	2128      	movs	r1, #40	; 0x28
 800101a:	2038      	movs	r0, #56	; 0x38
 800101c:	f000 fae8 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("0", &Font_7x10, 1);
 8001020:	2201      	movs	r2, #1
 8001022:	498e      	ldr	r1, [pc, #568]	; (800125c <main+0x344>)
 8001024:	488f      	ldr	r0, [pc, #572]	; (8001264 <main+0x34c>)
 8001026:	f000 fb79 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (0, 50);
 800102a:	2132      	movs	r1, #50	; 0x32
 800102c:	2000      	movs	r0, #0
 800102e:	f000 fadf 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("angleZ:", &Font_7x10, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	4989      	ldr	r1, [pc, #548]	; (800125c <main+0x344>)
 8001036:	4890      	ldr	r0, [pc, #576]	; (8001278 <main+0x360>)
 8001038:	f000 fb70 	bl	800171c <SSD1306_Puts>
	SSD1306_GotoXY (56, 50);
 800103c:	2132      	movs	r1, #50	; 0x32
 800103e:	2038      	movs	r0, #56	; 0x38
 8001040:	f000 fad6 	bl	80015f0 <SSD1306_GotoXY>
	SSD1306_Puts ("0", &Font_7x10, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	4985      	ldr	r1, [pc, #532]	; (800125c <main+0x344>)
 8001048:	4886      	ldr	r0, [pc, #536]	; (8001264 <main+0x34c>)
 800104a:	f000 fb67 	bl	800171c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800104e:	f000 fa2b 	bl	80014a8 <SSD1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SSD1306_GotoXY (56, 0);
 8001052:	2100      	movs	r1, #0
 8001054:	2038      	movs	r0, #56	; 0x38
 8001056:	f000 facb 	bl	80015f0 <SSD1306_GotoXY>
	  SSD1306_Puts ("          ", &Font_7x10, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	497f      	ldr	r1, [pc, #508]	; (800125c <main+0x344>)
 800105e:	4887      	ldr	r0, [pc, #540]	; (800127c <main+0x364>)
 8001060:	f000 fb5c 	bl	800171c <SSD1306_Puts>
	  SSD1306_GotoXY (56, 10);
 8001064:	210a      	movs	r1, #10
 8001066:	2038      	movs	r0, #56	; 0x38
 8001068:	f000 fac2 	bl	80015f0 <SSD1306_GotoXY>
	  SSD1306_Puts ("          ", &Font_7x10, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	497b      	ldr	r1, [pc, #492]	; (800125c <main+0x344>)
 8001070:	4882      	ldr	r0, [pc, #520]	; (800127c <main+0x364>)
 8001072:	f000 fb53 	bl	800171c <SSD1306_Puts>
	  SSD1306_GotoXY (56, 20);
 8001076:	2114      	movs	r1, #20
 8001078:	2038      	movs	r0, #56	; 0x38
 800107a:	f000 fab9 	bl	80015f0 <SSD1306_GotoXY>
	  SSD1306_Puts ("          ", &Font_7x10, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	4976      	ldr	r1, [pc, #472]	; (800125c <main+0x344>)
 8001082:	487e      	ldr	r0, [pc, #504]	; (800127c <main+0x364>)
 8001084:	f000 fb4a 	bl	800171c <SSD1306_Puts>
	  SSD1306_GotoXY (56, 30);
 8001088:	211e      	movs	r1, #30
 800108a:	2038      	movs	r0, #56	; 0x38
 800108c:	f000 fab0 	bl	80015f0 <SSD1306_GotoXY>
	  SSD1306_Puts ("          ", &Font_7x10, 1);
 8001090:	2201      	movs	r2, #1
 8001092:	4972      	ldr	r1, [pc, #456]	; (800125c <main+0x344>)
 8001094:	4879      	ldr	r0, [pc, #484]	; (800127c <main+0x364>)
 8001096:	f000 fb41 	bl	800171c <SSD1306_Puts>
	  SSD1306_GotoXY (56, 40);
 800109a:	2128      	movs	r1, #40	; 0x28
 800109c:	2038      	movs	r0, #56	; 0x38
 800109e:	f000 faa7 	bl	80015f0 <SSD1306_GotoXY>
	  SSD1306_Puts ("          ", &Font_7x10, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	496d      	ldr	r1, [pc, #436]	; (800125c <main+0x344>)
 80010a6:	4875      	ldr	r0, [pc, #468]	; (800127c <main+0x364>)
 80010a8:	f000 fb38 	bl	800171c <SSD1306_Puts>
	  SSD1306_GotoXY (56, 50);
 80010ac:	2132      	movs	r1, #50	; 0x32
 80010ae:	2038      	movs	r0, #56	; 0x38
 80010b0:	f000 fa9e 	bl	80015f0 <SSD1306_GotoXY>
	  SSD1306_Puts ("          ", &Font_7x10, 1);
 80010b4:	2201      	movs	r2, #1
 80010b6:	4969      	ldr	r1, [pc, #420]	; (800125c <main+0x344>)
 80010b8:	4870      	ldr	r0, [pc, #448]	; (800127c <main+0x364>)
 80010ba:	f000 fb2f 	bl	800171c <SSD1306_Puts>
	  // ACCELX
	  	sprintf(buf,"%f",MPU6050_GET_DATA(MPU_ACCEL_XOUT_H)/16384.0);
 80010be:	203b      	movs	r0, #59	; 0x3b
 80010c0:	f7ff fee8 	bl	8000e94 <MPU6050_GET_DATA>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f99c 	bl	8000404 <__aeabi_i2d>
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <main+0x368>)
 80010d2:	f7ff fb2b 	bl	800072c <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	f107 0008 	add.w	r0, r7, #8
 80010de:	4969      	ldr	r1, [pc, #420]	; (8001284 <main+0x36c>)
 80010e0:	f003 fd98 	bl	8004c14 <siprintf>
		SSD1306_GotoXY (56, 0);
 80010e4:	2100      	movs	r1, #0
 80010e6:	2038      	movs	r0, #56	; 0x38
 80010e8:	f000 fa82 	bl	80015f0 <SSD1306_GotoXY>
		SSD1306_Puts (buf, &Font_7x10, 1);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	2201      	movs	r2, #1
 80010f2:	495a      	ldr	r1, [pc, #360]	; (800125c <main+0x344>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fb11 	bl	800171c <SSD1306_Puts>
	  // ACCELY
		sprintf(buf,"%f",MPU6050_GET_DATA(MPU_ACCEL_YOUT_H)/16384.0);
 80010fa:	203d      	movs	r0, #61	; 0x3d
 80010fc:	f7ff feca 	bl	8000e94 <MPU6050_GET_DATA>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f97e 	bl	8000404 <__aeabi_i2d>
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <main+0x368>)
 800110e:	f7ff fb0d 	bl	800072c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	f107 0008 	add.w	r0, r7, #8
 800111a:	495a      	ldr	r1, [pc, #360]	; (8001284 <main+0x36c>)
 800111c:	f003 fd7a 	bl	8004c14 <siprintf>
		SSD1306_GotoXY (56, 10);
 8001120:	210a      	movs	r1, #10
 8001122:	2038      	movs	r0, #56	; 0x38
 8001124:	f000 fa64 	bl	80015f0 <SSD1306_GotoXY>
		SSD1306_Puts (buf, &Font_7x10, 1);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	2201      	movs	r2, #1
 800112e:	494b      	ldr	r1, [pc, #300]	; (800125c <main+0x344>)
 8001130:	4618      	mov	r0, r3
 8001132:	f000 faf3 	bl	800171c <SSD1306_Puts>
	  // ACCELZ
		sprintf(buf,"%f",MPU6050_GET_DATA(MPU_ACCEL_ZOUT_H)/16384.0);
 8001136:	203f      	movs	r0, #63	; 0x3f
 8001138:	f7ff feac 	bl	8000e94 <MPU6050_GET_DATA>
 800113c:	4603      	mov	r3, r0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f960 	bl	8000404 <__aeabi_i2d>
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b4d      	ldr	r3, [pc, #308]	; (8001280 <main+0x368>)
 800114a:	f7ff faef 	bl	800072c <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	f107 0008 	add.w	r0, r7, #8
 8001156:	494b      	ldr	r1, [pc, #300]	; (8001284 <main+0x36c>)
 8001158:	f003 fd5c 	bl	8004c14 <siprintf>
		SSD1306_GotoXY (56, 20);
 800115c:	2114      	movs	r1, #20
 800115e:	2038      	movs	r0, #56	; 0x38
 8001160:	f000 fa46 	bl	80015f0 <SSD1306_GotoXY>
		SSD1306_Puts (buf, &Font_7x10, 1);
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2201      	movs	r2, #1
 800116a:	493c      	ldr	r1, [pc, #240]	; (800125c <main+0x344>)
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fad5 	bl	800171c <SSD1306_Puts>
	  // GYROX
		itoa((int)MPU6050_GET_DATA(MPU_GYRO_XOUT_H)+19,buf,10);
 8001172:	2043      	movs	r0, #67	; 0x43
 8001174:	f7ff fe8e 	bl	8000e94 <MPU6050_GET_DATA>
 8001178:	4603      	mov	r3, r0
 800117a:	3313      	adds	r3, #19
 800117c:	f107 0108 	add.w	r1, r7, #8
 8001180:	220a      	movs	r2, #10
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fec6 	bl	8003f14 <itoa>
		SSD1306_GotoXY (56, 30);
 8001188:	211e      	movs	r1, #30
 800118a:	2038      	movs	r0, #56	; 0x38
 800118c:	f000 fa30 	bl	80015f0 <SSD1306_GotoXY>
		SSD1306_Puts (buf, &Font_7x10, 1);
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	2201      	movs	r2, #1
 8001196:	4931      	ldr	r1, [pc, #196]	; (800125c <main+0x344>)
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fabf 	bl	800171c <SSD1306_Puts>
	  // GYROY
		itoa((int)MPU6050_GET_DATA(MPU_GYRO_YOUT_H)-143,buf,10);
 800119e:	2045      	movs	r0, #69	; 0x45
 80011a0:	f7ff fe78 	bl	8000e94 <MPU6050_GET_DATA>
 80011a4:	4603      	mov	r3, r0
 80011a6:	3b8f      	subs	r3, #143	; 0x8f
 80011a8:	f107 0108 	add.w	r1, r7, #8
 80011ac:	220a      	movs	r2, #10
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 feb0 	bl	8003f14 <itoa>
		SSD1306_GotoXY (56, 40);
 80011b4:	2128      	movs	r1, #40	; 0x28
 80011b6:	2038      	movs	r0, #56	; 0x38
 80011b8:	f000 fa1a 	bl	80015f0 <SSD1306_GotoXY>
		SSD1306_Puts (buf, &Font_7x10, 1);
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2201      	movs	r2, #1
 80011c2:	4926      	ldr	r1, [pc, #152]	; (800125c <main+0x344>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 faa9 	bl	800171c <SSD1306_Puts>
	  // GYROZ
		itoa((int)MPU6050_GET_DATA(MPU_GYRO_ZOUT_H)+20,buf,10);
 80011ca:	2047      	movs	r0, #71	; 0x47
 80011cc:	f7ff fe62 	bl	8000e94 <MPU6050_GET_DATA>
 80011d0:	4603      	mov	r3, r0
 80011d2:	3314      	adds	r3, #20
 80011d4:	f107 0108 	add.w	r1, r7, #8
 80011d8:	220a      	movs	r2, #10
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fe9a 	bl	8003f14 <itoa>
		SSD1306_GotoXY (56, 50);
 80011e0:	2132      	movs	r1, #50	; 0x32
 80011e2:	2038      	movs	r0, #56	; 0x38
 80011e4:	f000 fa04 	bl	80015f0 <SSD1306_GotoXY>
		SSD1306_Puts (buf, &Font_7x10, 1);
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	2201      	movs	r2, #1
 80011ee:	491b      	ldr	r1, [pc, #108]	; (800125c <main+0x344>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fa93 	bl	800171c <SSD1306_Puts>
	  // TEMP
		sprintf(temp,"%f",MPU6050_GET_DATA(MPU_TEMP_OUT_H)/340.0 + 36.53);
 80011f6:	2041      	movs	r0, #65	; 0x41
 80011f8:	f7ff fe4c 	bl	8000e94 <MPU6050_GET_DATA>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f900 	bl	8000404 <__aeabi_i2d>
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <main+0x370>)
 800120a:	f7ff fa8f 	bl	800072c <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	a30e      	add	r3, pc, #56	; (adr r3, 8001250 <main+0x338>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7fe ffa6 	bl	800016c <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4638      	mov	r0, r7
 8001226:	4917      	ldr	r1, [pc, #92]	; (8001284 <main+0x36c>)
 8001228:	f003 fcf4 	bl	8004c14 <siprintf>
		SSD1306_GotoXY (84, 40);
 800122c:	2128      	movs	r1, #40	; 0x28
 800122e:	2054      	movs	r0, #84	; 0x54
 8001230:	f000 f9de 	bl	80015f0 <SSD1306_GotoXY>
		SSD1306_Puts (temp, &Font_7x10, 1);
 8001234:	463b      	mov	r3, r7
 8001236:	2201      	movs	r2, #1
 8001238:	4908      	ldr	r1, [pc, #32]	; (800125c <main+0x344>)
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fa6e 	bl	800171c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001240:	f000 f932 	bl	80014a8 <SSD1306_UpdateScreen>
	  HAL_Delay (50);
 8001244:	2032      	movs	r0, #50	; 0x32
 8001246:	f000 fcb1 	bl	8001bac <HAL_Delay>
	  SSD1306_GotoXY (56, 0);
 800124a:	e702      	b.n	8001052 <main+0x13a>
 800124c:	f3af 8000 	nop.w
 8001250:	0a3d70a4 	.word	0x0a3d70a4
 8001254:	404243d7 	.word	0x404243d7
 8001258:	40011000 	.word	0x40011000
 800125c:	20000000 	.word	0x20000000
 8001260:	080087d8 	.word	0x080087d8
 8001264:	080087e0 	.word	0x080087e0
 8001268:	080087e4 	.word	0x080087e4
 800126c:	080087ec 	.word	0x080087ec
 8001270:	080087f4 	.word	0x080087f4
 8001274:	080087fc 	.word	0x080087fc
 8001278:	08008804 	.word	0x08008804
 800127c:	0800880c 	.word	0x0800880c
 8001280:	40d00000 	.word	0x40d00000
 8001284:	08008818 	.word	0x08008818
 8001288:	40754000 	.word	0x40754000

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b090      	sub	sp, #64	; 0x40
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	2228      	movs	r2, #40	; 0x28
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f002 fe3c 	bl	8003f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012bc:	2301      	movs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c0:	2302      	movs	r3, #2
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f107 0318 	add.w	r3, r7, #24
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f9d5 	bl	8003684 <HAL_RCC_OscConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012e0:	f000 f819 	bl	8001316 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e4:	230f      	movs	r3, #15
 80012e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	2302      	movs	r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2102      	movs	r1, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fc40 	bl	8003b84 <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800130a:	f000 f804 	bl	8001316 <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3740      	adds	r7, #64	; 0x40
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131a:	b672      	cpsid	i
}
 800131c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131e:	e7fe      	b.n	800131e <Error_Handler+0x8>

08001320 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001326:	f000 fa1f 	bl	8001768 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800132a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800132e:	2201      	movs	r2, #1
 8001330:	2178      	movs	r1, #120	; 0x78
 8001332:	485b      	ldr	r0, [pc, #364]	; (80014a0 <SSD1306_Init+0x180>)
 8001334:	f001 fc9c 	bl	8002c70 <HAL_I2C_IsDeviceReady>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800133e:	2300      	movs	r3, #0
 8001340:	e0a9      	b.n	8001496 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001342:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001346:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001348:	e002      	b.n	8001350 <SSD1306_Init+0x30>
		p--;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3b01      	subs	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001356:	22ae      	movs	r2, #174	; 0xae
 8001358:	2100      	movs	r1, #0
 800135a:	2078      	movs	r0, #120	; 0x78
 800135c:	f000 fa60 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001360:	2220      	movs	r2, #32
 8001362:	2100      	movs	r1, #0
 8001364:	2078      	movs	r0, #120	; 0x78
 8001366:	f000 fa5b 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800136a:	2210      	movs	r2, #16
 800136c:	2100      	movs	r1, #0
 800136e:	2078      	movs	r0, #120	; 0x78
 8001370:	f000 fa56 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001374:	22b0      	movs	r2, #176	; 0xb0
 8001376:	2100      	movs	r1, #0
 8001378:	2078      	movs	r0, #120	; 0x78
 800137a:	f000 fa51 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800137e:	22c8      	movs	r2, #200	; 0xc8
 8001380:	2100      	movs	r1, #0
 8001382:	2078      	movs	r0, #120	; 0x78
 8001384:	f000 fa4c 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2078      	movs	r0, #120	; 0x78
 800138e:	f000 fa47 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001392:	2210      	movs	r2, #16
 8001394:	2100      	movs	r1, #0
 8001396:	2078      	movs	r0, #120	; 0x78
 8001398:	f000 fa42 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800139c:	2240      	movs	r2, #64	; 0x40
 800139e:	2100      	movs	r1, #0
 80013a0:	2078      	movs	r0, #120	; 0x78
 80013a2:	f000 fa3d 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80013a6:	2281      	movs	r2, #129	; 0x81
 80013a8:	2100      	movs	r1, #0
 80013aa:	2078      	movs	r0, #120	; 0x78
 80013ac:	f000 fa38 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80013b0:	22ff      	movs	r2, #255	; 0xff
 80013b2:	2100      	movs	r1, #0
 80013b4:	2078      	movs	r0, #120	; 0x78
 80013b6:	f000 fa33 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80013ba:	22a1      	movs	r2, #161	; 0xa1
 80013bc:	2100      	movs	r1, #0
 80013be:	2078      	movs	r0, #120	; 0x78
 80013c0:	f000 fa2e 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013c4:	22a6      	movs	r2, #166	; 0xa6
 80013c6:	2100      	movs	r1, #0
 80013c8:	2078      	movs	r0, #120	; 0x78
 80013ca:	f000 fa29 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013ce:	22a8      	movs	r2, #168	; 0xa8
 80013d0:	2100      	movs	r1, #0
 80013d2:	2078      	movs	r0, #120	; 0x78
 80013d4:	f000 fa24 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80013d8:	223f      	movs	r2, #63	; 0x3f
 80013da:	2100      	movs	r1, #0
 80013dc:	2078      	movs	r0, #120	; 0x78
 80013de:	f000 fa1f 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013e2:	22a4      	movs	r2, #164	; 0xa4
 80013e4:	2100      	movs	r1, #0
 80013e6:	2078      	movs	r0, #120	; 0x78
 80013e8:	f000 fa1a 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80013ec:	22d3      	movs	r2, #211	; 0xd3
 80013ee:	2100      	movs	r1, #0
 80013f0:	2078      	movs	r0, #120	; 0x78
 80013f2:	f000 fa15 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2078      	movs	r0, #120	; 0x78
 80013fc:	f000 fa10 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001400:	22d5      	movs	r2, #213	; 0xd5
 8001402:	2100      	movs	r1, #0
 8001404:	2078      	movs	r0, #120	; 0x78
 8001406:	f000 fa0b 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800140a:	22f0      	movs	r2, #240	; 0xf0
 800140c:	2100      	movs	r1, #0
 800140e:	2078      	movs	r0, #120	; 0x78
 8001410:	f000 fa06 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001414:	22d9      	movs	r2, #217	; 0xd9
 8001416:	2100      	movs	r1, #0
 8001418:	2078      	movs	r0, #120	; 0x78
 800141a:	f000 fa01 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800141e:	2222      	movs	r2, #34	; 0x22
 8001420:	2100      	movs	r1, #0
 8001422:	2078      	movs	r0, #120	; 0x78
 8001424:	f000 f9fc 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001428:	22da      	movs	r2, #218	; 0xda
 800142a:	2100      	movs	r1, #0
 800142c:	2078      	movs	r0, #120	; 0x78
 800142e:	f000 f9f7 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001432:	2212      	movs	r2, #18
 8001434:	2100      	movs	r1, #0
 8001436:	2078      	movs	r0, #120	; 0x78
 8001438:	f000 f9f2 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800143c:	22db      	movs	r2, #219	; 0xdb
 800143e:	2100      	movs	r1, #0
 8001440:	2078      	movs	r0, #120	; 0x78
 8001442:	f000 f9ed 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001446:	2220      	movs	r2, #32
 8001448:	2100      	movs	r1, #0
 800144a:	2078      	movs	r0, #120	; 0x78
 800144c:	f000 f9e8 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001450:	228d      	movs	r2, #141	; 0x8d
 8001452:	2100      	movs	r1, #0
 8001454:	2078      	movs	r0, #120	; 0x78
 8001456:	f000 f9e3 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800145a:	2214      	movs	r2, #20
 800145c:	2100      	movs	r1, #0
 800145e:	2078      	movs	r0, #120	; 0x78
 8001460:	f000 f9de 	bl	8001820 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001464:	22af      	movs	r2, #175	; 0xaf
 8001466:	2100      	movs	r1, #0
 8001468:	2078      	movs	r0, #120	; 0x78
 800146a:	f000 f9d9 	bl	8001820 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800146e:	222e      	movs	r2, #46	; 0x2e
 8001470:	2100      	movs	r1, #0
 8001472:	2078      	movs	r0, #120	; 0x78
 8001474:	f000 f9d4 	bl	8001820 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001478:	2000      	movs	r0, #0
 800147a:	f000 f843 	bl	8001504 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800147e:	f000 f813 	bl	80014a8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <SSD1306_Init+0x184>)
 8001484:	2200      	movs	r2, #0
 8001486:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SSD1306_Init+0x184>)
 800148a:	2200      	movs	r2, #0
 800148c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SSD1306_Init+0x184>)
 8001490:	2201      	movs	r2, #1
 8001492:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000618 	.word	0x20000618
 80014a4:	20000604 	.word	0x20000604

080014a8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	e01d      	b.n	80014f0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	3b50      	subs	r3, #80	; 0x50
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	2100      	movs	r1, #0
 80014be:	2078      	movs	r0, #120	; 0x78
 80014c0:	f000 f9ae 	bl	8001820 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2078      	movs	r0, #120	; 0x78
 80014ca:	f000 f9a9 	bl	8001820 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014ce:	2210      	movs	r2, #16
 80014d0:	2100      	movs	r1, #0
 80014d2:	2078      	movs	r0, #120	; 0x78
 80014d4:	f000 f9a4 	bl	8001820 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	01db      	lsls	r3, r3, #7
 80014dc:	4a08      	ldr	r2, [pc, #32]	; (8001500 <SSD1306_UpdateScreen+0x58>)
 80014de:	441a      	add	r2, r3
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	2140      	movs	r1, #64	; 0x40
 80014e4:	2078      	movs	r0, #120	; 0x78
 80014e6:	f000 f953 	bl	8001790 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	3301      	adds	r3, #1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b07      	cmp	r3, #7
 80014f4:	d9de      	bls.n	80014b4 <SSD1306_UpdateScreen+0xc>
	}
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000204 	.word	0x20000204

08001504 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <SSD1306_Fill+0x14>
 8001514:	2300      	movs	r3, #0
 8001516:	e000      	b.n	800151a <SSD1306_Fill+0x16>
 8001518:	23ff      	movs	r3, #255	; 0xff
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	4619      	mov	r1, r3
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <SSD1306_Fill+0x2c>)
 8001522:	f002 fcf9 	bl	8003f18 <memset>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000204 	.word	0x20000204

08001534 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
 800153e:	460b      	mov	r3, r1
 8001540:	80bb      	strh	r3, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	70fb      	strb	r3, [r7, #3]
	if (
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	2b7f      	cmp	r3, #127	; 0x7f
 800154a:	d848      	bhi.n	80015de <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	2b3f      	cmp	r3, #63	; 0x3f
 8001550:	d845      	bhi.n	80015de <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <SSD1306_DrawPixel+0xb4>)
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d11a      	bne.n	80015a4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800156e:	88fa      	ldrh	r2, [r7, #6]
 8001570:	88bb      	ldrh	r3, [r7, #4]
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	b298      	uxth	r0, r3
 8001576:	4603      	mov	r3, r0
 8001578:	01db      	lsls	r3, r3, #7
 800157a:	4413      	add	r3, r2
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <SSD1306_DrawPixel+0xb8>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	b25a      	sxtb	r2, r3
 8001582:	88bb      	ldrh	r3, [r7, #4]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	b25b      	sxtb	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b259      	sxtb	r1, r3
 8001594:	88fa      	ldrh	r2, [r7, #6]
 8001596:	4603      	mov	r3, r0
 8001598:	01db      	lsls	r3, r3, #7
 800159a:	4413      	add	r3, r2
 800159c:	b2c9      	uxtb	r1, r1
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <SSD1306_DrawPixel+0xb8>)
 80015a0:	54d1      	strb	r1, [r2, r3]
 80015a2:	e01d      	b.n	80015e0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	08db      	lsrs	r3, r3, #3
 80015aa:	b298      	uxth	r0, r3
 80015ac:	4603      	mov	r3, r0
 80015ae:	01db      	lsls	r3, r3, #7
 80015b0:	4413      	add	r3, r2
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <SSD1306_DrawPixel+0xb8>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	b25a      	sxtb	r2, r3
 80015b8:	88bb      	ldrh	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	4013      	ands	r3, r2
 80015cc:	b259      	sxtb	r1, r3
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	4603      	mov	r3, r0
 80015d2:	01db      	lsls	r3, r3, #7
 80015d4:	4413      	add	r3, r2
 80015d6:	b2c9      	uxtb	r1, r1
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <SSD1306_DrawPixel+0xb8>)
 80015da:	54d1      	strb	r1, [r2, r3]
 80015dc:	e000      	b.n	80015e0 <SSD1306_DrawPixel+0xac>
		return;
 80015de:	bf00      	nop
	}
}
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000604 	.word	0x20000604
 80015ec:	20000204 	.word	0x20000204

080015f0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	460a      	mov	r2, r1
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	4613      	mov	r3, r2
 80015fe:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SSD1306_GotoXY+0x28>)
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <SSD1306_GotoXY+0x28>)
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	8053      	strh	r3, [r2, #2]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000604 	.word	0x20000604

0800161c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	4613      	mov	r3, r2
 800162a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800162c:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <SSD1306_Putc+0xfc>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
	if (
 8001638:	2b7f      	cmp	r3, #127	; 0x7f
 800163a:	dc07      	bgt.n	800164c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <SSD1306_Putc+0xfc>)
 800163e:	885b      	ldrh	r3, [r3, #2]
 8001640:	461a      	mov	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	785b      	ldrb	r3, [r3, #1]
 8001646:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001648:	2b3f      	cmp	r3, #63	; 0x3f
 800164a:	dd01      	ble.n	8001650 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800164c:	2300      	movs	r3, #0
 800164e:	e05e      	b.n	800170e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e04b      	b.n	80016ee <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	3b20      	subs	r3, #32
 800165e:	6839      	ldr	r1, [r7, #0]
 8001660:	7849      	ldrb	r1, [r1, #1]
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	4619      	mov	r1, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	440b      	add	r3, r1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	e030      	b.n	80016dc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d010      	beq.n	80016ac <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <SSD1306_Putc+0xfc>)
 800168c:	881a      	ldrh	r2, [r3, #0]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	b29b      	uxth	r3, r3
 8001692:	4413      	add	r3, r2
 8001694:	b298      	uxth	r0, r3
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <SSD1306_Putc+0xfc>)
 8001698:	885a      	ldrh	r2, [r3, #2]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	b29b      	uxth	r3, r3
 800169e:	4413      	add	r3, r2
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	79ba      	ldrb	r2, [r7, #6]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff ff45 	bl	8001534 <SSD1306_DrawPixel>
 80016aa:	e014      	b.n	80016d6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <SSD1306_Putc+0xfc>)
 80016ae:	881a      	ldrh	r2, [r3, #0]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	b298      	uxth	r0, r3
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <SSD1306_Putc+0xfc>)
 80016ba:	885a      	ldrh	r2, [r3, #2]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	b299      	uxth	r1, r3
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf0c      	ite	eq
 80016ca:	2301      	moveq	r3, #1
 80016cc:	2300      	movne	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	f7ff ff2f 	bl	8001534 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	3301      	adds	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d3c8      	bcc.n	800167a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	785b      	ldrb	r3, [r3, #1]
 80016f2:	461a      	mov	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d3ad      	bcc.n	8001656 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <SSD1306_Putc+0xfc>)
 80016fc:	881a      	ldrh	r2, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4413      	add	r3, r2
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <SSD1306_Putc+0xfc>)
 800170a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800170c:	79fb      	ldrb	r3, [r7, #7]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000604 	.word	0x20000604

0800171c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	4613      	mov	r3, r2
 8001728:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800172a:	e012      	b.n	8001752 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff71 	bl	800161c <SSD1306_Putc>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d002      	beq.n	800174c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	e008      	b.n	800175e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3301      	adds	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1e8      	bne.n	800172c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	781b      	ldrb	r3, [r3, #0]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <ssd1306_I2C_Init+0x24>)
 8001770:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001772:	e002      	b.n	800177a <ssd1306_I2C_Init+0x12>
		p--;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	607b      	str	r3, [r7, #4]
	while(p>0)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f9      	bne.n	8001774 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	0003d090 	.word	0x0003d090

08001790 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b0c7      	sub	sp, #284	; 0x11c
 8001794:	af02      	add	r7, sp, #8
 8001796:	4604      	mov	r4, r0
 8001798:	4608      	mov	r0, r1
 800179a:	4639      	mov	r1, r7
 800179c:	600a      	str	r2, [r1, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	1dfb      	adds	r3, r7, #7
 80017a2:	4622      	mov	r2, r4
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	1dbb      	adds	r3, r7, #6
 80017a8:	4602      	mov	r2, r0
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	460a      	mov	r2, r1
 80017b0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	1dba      	adds	r2, r7, #6
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80017c2:	e010      	b.n	80017e6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80017c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017c8:	463a      	mov	r2, r7
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	441a      	add	r2, r3
 80017ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017d2:	3301      	adds	r3, #1
 80017d4:	7811      	ldrb	r1, [r2, #0]
 80017d6:	f107 020c 	add.w	r2, r7, #12
 80017da:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80017dc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017e0:	3301      	adds	r3, #1
 80017e2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80017e6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	1d3a      	adds	r2, r7, #4
 80017ee:	8812      	ldrh	r2, [r2, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8e7      	bhi.n	80017c4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80017f4:	1dfb      	adds	r3, r7, #7
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b299      	uxth	r1, r3
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	b29b      	uxth	r3, r3
 8001802:	f107 020c 	add.w	r2, r7, #12
 8001806:	200a      	movs	r0, #10
 8001808:	9000      	str	r0, [sp, #0]
 800180a:	4804      	ldr	r0, [pc, #16]	; (800181c <ssd1306_I2C_WriteMulti+0x8c>)
 800180c:	f000 fdd0 	bl	80023b0 <HAL_I2C_Master_Transmit>
}
 8001810:	bf00      	nop
 8001812:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	bf00      	nop
 800181c:	20000618 	.word	0x20000618

08001820 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af02      	add	r7, sp, #8
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	460b      	mov	r3, r1
 800182c:	71bb      	strb	r3, [r7, #6]
 800182e:	4613      	mov	r3, r2
 8001830:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001832:	79bb      	ldrb	r3, [r7, #6]
 8001834:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001836:	797b      	ldrb	r3, [r7, #5]
 8001838:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	b299      	uxth	r1, r3
 800183e:	f107 020c 	add.w	r2, r7, #12
 8001842:	230a      	movs	r3, #10
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2302      	movs	r3, #2
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <ssd1306_I2C_Write+0x38>)
 800184a:	f000 fdb1 	bl	80023b0 <HAL_I2C_Master_Transmit>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000618 	.word	0x20000618

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_MspInit+0x5c>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <HAL_MspInit+0x5c>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6193      	str	r3, [r2, #24]
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_MspInit+0x5c>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x5c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_MspInit+0x5c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x5c>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_MspInit+0x60>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_MspInit+0x60>)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001906:	f000 f935 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}

0800190e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
	return 1;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <_kill>:

int _kill(int pid, int sig)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001926:	f002 fab3 	bl	8003e90 <__errno>
 800192a:	4603      	mov	r3, r0
 800192c:	2216      	movs	r2, #22
 800192e:	601a      	str	r2, [r3, #0]
	return -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_exit>:

void _exit (int status)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ffe7 	bl	800191c <_kill>
	while (1) {}		/* Make sure we hang here */
 800194e:	e7fe      	b.n	800194e <_exit+0x12>

08001950 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e00a      	b.n	8001978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001962:	f3af 8000 	nop.w
 8001966:	4601      	mov	r1, r0
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	b2ca      	uxtb	r2, r1
 8001970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf0      	blt.n	8001962 <_read+0x12>
	}

return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e009      	b.n	80019b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dbf1      	blt.n	800199c <_write+0x12>
	}
	return len;
 80019b8:	687b      	ldr	r3, [r7, #4]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_close>:

int _close(int file)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
	return -1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e8:	605a      	str	r2, [r3, #4]
	return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <_isatty>:

int _isatty(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
	return 0;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
	...

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f002 fa1c 	bl	8003e90 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20005000 	.word	0x20005000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	2000060c 	.word	0x2000060c
 8001a8c:	200006d8 	.word	0x200006d8

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ac2:	f7ff ffe5 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f002 f9e9 	bl	8003e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7ff fa25 	bl	8000f18 <main>
  bx lr
 8001ace:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ad8:	0800948c 	.word	0x0800948c
  ldr r2, =_sbss
 8001adc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ae0:	200006d4 	.word	0x200006d4

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x28>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f92b 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff feaa 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f935 	bl	8001da2 <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 f90b 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000010 	.word	0x20000010
 8001b70:	2000000c 	.word	0x2000000c

08001b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x20>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_IncTick+0x20>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000010 	.word	0x20000010
 8001b94:	200006c0 	.word	0x200006c0

08001b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_GetTick+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	200006c0 	.word	0x200006c0

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_Delay+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffe0 	bl	8001b98 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000010 	.word	0x20000010

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff90 	bl	8001c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff49 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff5e 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff90 	bl	8001cac <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5f 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffb0 	bl	8001d10 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b08b      	sub	sp, #44	; 0x2c
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dce:	e169      	b.n	80020a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8158 	bne.w	800209e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a9a      	ldr	r2, [pc, #616]	; (800205c <HAL_GPIO_Init+0x2a0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d05e      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001df8:	4a98      	ldr	r2, [pc, #608]	; (800205c <HAL_GPIO_Init+0x2a0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d875      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001dfe:	4a98      	ldr	r2, [pc, #608]	; (8002060 <HAL_GPIO_Init+0x2a4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d058      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e04:	4a96      	ldr	r2, [pc, #600]	; (8002060 <HAL_GPIO_Init+0x2a4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d86f      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e0a:	4a96      	ldr	r2, [pc, #600]	; (8002064 <HAL_GPIO_Init+0x2a8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d052      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e10:	4a94      	ldr	r2, [pc, #592]	; (8002064 <HAL_GPIO_Init+0x2a8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d869      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e16:	4a94      	ldr	r2, [pc, #592]	; (8002068 <HAL_GPIO_Init+0x2ac>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04c      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e1c:	4a92      	ldr	r2, [pc, #584]	; (8002068 <HAL_GPIO_Init+0x2ac>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d863      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e22:	4a92      	ldr	r2, [pc, #584]	; (800206c <HAL_GPIO_Init+0x2b0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d046      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
 8001e28:	4a90      	ldr	r2, [pc, #576]	; (800206c <HAL_GPIO_Init+0x2b0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d85d      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e2e:	2b12      	cmp	r3, #18
 8001e30:	d82a      	bhi.n	8001e88 <HAL_GPIO_Init+0xcc>
 8001e32:	2b12      	cmp	r3, #18
 8001e34:	d859      	bhi.n	8001eea <HAL_GPIO_Init+0x12e>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <HAL_GPIO_Init+0x80>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001eb7 	.word	0x08001eb7
 8001e40:	08001e91 	.word	0x08001e91
 8001e44:	08001ea3 	.word	0x08001ea3
 8001e48:	08001ee5 	.word	0x08001ee5
 8001e4c:	08001eeb 	.word	0x08001eeb
 8001e50:	08001eeb 	.word	0x08001eeb
 8001e54:	08001eeb 	.word	0x08001eeb
 8001e58:	08001eeb 	.word	0x08001eeb
 8001e5c:	08001eeb 	.word	0x08001eeb
 8001e60:	08001eeb 	.word	0x08001eeb
 8001e64:	08001eeb 	.word	0x08001eeb
 8001e68:	08001eeb 	.word	0x08001eeb
 8001e6c:	08001eeb 	.word	0x08001eeb
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001eeb 	.word	0x08001eeb
 8001e78:	08001eeb 	.word	0x08001eeb
 8001e7c:	08001eeb 	.word	0x08001eeb
 8001e80:	08001e99 	.word	0x08001e99
 8001e84:	08001ead 	.word	0x08001ead
 8001e88:	4a79      	ldr	r2, [pc, #484]	; (8002070 <HAL_GPIO_Init+0x2b4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e8e:	e02c      	b.n	8001eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e029      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e024      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e01f      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e01a      	b.n	8001eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e013      	b.n	8001eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	611a      	str	r2, [r3, #16]
          break;
 8001ed6:	e009      	b.n	8001eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	615a      	str	r2, [r3, #20]
          break;
 8001ee2:	e003      	b.n	8001eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x130>
          break;
 8001eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d801      	bhi.n	8001ef6 <HAL_GPIO_Init+0x13a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	e001      	b.n	8001efa <HAL_GPIO_Init+0x13e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d802      	bhi.n	8001f08 <HAL_GPIO_Init+0x14c>
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x152>
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	3b08      	subs	r3, #8
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	210f      	movs	r1, #15
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80b1 	beq.w	800209e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f3c:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a4c      	ldr	r2, [pc, #304]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_GPIO_Init+0x2b8>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f54:	4a48      	ldr	r2, [pc, #288]	; (8002078 <HAL_GPIO_Init+0x2bc>)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_GPIO_Init+0x2c0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_GPIO_Init+0x1ec>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3f      	ldr	r2, [pc, #252]	; (8002080 <HAL_GPIO_Init+0x2c4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <HAL_GPIO_Init+0x2c8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <HAL_GPIO_Init+0x2cc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_GPIO_Init+0x1e0>
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e006      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e004      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	f002 0203 	and.w	r2, r2, #3
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fba:	492f      	ldr	r1, [pc, #188]	; (8002078 <HAL_GPIO_Init+0x2bc>)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	492c      	ldr	r1, [pc, #176]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4928      	ldr	r1, [pc, #160]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4922      	ldr	r1, [pc, #136]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	491e      	ldr	r1, [pc, #120]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4918      	ldr	r1, [pc, #96]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	4914      	ldr	r1, [pc, #80]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800203c:	4013      	ands	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d021      	beq.n	8002090 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_GPIO_Init+0x2d0>)
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
 8002058:	e021      	b.n	800209e <HAL_GPIO_Init+0x2e2>
 800205a:	bf00      	nop
 800205c:	10320000 	.word	0x10320000
 8002060:	10310000 	.word	0x10310000
 8002064:	10220000 	.word	0x10220000
 8002068:	10210000 	.word	0x10210000
 800206c:	10120000 	.word	0x10120000
 8002070:	10110000 	.word	0x10110000
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	40010800 	.word	0x40010800
 8002080:	40010c00 	.word	0x40010c00
 8002084:	40011000 	.word	0x40011000
 8002088:	40011400 	.word	0x40011400
 800208c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_GPIO_Init+0x304>)
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	43db      	mvns	r3, r3
 8002098:	4909      	ldr	r1, [pc, #36]	; (80020c0 <HAL_GPIO_Init+0x304>)
 800209a:	4013      	ands	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	3301      	adds	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f47f ae8e 	bne.w	8001dd0 <HAL_GPIO_Init+0x14>
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	372c      	adds	r7, #44	; 0x2c
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e0:	e003      	b.n	80020ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e2:	887b      	ldrh	r3, [r7, #2]
 80020e4:	041a      	lsls	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	611a      	str	r2, [r3, #16]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4013      	ands	r3, r2
 800210c:	041a      	lsls	r2, r3, #16
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43d9      	mvns	r1, r3
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	400b      	ands	r3, r1
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	611a      	str	r2, [r3, #16]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
	...

08002128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e12b      	b.n	8002392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe fdf6 	bl	8000d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800217a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800218a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800218c:	f001 fe4e 	bl	8003e2c <HAL_RCC_GetPCLK1Freq>
 8002190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a81      	ldr	r2, [pc, #516]	; (800239c <HAL_I2C_Init+0x274>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d807      	bhi.n	80021ac <HAL_I2C_Init+0x84>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a80      	ldr	r2, [pc, #512]	; (80023a0 <HAL_I2C_Init+0x278>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	bf94      	ite	ls
 80021a4:	2301      	movls	r3, #1
 80021a6:	2300      	movhi	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e006      	b.n	80021ba <HAL_I2C_Init+0x92>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4a7d      	ldr	r2, [pc, #500]	; (80023a4 <HAL_I2C_Init+0x27c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	bf94      	ite	ls
 80021b4:	2301      	movls	r3, #1
 80021b6:	2300      	movhi	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0e7      	b.n	8002392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a78      	ldr	r2, [pc, #480]	; (80023a8 <HAL_I2C_Init+0x280>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a6a      	ldr	r2, [pc, #424]	; (800239c <HAL_I2C_Init+0x274>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d802      	bhi.n	80021fc <HAL_I2C_Init+0xd4>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3301      	adds	r3, #1
 80021fa:	e009      	b.n	8002210 <HAL_I2C_Init+0xe8>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	4a69      	ldr	r2, [pc, #420]	; (80023ac <HAL_I2C_Init+0x284>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	3301      	adds	r3, #1
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002222:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	495c      	ldr	r1, [pc, #368]	; (800239c <HAL_I2C_Init+0x274>)
 800222c:	428b      	cmp	r3, r1
 800222e:	d819      	bhi.n	8002264 <HAL_I2C_Init+0x13c>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1e59      	subs	r1, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fbb1 f3f3 	udiv	r3, r1, r3
 800223e:	1c59      	adds	r1, r3, #1
 8002240:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002244:	400b      	ands	r3, r1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_I2C_Init+0x138>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e59      	subs	r1, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fbb1 f3f3 	udiv	r3, r1, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	e051      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 8002260:	2304      	movs	r3, #4
 8002262:	e04f      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d111      	bne.n	8002290 <HAL_I2C_Init+0x168>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e58      	subs	r0, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	440b      	add	r3, r1
 800227a:	fbb0 f3f3 	udiv	r3, r0, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e012      	b.n	80022b6 <HAL_I2C_Init+0x18e>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	0099      	lsls	r1, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Init+0x196>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e022      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10e      	bne.n	80022e4 <HAL_I2C_Init+0x1bc>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e58      	subs	r0, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	440b      	add	r3, r1
 80022d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e2:	e00f      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e58      	subs	r0, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	0099      	lsls	r1, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	6809      	ldr	r1, [r1, #0]
 8002308:	4313      	orrs	r3, r2
 800230a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6911      	ldr	r1, [r2, #16]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68d2      	ldr	r2, [r2, #12]
 800233e:	4311      	orrs	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	430b      	orrs	r3, r1
 8002346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	000186a0 	.word	0x000186a0
 80023a0:	001e847f 	.word	0x001e847f
 80023a4:	003d08ff 	.word	0x003d08ff
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	10624dd3 	.word	0x10624dd3

080023b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	461a      	mov	r2, r3
 80023bc:	460b      	mov	r3, r1
 80023be:	817b      	strh	r3, [r7, #10]
 80023c0:	4613      	mov	r3, r2
 80023c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff fbe8 	bl	8001b98 <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	f040 80e0 	bne.w	8002598 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2319      	movs	r3, #25
 80023de:	2201      	movs	r2, #1
 80023e0:	4970      	ldr	r1, [pc, #448]	; (80025a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 ff72 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	e0d3      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_I2C_Master_Transmit+0x50>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0cc      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d007      	beq.n	8002426 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002434:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2221      	movs	r2, #33	; 0x21
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2210      	movs	r2, #16
 8002442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	893a      	ldrh	r2, [r7, #8]
 8002456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a50      	ldr	r2, [pc, #320]	; (80025a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fd2c 	bl	8002ecc <I2C_MasterRequestWrite>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e08d      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002494:	e066      	b.n	8002564 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	6a39      	ldr	r1, [r7, #32]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 ffec 	bl	8003478 <I2C_WaitOnTXEFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d107      	bne.n	80024be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06b      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d11b      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x188>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	d017      	beq.n	8002538 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	6a39      	ldr	r1, [r7, #32]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 ffdc 	bl	80034fa <I2C_WaitOnBTFFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00d      	beq.n	8002564 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e01a      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	d194      	bne.n	8002496 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	00100002 	.word	0x00100002
 80025a8:	ffff0000 	.word	0xffff0000

080025ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	4608      	mov	r0, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	817b      	strh	r3, [r7, #10]
 80025be:	460b      	mov	r3, r1
 80025c0:	813b      	strh	r3, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c6:	f7ff fae7 	bl	8001b98 <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	f040 80d9 	bne.w	800278c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2319      	movs	r3, #25
 80025e0:	2201      	movs	r2, #1
 80025e2:	496d      	ldr	r1, [pc, #436]	; (8002798 <HAL_I2C_Mem_Write+0x1ec>)
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fe71 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0cc      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Mem_Write+0x56>
 80025fe:	2302      	movs	r3, #2
 8002600:	e0c5      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d007      	beq.n	8002628 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2221      	movs	r2, #33	; 0x21
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a4d      	ldr	r2, [pc, #308]	; (800279c <HAL_I2C_Mem_Write+0x1f0>)
 8002668:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800266a:	88f8      	ldrh	r0, [r7, #6]
 800266c:	893a      	ldrh	r2, [r7, #8]
 800266e:	8979      	ldrh	r1, [r7, #10]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	4603      	mov	r3, r0
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fca8 	bl	8002fd0 <I2C_RequestMemoryWrite>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d052      	beq.n	800272c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e081      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fef2 	bl	8003478 <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06b      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d11b      	bne.n	800272c <HAL_I2C_Mem_Write+0x180>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d017      	beq.n	800272c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1aa      	bne.n	800268a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fede 	bl	80034fa <I2C_WaitOnBTFFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	2b04      	cmp	r3, #4
 800274a:	d107      	bne.n	800275c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e016      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	00100002 	.word	0x00100002
 800279c:	ffff0000 	.word	0xffff0000

080027a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	; 0x30
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	817b      	strh	r3, [r7, #10]
 80027b2:	460b      	mov	r3, r1
 80027b4:	813b      	strh	r3, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027be:	f7ff f9eb 	bl	8001b98 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	f040 8244 	bne.w	8002c5a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2319      	movs	r3, #25
 80027d8:	2201      	movs	r2, #1
 80027da:	4982      	ldr	r1, [pc, #520]	; (80029e4 <HAL_I2C_Mem_Read+0x244>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fd75 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	e237      	b.n	8002c5c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_I2C_Mem_Read+0x5a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e230      	b.n	8002c5c <HAL_I2C_Mem_Read+0x4bc>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d007      	beq.n	8002820 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2222      	movs	r2, #34	; 0x22
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2240      	movs	r2, #64	; 0x40
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a62      	ldr	r2, [pc, #392]	; (80029e8 <HAL_I2C_Mem_Read+0x248>)
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002862:	88f8      	ldrh	r0, [r7, #6]
 8002864:	893a      	ldrh	r2, [r7, #8]
 8002866:	8979      	ldrh	r1, [r7, #10]
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fc42 	bl	80030fc <I2C_RequestMemoryRead>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1ec      	b.n	8002c5c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d113      	bne.n	80028b2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e1c0      	b.n	8002c34 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d11e      	bne.n	80028f8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028ca:	b672      	cpsid	i
}
 80028cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028f4:	b662      	cpsie	i
}
 80028f6:	e035      	b.n	8002964 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d11e      	bne.n	800293e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800290e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002910:	b672      	cpsid	i
}
 8002912:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002938:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800293a:	b662      	cpsie	i
}
 800293c:	e012      	b.n	8002964 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800294c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002964:	e166      	b.n	8002c34 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	2b03      	cmp	r3, #3
 800296c:	f200 811f 	bhi.w	8002bae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	2b01      	cmp	r3, #1
 8002976:	d123      	bne.n	80029c0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fdfd 	bl	800357c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e167      	b.n	8002c5c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029be:	e139      	b.n	8002c34 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d152      	bne.n	8002a6e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	2200      	movs	r2, #0
 80029d0:	4906      	ldr	r1, [pc, #24]	; (80029ec <HAL_I2C_Mem_Read+0x24c>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fc7a 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e13c      	b.n	8002c5c <HAL_I2C_Mem_Read+0x4bc>
 80029e2:	bf00      	nop
 80029e4:	00100002 	.word	0x00100002
 80029e8:	ffff0000 	.word	0xffff0000
 80029ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80029f0:	b672      	cpsid	i
}
 80029f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a36:	b662      	cpsie	i
}
 8002a38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a6c:	e0e2      	b.n	8002c34 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	2200      	movs	r2, #0
 8002a76:	497b      	ldr	r1, [pc, #492]	; (8002c64 <HAL_I2C_Mem_Read+0x4c4>)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fc27 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0e9      	b.n	8002c5c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a98:	b672      	cpsid	i
}
 8002a9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ace:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_I2C_Mem_Read+0x4c8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	08db      	lsrs	r3, r3, #3
 8002ad4:	4a65      	ldr	r2, [pc, #404]	; (8002c6c <HAL_I2C_Mem_Read+0x4cc>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0a1a      	lsrs	r2, r3, #8
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00da      	lsls	r2, r3, #3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d118      	bne.n	8002b26 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b16:	b662      	cpsie	i
}
 8002b18:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e09a      	b.n	8002c5c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d1d9      	bne.n	8002ae8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b76:	b662      	cpsie	i
}
 8002b78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bac:	e042      	b.n	8002c34 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fce2 	bl	800357c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e04c      	b.n	8002c5c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d118      	bne.n	8002c34 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f ae94 	bne.w	8002966 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	00010004 	.word	0x00010004
 8002c68:	20000008 	.word	0x20000008
 8002c6c:	14f8b589 	.word	0x14f8b589

08002c70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c80:	f7fe ff8a 	bl	8001b98 <HAL_GetTick>
 8002c84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002c86:	2301      	movs	r3, #1
 8002c88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	f040 8111 	bne.w	8002eba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2319      	movs	r3, #25
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4988      	ldr	r1, [pc, #544]	; (8002ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fb12 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e104      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2C_IsDeviceReady+0x50>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0fd      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d007      	beq.n	8002ce6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2224      	movs	r2, #36	; 0x24
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a70      	ldr	r2, [pc, #448]	; (8002ec8 <HAL_I2C_IsDeviceReady+0x258>)
 8002d08:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fad0 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d40:	d103      	bne.n	8002d4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0b6      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d4e:	897b      	ldrh	r3, [r7, #10]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe ff1b 	bl	8001b98 <HAL_GetTick>
 8002d62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d92:	e025      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d94:	f7fe ff00 	bl	8001b98 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <HAL_I2C_IsDeviceReady+0x13a>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22a0      	movs	r2, #160	; 0xa0
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2ba0      	cmp	r3, #160	; 0xa0
 8002dea:	d005      	beq.n	8002df8 <HAL_I2C_IsDeviceReady+0x188>
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <HAL_I2C_IsDeviceReady+0x188>
 8002df2:	7dbb      	ldrb	r3, [r7, #22]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0cd      	beq.n	8002d94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d129      	bne.n	8002e62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2319      	movs	r3, #25
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4921      	ldr	r1, [pc, #132]	; (8002ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fa44 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e036      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e02c      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2319      	movs	r3, #25
 8002e82:	2201      	movs	r2, #1
 8002e84:	490f      	ldr	r1, [pc, #60]	; (8002ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fa20 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e012      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	f4ff af32 	bcc.w	8002d0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	00100002 	.word	0x00100002
 8002ec8:	ffff0000 	.word	0xffff0000

08002ecc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d006      	beq.n	8002ef6 <I2C_MasterRequestWrite+0x2a>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d003      	beq.n	8002ef6 <I2C_MasterRequestWrite+0x2a>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ef4:	d108      	bne.n	8002f08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e00b      	b.n	8002f20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	2b12      	cmp	r3, #18
 8002f0e:	d107      	bne.n	8002f20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f9cd 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f46:	d103      	bne.n	8002f50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e035      	b.n	8002fc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f5c:	d108      	bne.n	8002f70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f5e:	897b      	ldrh	r3, [r7, #10]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f6c:	611a      	str	r2, [r3, #16]
 8002f6e:	e01b      	b.n	8002fa8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f70:	897b      	ldrh	r3, [r7, #10]
 8002f72:	11db      	asrs	r3, r3, #7
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0306 	and.w	r3, r3, #6
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f063 030f 	orn	r3, r3, #15
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <I2C_MasterRequestWrite+0xfc>)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f9f3 	bl	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e010      	b.n	8002fc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4907      	ldr	r1, [pc, #28]	; (8002fcc <I2C_MasterRequestWrite+0x100>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f9e3 	bl	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	00010008 	.word	0x00010008
 8002fcc:	00010002 	.word	0x00010002

08002fd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	817b      	strh	r3, [r7, #10]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	813b      	strh	r3, [r7, #8]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	2200      	movs	r2, #0
 8003002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f960 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003020:	d103      	bne.n	800302a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e05f      	b.n	80030ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800303c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	6a3a      	ldr	r2, [r7, #32]
 8003042:	492d      	ldr	r1, [pc, #180]	; (80030f8 <I2C_RequestMemoryWrite+0x128>)
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f998 	bl	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e04c      	b.n	80030ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	6a39      	ldr	r1, [r7, #32]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fa02 	bl	8003478 <I2C_WaitOnTXEFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b04      	cmp	r3, #4
 8003080:	d107      	bne.n	8003092 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003090:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e02b      	b.n	80030ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800309c:	893b      	ldrh	r3, [r7, #8]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	611a      	str	r2, [r3, #16]
 80030a6:	e021      	b.n	80030ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030a8:	893b      	ldrh	r3, [r7, #8]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b8:	6a39      	ldr	r1, [r7, #32]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f9dc 	bl	8003478 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d107      	bne.n	80030de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e005      	b.n	80030ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e2:	893b      	ldrh	r3, [r7, #8]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	00010002 	.word	0x00010002

080030fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	4608      	mov	r0, r1
 8003106:	4611      	mov	r1, r2
 8003108:	461a      	mov	r2, r3
 800310a:	4603      	mov	r3, r0
 800310c:	817b      	strh	r3, [r7, #10]
 800310e:	460b      	mov	r3, r1
 8003110:	813b      	strh	r3, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003124:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003134:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	2200      	movs	r2, #0
 800313e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f8c2 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315c:	d103      	bne.n	8003166 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0aa      	b.n	80032c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003178:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	6a3a      	ldr	r2, [r7, #32]
 800317e:	4952      	ldr	r1, [pc, #328]	; (80032c8 <I2C_RequestMemoryRead+0x1cc>)
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f8fa 	bl	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e097      	b.n	80032c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a8:	6a39      	ldr	r1, [r7, #32]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f964 	bl	8003478 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d107      	bne.n	80031ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e076      	b.n	80032c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031d8:	893b      	ldrh	r3, [r7, #8]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	e021      	b.n	8003228 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	6a39      	ldr	r1, [r7, #32]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f93e 	bl	8003478 <I2C_WaitOnTXEFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b04      	cmp	r3, #4
 8003208:	d107      	bne.n	800321a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e050      	b.n	80032c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800321e:	893b      	ldrh	r3, [r7, #8]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322a:	6a39      	ldr	r1, [r7, #32]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f923 	bl	8003478 <I2C_WaitOnTXEFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	2b04      	cmp	r3, #4
 800323e:	d107      	bne.n	8003250 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e035      	b.n	80032c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003262:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2200      	movs	r2, #0
 800326c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f82b 	bl	80032cc <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800328a:	d103      	bne.n	8003294 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e013      	b.n	80032c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003298:	897b      	ldrh	r3, [r7, #10]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	6a3a      	ldr	r2, [r7, #32]
 80032ac:	4906      	ldr	r1, [pc, #24]	; (80032c8 <I2C_RequestMemoryRead+0x1cc>)
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f863 	bl	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	00010002 	.word	0x00010002

080032cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032dc:	e025      	b.n	800332a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d021      	beq.n	800332a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e6:	f7fe fc57 	bl	8001b98 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d116      	bne.n	800332a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e023      	b.n	8003372 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10d      	bne.n	8003350 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf0c      	ite	eq
 8003346:	2301      	moveq	r3, #1
 8003348:	2300      	movne	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	e00c      	b.n	800336a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	43da      	mvns	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4013      	ands	r3, r2
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	429a      	cmp	r2, r3
 800336e:	d0b6      	beq.n	80032de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003388:	e051      	b.n	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003398:	d123      	bne.n	80033e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e046      	b.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d021      	beq.n	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7fe fbd5 	bl	8001b98 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d116      	bne.n	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f043 0220 	orr.w	r2, r3, #32
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e020      	b.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d10c      	bne.n	8003452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	e00b      	b.n	800346a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	43da      	mvns	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d18d      	bne.n	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003484:	e02d      	b.n	80034e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f8ce 	bl	8003628 <I2C_IsAcknowledgeFailed>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e02d      	b.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d021      	beq.n	80034e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe fb7b 	bl	8001b98 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d116      	bne.n	80034e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e007      	b.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d1ca      	bne.n	8003486 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003506:	e02d      	b.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f88d 	bl	8003628 <I2C_IsAcknowledgeFailed>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e02d      	b.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d021      	beq.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7fe fb3a 	bl	8001b98 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d116      	bne.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e007      	b.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b04      	cmp	r3, #4
 8003570:	d1ca      	bne.n	8003508 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003588:	e042      	b.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b10      	cmp	r3, #16
 8003596:	d119      	bne.n	80035cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0210 	mvn.w	r2, #16
 80035a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e029      	b.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035cc:	f7fe fae4 	bl	8001b98 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d302      	bcc.n	80035e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e007      	b.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d1b5      	bne.n	800358a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363e:	d11b      	bne.n	8003678 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003648:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e26c      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8087 	beq.w	80037b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a4:	4b92      	ldr	r3, [pc, #584]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d00c      	beq.n	80036ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036b0:	4b8f      	ldr	r3, [pc, #572]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d112      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5e>
 80036bc:	4b8c      	ldr	r3, [pc, #560]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c8:	d10b      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ca:	4b89      	ldr	r3, [pc, #548]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d06c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x12c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d168      	bne.n	80037b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e246      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x76>
 80036ec:	4b80      	ldr	r3, [pc, #512]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a7f      	ldr	r2, [pc, #508]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e02e      	b.n	8003758 <HAL_RCC_OscConfig+0xd4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x98>
 8003702:	4b7b      	ldr	r3, [pc, #492]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a7a      	ldr	r2, [pc, #488]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b78      	ldr	r3, [pc, #480]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a77      	ldr	r2, [pc, #476]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e01d      	b.n	8003758 <HAL_RCC_OscConfig+0xd4>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0xbc>
 8003726:	4b72      	ldr	r3, [pc, #456]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a71      	ldr	r2, [pc, #452]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b6f      	ldr	r3, [pc, #444]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6e      	ldr	r2, [pc, #440]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0xd4>
 8003740:	4b6b      	ldr	r3, [pc, #428]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6a      	ldr	r2, [pc, #424]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b68      	ldr	r3, [pc, #416]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a67      	ldr	r2, [pc, #412]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe fa1a 	bl	8001b98 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003768:	f7fe fa16 	bl	8001b98 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e1fa      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b5d      	ldr	r3, [pc, #372]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xe4>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe fa06 	bl	8001b98 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003790:	f7fe fa02 	bl	8001b98 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e1e6      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x10c>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d063      	beq.n	8003886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037be:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ca:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d11c      	bne.n	8003810 <HAL_RCC_OscConfig+0x18c>
 80037d6:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_RCC_OscConfig+0x176>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e1ba      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4939      	ldr	r1, [pc, #228]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	e03a      	b.n	8003886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003818:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCC_OscConfig+0x270>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7fe f9bb 	bl	8001b98 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003826:	f7fe f9b7 	bl	8001b98 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e19b      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003838:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4927      	ldr	r1, [pc, #156]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
 8003858:	e015      	b.n	8003886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385a:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_RCC_OscConfig+0x270>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe f99a 	bl	8001b98 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003868:	f7fe f996 	bl	8001b98 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e17a      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387a:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03a      	beq.n	8003908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d019      	beq.n	80038ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389a:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a0:	f7fe f97a 	bl	8001b98 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a8:	f7fe f976 	bl	8001b98 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e15a      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038c6:	2001      	movs	r0, #1
 80038c8:	f000 fac4 	bl	8003e54 <RCC_Delay>
 80038cc:	e01c      	b.n	8003908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCC_OscConfig+0x274>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7fe f960 	bl	8001b98 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038da:	e00f      	b.n	80038fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fe f95c 	bl	8001b98 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d908      	bls.n	80038fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e140      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	42420000 	.word	0x42420000
 80038f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	4b9e      	ldr	r3, [pc, #632]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e9      	bne.n	80038dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80a6 	beq.w	8003a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391a:	4b97      	ldr	r3, [pc, #604]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10d      	bne.n	8003942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	4b94      	ldr	r3, [pc, #592]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4a93      	ldr	r2, [pc, #588]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003930:	61d3      	str	r3, [r2, #28]
 8003932:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003942:	4b8e      	ldr	r3, [pc, #568]	; (8003b7c <HAL_RCC_OscConfig+0x4f8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d118      	bne.n	8003980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394e:	4b8b      	ldr	r3, [pc, #556]	; (8003b7c <HAL_RCC_OscConfig+0x4f8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a8a      	ldr	r2, [pc, #552]	; (8003b7c <HAL_RCC_OscConfig+0x4f8>)
 8003954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395a:	f7fe f91d 	bl	8001b98 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003962:	f7fe f919 	bl	8001b98 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b64      	cmp	r3, #100	; 0x64
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e0fd      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x4f8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x312>
 8003988:	4b7b      	ldr	r3, [pc, #492]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4a7a      	ldr	r2, [pc, #488]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6213      	str	r3, [r2, #32]
 8003994:	e02d      	b.n	80039f2 <HAL_RCC_OscConfig+0x36e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x334>
 800399e:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a75      	ldr	r2, [pc, #468]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	6213      	str	r3, [r2, #32]
 80039aa:	4b73      	ldr	r3, [pc, #460]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a72      	ldr	r2, [pc, #456]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	6213      	str	r3, [r2, #32]
 80039b6:	e01c      	b.n	80039f2 <HAL_RCC_OscConfig+0x36e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b05      	cmp	r3, #5
 80039be:	d10c      	bne.n	80039da <HAL_RCC_OscConfig+0x356>
 80039c0:	4b6d      	ldr	r3, [pc, #436]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4a6c      	ldr	r2, [pc, #432]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039c6:	f043 0304 	orr.w	r3, r3, #4
 80039ca:	6213      	str	r3, [r2, #32]
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4a69      	ldr	r2, [pc, #420]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6213      	str	r3, [r2, #32]
 80039d8:	e00b      	b.n	80039f2 <HAL_RCC_OscConfig+0x36e>
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a66      	ldr	r2, [pc, #408]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	6213      	str	r3, [r2, #32]
 80039e6:	4b64      	ldr	r3, [pc, #400]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a63      	ldr	r2, [pc, #396]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 80039ec:	f023 0304 	bic.w	r3, r3, #4
 80039f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d015      	beq.n	8003a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fa:	f7fe f8cd 	bl	8001b98 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a00:	e00a      	b.n	8003a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a02:	f7fe f8c9 	bl	8001b98 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e0ab      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ee      	beq.n	8003a02 <HAL_RCC_OscConfig+0x37e>
 8003a24:	e014      	b.n	8003a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fe f8b7 	bl	8001b98 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fe f8b3 	bl	8001b98 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e095      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ee      	bne.n	8003a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d105      	bne.n	8003a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a56:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4a47      	ldr	r2, [pc, #284]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8081 	beq.w	8003b6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a6c:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d061      	beq.n	8003b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d146      	bne.n	8003b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <HAL_RCC_OscConfig+0x4fc>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7fe f887 	bl	8001b98 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fe f883 	bl	8001b98 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e067      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa0:	4b35      	ldr	r3, [pc, #212]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab4:	d108      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ab6:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	492d      	ldr	r1, [pc, #180]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a19      	ldr	r1, [r3, #32]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	4927      	ldr	r1, [pc, #156]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae0:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <HAL_RCC_OscConfig+0x4fc>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fe f857 	bl	8001b98 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aee:	f7fe f853 	bl	8001b98 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e037      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x46a>
 8003b0c:	e02f      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_RCC_OscConfig+0x4fc>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe f840 	bl	8001b98 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fe f83c 	bl	8001b98 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e020      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x498>
 8003b3a:	e018      	b.n	8003b6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e013      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x4f4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	42420060 	.word	0x42420060

08003b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0d0      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d910      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b67      	ldr	r3, [pc, #412]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 0207 	bic.w	r2, r3, #7
 8003bae:	4965      	ldr	r1, [pc, #404]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b63      	ldr	r3, [pc, #396]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0b8      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be0:	4b59      	ldr	r3, [pc, #356]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a58      	ldr	r2, [pc, #352]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf8:	4b53      	ldr	r3, [pc, #332]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4a52      	ldr	r2, [pc, #328]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4b50      	ldr	r3, [pc, #320]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	494d      	ldr	r1, [pc, #308]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d040      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	4b47      	ldr	r3, [pc, #284]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d115      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e07f      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e073      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	4b3d      	ldr	r3, [pc, #244]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e06b      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4936      	ldr	r1, [pc, #216]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c74:	f7fd ff90 	bl	8001b98 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fd ff8c 	bl	8001b98 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e053      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b2d      	ldr	r3, [pc, #180]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 020c 	and.w	r2, r3, #12
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1eb      	bne.n	8003c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d210      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 0207 	bic.w	r2, r3, #7
 8003cba:	4922      	ldr	r1, [pc, #136]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e032      	b.n	8003d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4916      	ldr	r1, [pc, #88]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	490e      	ldr	r1, [pc, #56]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d12:	f000 f821 	bl	8003d58 <HAL_RCC_GetSysClockFreq>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	490a      	ldr	r1, [pc, #40]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d24:	5ccb      	ldrb	r3, [r1, r3]
 8003d26:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2a:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1cc>)
 8003d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <HAL_RCC_ClockConfig+0x1d0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd feee 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	08008f98 	.word	0x08008f98
 8003d50:	20000008 	.word	0x20000008
 8003d54:	2000000c 	.word	0x2000000c

08003d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d58:	b490      	push	{r4, r7}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d60:	1d3c      	adds	r4, r7, #4
 8003d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d68:	f240 2301 	movw	r3, #513	; 0x201
 8003d6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	2300      	movs	r3, #0
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	2300      	movs	r3, #0
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d82:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d002      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0x40>
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d003      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x46>
 8003d96:	e02d      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d9a:	623b      	str	r3, [r7, #32]
      break;
 8003d9c:	e02d      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	0c9b      	lsrs	r3, r3, #18
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003daa:	4413      	add	r3, r2
 8003dac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003db0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	0c5b      	lsrs	r3, r3, #17
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003dca:	4413      	add	r3, r2
 8003dcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003dd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	4a0e      	ldr	r2, [pc, #56]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd6:	fb02 f203 	mul.w	r2, r2, r3
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
 8003de2:	e004      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4a0b      	ldr	r2, [pc, #44]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003de8:	fb02 f303 	mul.w	r3, r2, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	623b      	str	r3, [r7, #32]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df6:	623b      	str	r3, [r7, #32]
      break;
 8003df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3728      	adds	r7, #40	; 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc90      	pop	{r4, r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	0800881c 	.word	0x0800881c
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	007a1200 	.word	0x007a1200
 8003e14:	003d0900 	.word	0x003d0900

08003e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b02      	ldr	r3, [pc, #8]	; (8003e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	20000008 	.word	0x20000008

08003e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e30:	f7ff fff2 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	4903      	ldr	r1, [pc, #12]	; (8003e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	08008fa8 	.word	0x08008fa8

08003e54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <RCC_Delay+0x34>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <RCC_Delay+0x38>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0a5b      	lsrs	r3, r3, #9
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e70:	bf00      	nop
  }
  while (Delay --);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1e5a      	subs	r2, r3, #1
 8003e76:	60fa      	str	r2, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f9      	bne.n	8003e70 <RCC_Delay+0x1c>
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	20000008 	.word	0x20000008
 8003e8c:	10624dd3 	.word	0x10624dd3

08003e90 <__errno>:
 8003e90:	4b01      	ldr	r3, [pc, #4]	; (8003e98 <__errno+0x8>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000014 	.word	0x20000014

08003e9c <__libc_init_array>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	2600      	movs	r6, #0
 8003ea0:	4d0c      	ldr	r5, [pc, #48]	; (8003ed4 <__libc_init_array+0x38>)
 8003ea2:	4c0d      	ldr	r4, [pc, #52]	; (8003ed8 <__libc_init_array+0x3c>)
 8003ea4:	1b64      	subs	r4, r4, r5
 8003ea6:	10a4      	asrs	r4, r4, #2
 8003ea8:	42a6      	cmp	r6, r4
 8003eaa:	d109      	bne.n	8003ec0 <__libc_init_array+0x24>
 8003eac:	f004 fc86 	bl	80087bc <_init>
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	4d0a      	ldr	r5, [pc, #40]	; (8003edc <__libc_init_array+0x40>)
 8003eb4:	4c0a      	ldr	r4, [pc, #40]	; (8003ee0 <__libc_init_array+0x44>)
 8003eb6:	1b64      	subs	r4, r4, r5
 8003eb8:	10a4      	asrs	r4, r4, #2
 8003eba:	42a6      	cmp	r6, r4
 8003ebc:	d105      	bne.n	8003eca <__libc_init_array+0x2e>
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec4:	4798      	blx	r3
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7ee      	b.n	8003ea8 <__libc_init_array+0xc>
 8003eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ece:	4798      	blx	r3
 8003ed0:	3601      	adds	r6, #1
 8003ed2:	e7f2      	b.n	8003eba <__libc_init_array+0x1e>
 8003ed4:	08009484 	.word	0x08009484
 8003ed8:	08009484 	.word	0x08009484
 8003edc:	08009484 	.word	0x08009484
 8003ee0:	08009488 	.word	0x08009488

08003ee4 <__itoa>:
 8003ee4:	1e93      	subs	r3, r2, #2
 8003ee6:	2b22      	cmp	r3, #34	; 0x22
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	460c      	mov	r4, r1
 8003eec:	d904      	bls.n	8003ef8 <__itoa+0x14>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	461c      	mov	r4, r3
 8003ef2:	700b      	strb	r3, [r1, #0]
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	bd10      	pop	{r4, pc}
 8003ef8:	2a0a      	cmp	r2, #10
 8003efa:	d109      	bne.n	8003f10 <__itoa+0x2c>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	da07      	bge.n	8003f10 <__itoa+0x2c>
 8003f00:	232d      	movs	r3, #45	; 0x2d
 8003f02:	700b      	strb	r3, [r1, #0]
 8003f04:	2101      	movs	r1, #1
 8003f06:	4240      	negs	r0, r0
 8003f08:	4421      	add	r1, r4
 8003f0a:	f001 fd47 	bl	800599c <__utoa>
 8003f0e:	e7f1      	b.n	8003ef4 <__itoa+0x10>
 8003f10:	2100      	movs	r1, #0
 8003f12:	e7f9      	b.n	8003f08 <__itoa+0x24>

08003f14 <itoa>:
 8003f14:	f7ff bfe6 	b.w	8003ee4 <__itoa>

08003f18 <memset>:
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4402      	add	r2, r0
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <memset+0xa>
 8003f20:	4770      	bx	lr
 8003f22:	f803 1b01 	strb.w	r1, [r3], #1
 8003f26:	e7f9      	b.n	8003f1c <memset+0x4>

08003f28 <__cvt>:
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f2e:	461f      	mov	r7, r3
 8003f30:	bfbb      	ittet	lt
 8003f32:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f36:	461f      	movlt	r7, r3
 8003f38:	2300      	movge	r3, #0
 8003f3a:	232d      	movlt	r3, #45	; 0x2d
 8003f3c:	b088      	sub	sp, #32
 8003f3e:	4614      	mov	r4, r2
 8003f40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003f42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f44:	7013      	strb	r3, [r2, #0]
 8003f46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f48:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003f4c:	f023 0820 	bic.w	r8, r3, #32
 8003f50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f54:	d005      	beq.n	8003f62 <__cvt+0x3a>
 8003f56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f5a:	d100      	bne.n	8003f5e <__cvt+0x36>
 8003f5c:	3501      	adds	r5, #1
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e000      	b.n	8003f64 <__cvt+0x3c>
 8003f62:	2303      	movs	r3, #3
 8003f64:	aa07      	add	r2, sp, #28
 8003f66:	9204      	str	r2, [sp, #16]
 8003f68:	aa06      	add	r2, sp, #24
 8003f6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003f6e:	e9cd 3500 	strd	r3, r5, [sp]
 8003f72:	4622      	mov	r2, r4
 8003f74:	463b      	mov	r3, r7
 8003f76:	f001 fde3 	bl	8005b40 <_dtoa_r>
 8003f7a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f7e:	4606      	mov	r6, r0
 8003f80:	d102      	bne.n	8003f88 <__cvt+0x60>
 8003f82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f84:	07db      	lsls	r3, r3, #31
 8003f86:	d522      	bpl.n	8003fce <__cvt+0xa6>
 8003f88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f8c:	eb06 0905 	add.w	r9, r6, r5
 8003f90:	d110      	bne.n	8003fb4 <__cvt+0x8c>
 8003f92:	7833      	ldrb	r3, [r6, #0]
 8003f94:	2b30      	cmp	r3, #48	; 0x30
 8003f96:	d10a      	bne.n	8003fae <__cvt+0x86>
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	f7fc fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8003fa4:	b918      	cbnz	r0, 8003fae <__cvt+0x86>
 8003fa6:	f1c5 0501 	rsb	r5, r5, #1
 8003faa:	f8ca 5000 	str.w	r5, [sl]
 8003fae:	f8da 3000 	ldr.w	r3, [sl]
 8003fb2:	4499      	add	r9, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	4620      	mov	r0, r4
 8003fba:	4639      	mov	r1, r7
 8003fbc:	f7fc fcf4 	bl	80009a8 <__aeabi_dcmpeq>
 8003fc0:	b108      	cbz	r0, 8003fc6 <__cvt+0x9e>
 8003fc2:	f8cd 901c 	str.w	r9, [sp, #28]
 8003fc6:	2230      	movs	r2, #48	; 0x30
 8003fc8:	9b07      	ldr	r3, [sp, #28]
 8003fca:	454b      	cmp	r3, r9
 8003fcc:	d307      	bcc.n	8003fde <__cvt+0xb6>
 8003fce:	4630      	mov	r0, r6
 8003fd0:	9b07      	ldr	r3, [sp, #28]
 8003fd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003fd4:	1b9b      	subs	r3, r3, r6
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	b008      	add	sp, #32
 8003fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	9107      	str	r1, [sp, #28]
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	e7f0      	b.n	8003fc8 <__cvt+0xa0>

08003fe6 <__exponent>:
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fea:	2900      	cmp	r1, #0
 8003fec:	f803 2b02 	strb.w	r2, [r3], #2
 8003ff0:	bfb6      	itet	lt
 8003ff2:	222d      	movlt	r2, #45	; 0x2d
 8003ff4:	222b      	movge	r2, #43	; 0x2b
 8003ff6:	4249      	neglt	r1, r1
 8003ff8:	2909      	cmp	r1, #9
 8003ffa:	7042      	strb	r2, [r0, #1]
 8003ffc:	dd2b      	ble.n	8004056 <__exponent+0x70>
 8003ffe:	f10d 0407 	add.w	r4, sp, #7
 8004002:	46a4      	mov	ip, r4
 8004004:	270a      	movs	r7, #10
 8004006:	fb91 f6f7 	sdiv	r6, r1, r7
 800400a:	460a      	mov	r2, r1
 800400c:	46a6      	mov	lr, r4
 800400e:	fb07 1516 	mls	r5, r7, r6, r1
 8004012:	2a63      	cmp	r2, #99	; 0x63
 8004014:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004018:	4631      	mov	r1, r6
 800401a:	f104 34ff 	add.w	r4, r4, #4294967295
 800401e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004022:	dcf0      	bgt.n	8004006 <__exponent+0x20>
 8004024:	3130      	adds	r1, #48	; 0x30
 8004026:	f1ae 0502 	sub.w	r5, lr, #2
 800402a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800402e:	4629      	mov	r1, r5
 8004030:	1c44      	adds	r4, r0, #1
 8004032:	4561      	cmp	r1, ip
 8004034:	d30a      	bcc.n	800404c <__exponent+0x66>
 8004036:	f10d 0209 	add.w	r2, sp, #9
 800403a:	eba2 020e 	sub.w	r2, r2, lr
 800403e:	4565      	cmp	r5, ip
 8004040:	bf88      	it	hi
 8004042:	2200      	movhi	r2, #0
 8004044:	4413      	add	r3, r2
 8004046:	1a18      	subs	r0, r3, r0
 8004048:	b003      	add	sp, #12
 800404a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800404c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004050:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004054:	e7ed      	b.n	8004032 <__exponent+0x4c>
 8004056:	2330      	movs	r3, #48	; 0x30
 8004058:	3130      	adds	r1, #48	; 0x30
 800405a:	7083      	strb	r3, [r0, #2]
 800405c:	70c1      	strb	r1, [r0, #3]
 800405e:	1d03      	adds	r3, r0, #4
 8004060:	e7f1      	b.n	8004046 <__exponent+0x60>
	...

08004064 <_printf_float>:
 8004064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004068:	b091      	sub	sp, #68	; 0x44
 800406a:	460c      	mov	r4, r1
 800406c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004070:	4616      	mov	r6, r2
 8004072:	461f      	mov	r7, r3
 8004074:	4605      	mov	r5, r0
 8004076:	f002 feb7 	bl	8006de8 <_localeconv_r>
 800407a:	6803      	ldr	r3, [r0, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	9309      	str	r3, [sp, #36]	; 0x24
 8004080:	f7fc f866 	bl	8000150 <strlen>
 8004084:	2300      	movs	r3, #0
 8004086:	930e      	str	r3, [sp, #56]	; 0x38
 8004088:	f8d8 3000 	ldr.w	r3, [r8]
 800408c:	900a      	str	r0, [sp, #40]	; 0x28
 800408e:	3307      	adds	r3, #7
 8004090:	f023 0307 	bic.w	r3, r3, #7
 8004094:	f103 0208 	add.w	r2, r3, #8
 8004098:	f894 9018 	ldrb.w	r9, [r4, #24]
 800409c:	f8d4 b000 	ldr.w	fp, [r4]
 80040a0:	f8c8 2000 	str.w	r2, [r8]
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80040b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80040b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80040b6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ba:	4640      	mov	r0, r8
 80040bc:	4b9c      	ldr	r3, [pc, #624]	; (8004330 <_printf_float+0x2cc>)
 80040be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040c0:	f7fc fca4 	bl	8000a0c <__aeabi_dcmpun>
 80040c4:	bb70      	cbnz	r0, 8004124 <_printf_float+0xc0>
 80040c6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ca:	4640      	mov	r0, r8
 80040cc:	4b98      	ldr	r3, [pc, #608]	; (8004330 <_printf_float+0x2cc>)
 80040ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040d0:	f7fc fc7e 	bl	80009d0 <__aeabi_dcmple>
 80040d4:	bb30      	cbnz	r0, 8004124 <_printf_float+0xc0>
 80040d6:	2200      	movs	r2, #0
 80040d8:	2300      	movs	r3, #0
 80040da:	4640      	mov	r0, r8
 80040dc:	4651      	mov	r1, sl
 80040de:	f7fc fc6d 	bl	80009bc <__aeabi_dcmplt>
 80040e2:	b110      	cbz	r0, 80040ea <_printf_float+0x86>
 80040e4:	232d      	movs	r3, #45	; 0x2d
 80040e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ea:	4b92      	ldr	r3, [pc, #584]	; (8004334 <_printf_float+0x2d0>)
 80040ec:	4892      	ldr	r0, [pc, #584]	; (8004338 <_printf_float+0x2d4>)
 80040ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80040f2:	bf94      	ite	ls
 80040f4:	4698      	movls	r8, r3
 80040f6:	4680      	movhi	r8, r0
 80040f8:	2303      	movs	r3, #3
 80040fa:	f04f 0a00 	mov.w	sl, #0
 80040fe:	6123      	str	r3, [r4, #16]
 8004100:	f02b 0304 	bic.w	r3, fp, #4
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	4633      	mov	r3, r6
 8004108:	4621      	mov	r1, r4
 800410a:	4628      	mov	r0, r5
 800410c:	9700      	str	r7, [sp, #0]
 800410e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004110:	f000 f9d4 	bl	80044bc <_printf_common>
 8004114:	3001      	adds	r0, #1
 8004116:	f040 8090 	bne.w	800423a <_printf_float+0x1d6>
 800411a:	f04f 30ff 	mov.w	r0, #4294967295
 800411e:	b011      	add	sp, #68	; 0x44
 8004120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004124:	4642      	mov	r2, r8
 8004126:	4653      	mov	r3, sl
 8004128:	4640      	mov	r0, r8
 800412a:	4651      	mov	r1, sl
 800412c:	f7fc fc6e 	bl	8000a0c <__aeabi_dcmpun>
 8004130:	b148      	cbz	r0, 8004146 <_printf_float+0xe2>
 8004132:	f1ba 0f00 	cmp.w	sl, #0
 8004136:	bfb8      	it	lt
 8004138:	232d      	movlt	r3, #45	; 0x2d
 800413a:	4880      	ldr	r0, [pc, #512]	; (800433c <_printf_float+0x2d8>)
 800413c:	bfb8      	it	lt
 800413e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004142:	4b7f      	ldr	r3, [pc, #508]	; (8004340 <_printf_float+0x2dc>)
 8004144:	e7d3      	b.n	80040ee <_printf_float+0x8a>
 8004146:	6863      	ldr	r3, [r4, #4]
 8004148:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	d142      	bne.n	80041d6 <_printf_float+0x172>
 8004150:	2306      	movs	r3, #6
 8004152:	6063      	str	r3, [r4, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	9206      	str	r2, [sp, #24]
 8004158:	aa0e      	add	r2, sp, #56	; 0x38
 800415a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800415e:	aa0d      	add	r2, sp, #52	; 0x34
 8004160:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004164:	9203      	str	r2, [sp, #12]
 8004166:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800416a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800416e:	6023      	str	r3, [r4, #0]
 8004170:	6863      	ldr	r3, [r4, #4]
 8004172:	4642      	mov	r2, r8
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	4628      	mov	r0, r5
 8004178:	4653      	mov	r3, sl
 800417a:	910b      	str	r1, [sp, #44]	; 0x2c
 800417c:	f7ff fed4 	bl	8003f28 <__cvt>
 8004180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004182:	4680      	mov	r8, r0
 8004184:	2947      	cmp	r1, #71	; 0x47
 8004186:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004188:	d108      	bne.n	800419c <_printf_float+0x138>
 800418a:	1cc8      	adds	r0, r1, #3
 800418c:	db02      	blt.n	8004194 <_printf_float+0x130>
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	4299      	cmp	r1, r3
 8004192:	dd40      	ble.n	8004216 <_printf_float+0x1b2>
 8004194:	f1a9 0902 	sub.w	r9, r9, #2
 8004198:	fa5f f989 	uxtb.w	r9, r9
 800419c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80041a0:	d81f      	bhi.n	80041e2 <_printf_float+0x17e>
 80041a2:	464a      	mov	r2, r9
 80041a4:	3901      	subs	r1, #1
 80041a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041aa:	910d      	str	r1, [sp, #52]	; 0x34
 80041ac:	f7ff ff1b 	bl	8003fe6 <__exponent>
 80041b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041b2:	4682      	mov	sl, r0
 80041b4:	1813      	adds	r3, r2, r0
 80041b6:	2a01      	cmp	r2, #1
 80041b8:	6123      	str	r3, [r4, #16]
 80041ba:	dc02      	bgt.n	80041c2 <_printf_float+0x15e>
 80041bc:	6822      	ldr	r2, [r4, #0]
 80041be:	07d2      	lsls	r2, r2, #31
 80041c0:	d501      	bpl.n	80041c6 <_printf_float+0x162>
 80041c2:	3301      	adds	r3, #1
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d09b      	beq.n	8004106 <_printf_float+0xa2>
 80041ce:	232d      	movs	r3, #45	; 0x2d
 80041d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d4:	e797      	b.n	8004106 <_printf_float+0xa2>
 80041d6:	2947      	cmp	r1, #71	; 0x47
 80041d8:	d1bc      	bne.n	8004154 <_printf_float+0xf0>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ba      	bne.n	8004154 <_printf_float+0xf0>
 80041de:	2301      	movs	r3, #1
 80041e0:	e7b7      	b.n	8004152 <_printf_float+0xee>
 80041e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80041e6:	d118      	bne.n	800421a <_printf_float+0x1b6>
 80041e8:	2900      	cmp	r1, #0
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	dd0b      	ble.n	8004206 <_printf_float+0x1a2>
 80041ee:	6121      	str	r1, [r4, #16]
 80041f0:	b913      	cbnz	r3, 80041f8 <_printf_float+0x194>
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	07d0      	lsls	r0, r2, #31
 80041f6:	d502      	bpl.n	80041fe <_printf_float+0x19a>
 80041f8:	3301      	adds	r3, #1
 80041fa:	440b      	add	r3, r1
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	f04f 0a00 	mov.w	sl, #0
 8004202:	65a1      	str	r1, [r4, #88]	; 0x58
 8004204:	e7df      	b.n	80041c6 <_printf_float+0x162>
 8004206:	b913      	cbnz	r3, 800420e <_printf_float+0x1aa>
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	07d2      	lsls	r2, r2, #31
 800420c:	d501      	bpl.n	8004212 <_printf_float+0x1ae>
 800420e:	3302      	adds	r3, #2
 8004210:	e7f4      	b.n	80041fc <_printf_float+0x198>
 8004212:	2301      	movs	r3, #1
 8004214:	e7f2      	b.n	80041fc <_printf_float+0x198>
 8004216:	f04f 0967 	mov.w	r9, #103	; 0x67
 800421a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800421c:	4299      	cmp	r1, r3
 800421e:	db05      	blt.n	800422c <_printf_float+0x1c8>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	6121      	str	r1, [r4, #16]
 8004224:	07d8      	lsls	r0, r3, #31
 8004226:	d5ea      	bpl.n	80041fe <_printf_float+0x19a>
 8004228:	1c4b      	adds	r3, r1, #1
 800422a:	e7e7      	b.n	80041fc <_printf_float+0x198>
 800422c:	2900      	cmp	r1, #0
 800422e:	bfcc      	ite	gt
 8004230:	2201      	movgt	r2, #1
 8004232:	f1c1 0202 	rsble	r2, r1, #2
 8004236:	4413      	add	r3, r2
 8004238:	e7e0      	b.n	80041fc <_printf_float+0x198>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	055a      	lsls	r2, r3, #21
 800423e:	d407      	bmi.n	8004250 <_printf_float+0x1ec>
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	4642      	mov	r2, r8
 8004244:	4631      	mov	r1, r6
 8004246:	4628      	mov	r0, r5
 8004248:	47b8      	blx	r7
 800424a:	3001      	adds	r0, #1
 800424c:	d12b      	bne.n	80042a6 <_printf_float+0x242>
 800424e:	e764      	b.n	800411a <_printf_float+0xb6>
 8004250:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004254:	f240 80dd 	bls.w	8004412 <_printf_float+0x3ae>
 8004258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800425c:	2200      	movs	r2, #0
 800425e:	2300      	movs	r3, #0
 8004260:	f7fc fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8004264:	2800      	cmp	r0, #0
 8004266:	d033      	beq.n	80042d0 <_printf_float+0x26c>
 8004268:	2301      	movs	r3, #1
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	4a35      	ldr	r2, [pc, #212]	; (8004344 <_printf_float+0x2e0>)
 8004270:	47b8      	blx	r7
 8004272:	3001      	adds	r0, #1
 8004274:	f43f af51 	beq.w	800411a <_printf_float+0xb6>
 8004278:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800427c:	429a      	cmp	r2, r3
 800427e:	db02      	blt.n	8004286 <_printf_float+0x222>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	07d8      	lsls	r0, r3, #31
 8004284:	d50f      	bpl.n	80042a6 <_printf_float+0x242>
 8004286:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800428a:	4631      	mov	r1, r6
 800428c:	4628      	mov	r0, r5
 800428e:	47b8      	blx	r7
 8004290:	3001      	adds	r0, #1
 8004292:	f43f af42 	beq.w	800411a <_printf_float+0xb6>
 8004296:	f04f 0800 	mov.w	r8, #0
 800429a:	f104 091a 	add.w	r9, r4, #26
 800429e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042a0:	3b01      	subs	r3, #1
 80042a2:	4543      	cmp	r3, r8
 80042a4:	dc09      	bgt.n	80042ba <_printf_float+0x256>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	079b      	lsls	r3, r3, #30
 80042aa:	f100 8102 	bmi.w	80044b2 <_printf_float+0x44e>
 80042ae:	68e0      	ldr	r0, [r4, #12]
 80042b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042b2:	4298      	cmp	r0, r3
 80042b4:	bfb8      	it	lt
 80042b6:	4618      	movlt	r0, r3
 80042b8:	e731      	b.n	800411e <_printf_float+0xba>
 80042ba:	2301      	movs	r3, #1
 80042bc:	464a      	mov	r2, r9
 80042be:	4631      	mov	r1, r6
 80042c0:	4628      	mov	r0, r5
 80042c2:	47b8      	blx	r7
 80042c4:	3001      	adds	r0, #1
 80042c6:	f43f af28 	beq.w	800411a <_printf_float+0xb6>
 80042ca:	f108 0801 	add.w	r8, r8, #1
 80042ce:	e7e6      	b.n	800429e <_printf_float+0x23a>
 80042d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	dc38      	bgt.n	8004348 <_printf_float+0x2e4>
 80042d6:	2301      	movs	r3, #1
 80042d8:	4631      	mov	r1, r6
 80042da:	4628      	mov	r0, r5
 80042dc:	4a19      	ldr	r2, [pc, #100]	; (8004344 <_printf_float+0x2e0>)
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	f43f af1a 	beq.w	800411a <_printf_float+0xb6>
 80042e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d102      	bne.n	80042f4 <_printf_float+0x290>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	07d9      	lsls	r1, r3, #31
 80042f2:	d5d8      	bpl.n	80042a6 <_printf_float+0x242>
 80042f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042f8:	4631      	mov	r1, r6
 80042fa:	4628      	mov	r0, r5
 80042fc:	47b8      	blx	r7
 80042fe:	3001      	adds	r0, #1
 8004300:	f43f af0b 	beq.w	800411a <_printf_float+0xb6>
 8004304:	f04f 0900 	mov.w	r9, #0
 8004308:	f104 0a1a 	add.w	sl, r4, #26
 800430c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800430e:	425b      	negs	r3, r3
 8004310:	454b      	cmp	r3, r9
 8004312:	dc01      	bgt.n	8004318 <_printf_float+0x2b4>
 8004314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004316:	e794      	b.n	8004242 <_printf_float+0x1de>
 8004318:	2301      	movs	r3, #1
 800431a:	4652      	mov	r2, sl
 800431c:	4631      	mov	r1, r6
 800431e:	4628      	mov	r0, r5
 8004320:	47b8      	blx	r7
 8004322:	3001      	adds	r0, #1
 8004324:	f43f aef9 	beq.w	800411a <_printf_float+0xb6>
 8004328:	f109 0901 	add.w	r9, r9, #1
 800432c:	e7ee      	b.n	800430c <_printf_float+0x2a8>
 800432e:	bf00      	nop
 8004330:	7fefffff 	.word	0x7fefffff
 8004334:	08008fb4 	.word	0x08008fb4
 8004338:	08008fb8 	.word	0x08008fb8
 800433c:	08008fc0 	.word	0x08008fc0
 8004340:	08008fbc 	.word	0x08008fbc
 8004344:	08008fc4 	.word	0x08008fc4
 8004348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800434a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800434c:	429a      	cmp	r2, r3
 800434e:	bfa8      	it	ge
 8004350:	461a      	movge	r2, r3
 8004352:	2a00      	cmp	r2, #0
 8004354:	4691      	mov	r9, r2
 8004356:	dc37      	bgt.n	80043c8 <_printf_float+0x364>
 8004358:	f04f 0b00 	mov.w	fp, #0
 800435c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004360:	f104 021a 	add.w	r2, r4, #26
 8004364:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004368:	ebaa 0309 	sub.w	r3, sl, r9
 800436c:	455b      	cmp	r3, fp
 800436e:	dc33      	bgt.n	80043d8 <_printf_float+0x374>
 8004370:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004374:	429a      	cmp	r2, r3
 8004376:	db3b      	blt.n	80043f0 <_printf_float+0x38c>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	07da      	lsls	r2, r3, #31
 800437c:	d438      	bmi.n	80043f0 <_printf_float+0x38c>
 800437e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004380:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004382:	eba2 030a 	sub.w	r3, r2, sl
 8004386:	eba2 0901 	sub.w	r9, r2, r1
 800438a:	4599      	cmp	r9, r3
 800438c:	bfa8      	it	ge
 800438e:	4699      	movge	r9, r3
 8004390:	f1b9 0f00 	cmp.w	r9, #0
 8004394:	dc34      	bgt.n	8004400 <_printf_float+0x39c>
 8004396:	f04f 0800 	mov.w	r8, #0
 800439a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800439e:	f104 0a1a 	add.w	sl, r4, #26
 80043a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	eba3 0309 	sub.w	r3, r3, r9
 80043ac:	4543      	cmp	r3, r8
 80043ae:	f77f af7a 	ble.w	80042a6 <_printf_float+0x242>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4652      	mov	r2, sl
 80043b6:	4631      	mov	r1, r6
 80043b8:	4628      	mov	r0, r5
 80043ba:	47b8      	blx	r7
 80043bc:	3001      	adds	r0, #1
 80043be:	f43f aeac 	beq.w	800411a <_printf_float+0xb6>
 80043c2:	f108 0801 	add.w	r8, r8, #1
 80043c6:	e7ec      	b.n	80043a2 <_printf_float+0x33e>
 80043c8:	4613      	mov	r3, r2
 80043ca:	4631      	mov	r1, r6
 80043cc:	4642      	mov	r2, r8
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	d1c0      	bne.n	8004358 <_printf_float+0x2f4>
 80043d6:	e6a0      	b.n	800411a <_printf_float+0xb6>
 80043d8:	2301      	movs	r3, #1
 80043da:	4631      	mov	r1, r6
 80043dc:	4628      	mov	r0, r5
 80043de:	920b      	str	r2, [sp, #44]	; 0x2c
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	f43f ae99 	beq.w	800411a <_printf_float+0xb6>
 80043e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043ea:	f10b 0b01 	add.w	fp, fp, #1
 80043ee:	e7b9      	b.n	8004364 <_printf_float+0x300>
 80043f0:	4631      	mov	r1, r6
 80043f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f6:	4628      	mov	r0, r5
 80043f8:	47b8      	blx	r7
 80043fa:	3001      	adds	r0, #1
 80043fc:	d1bf      	bne.n	800437e <_printf_float+0x31a>
 80043fe:	e68c      	b.n	800411a <_printf_float+0xb6>
 8004400:	464b      	mov	r3, r9
 8004402:	4631      	mov	r1, r6
 8004404:	4628      	mov	r0, r5
 8004406:	eb08 020a 	add.w	r2, r8, sl
 800440a:	47b8      	blx	r7
 800440c:	3001      	adds	r0, #1
 800440e:	d1c2      	bne.n	8004396 <_printf_float+0x332>
 8004410:	e683      	b.n	800411a <_printf_float+0xb6>
 8004412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004414:	2a01      	cmp	r2, #1
 8004416:	dc01      	bgt.n	800441c <_printf_float+0x3b8>
 8004418:	07db      	lsls	r3, r3, #31
 800441a:	d537      	bpl.n	800448c <_printf_float+0x428>
 800441c:	2301      	movs	r3, #1
 800441e:	4642      	mov	r2, r8
 8004420:	4631      	mov	r1, r6
 8004422:	4628      	mov	r0, r5
 8004424:	47b8      	blx	r7
 8004426:	3001      	adds	r0, #1
 8004428:	f43f ae77 	beq.w	800411a <_printf_float+0xb6>
 800442c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004430:	4631      	mov	r1, r6
 8004432:	4628      	mov	r0, r5
 8004434:	47b8      	blx	r7
 8004436:	3001      	adds	r0, #1
 8004438:	f43f ae6f 	beq.w	800411a <_printf_float+0xb6>
 800443c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004440:	2200      	movs	r2, #0
 8004442:	2300      	movs	r3, #0
 8004444:	f7fc fab0 	bl	80009a8 <__aeabi_dcmpeq>
 8004448:	b9d8      	cbnz	r0, 8004482 <_printf_float+0x41e>
 800444a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800444c:	f108 0201 	add.w	r2, r8, #1
 8004450:	3b01      	subs	r3, #1
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	47b8      	blx	r7
 8004458:	3001      	adds	r0, #1
 800445a:	d10e      	bne.n	800447a <_printf_float+0x416>
 800445c:	e65d      	b.n	800411a <_printf_float+0xb6>
 800445e:	2301      	movs	r3, #1
 8004460:	464a      	mov	r2, r9
 8004462:	4631      	mov	r1, r6
 8004464:	4628      	mov	r0, r5
 8004466:	47b8      	blx	r7
 8004468:	3001      	adds	r0, #1
 800446a:	f43f ae56 	beq.w	800411a <_printf_float+0xb6>
 800446e:	f108 0801 	add.w	r8, r8, #1
 8004472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004474:	3b01      	subs	r3, #1
 8004476:	4543      	cmp	r3, r8
 8004478:	dcf1      	bgt.n	800445e <_printf_float+0x3fa>
 800447a:	4653      	mov	r3, sl
 800447c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004480:	e6e0      	b.n	8004244 <_printf_float+0x1e0>
 8004482:	f04f 0800 	mov.w	r8, #0
 8004486:	f104 091a 	add.w	r9, r4, #26
 800448a:	e7f2      	b.n	8004472 <_printf_float+0x40e>
 800448c:	2301      	movs	r3, #1
 800448e:	4642      	mov	r2, r8
 8004490:	e7df      	b.n	8004452 <_printf_float+0x3ee>
 8004492:	2301      	movs	r3, #1
 8004494:	464a      	mov	r2, r9
 8004496:	4631      	mov	r1, r6
 8004498:	4628      	mov	r0, r5
 800449a:	47b8      	blx	r7
 800449c:	3001      	adds	r0, #1
 800449e:	f43f ae3c 	beq.w	800411a <_printf_float+0xb6>
 80044a2:	f108 0801 	add.w	r8, r8, #1
 80044a6:	68e3      	ldr	r3, [r4, #12]
 80044a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80044aa:	1a5b      	subs	r3, r3, r1
 80044ac:	4543      	cmp	r3, r8
 80044ae:	dcf0      	bgt.n	8004492 <_printf_float+0x42e>
 80044b0:	e6fd      	b.n	80042ae <_printf_float+0x24a>
 80044b2:	f04f 0800 	mov.w	r8, #0
 80044b6:	f104 0919 	add.w	r9, r4, #25
 80044ba:	e7f4      	b.n	80044a6 <_printf_float+0x442>

080044bc <_printf_common>:
 80044bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c0:	4616      	mov	r6, r2
 80044c2:	4699      	mov	r9, r3
 80044c4:	688a      	ldr	r2, [r1, #8]
 80044c6:	690b      	ldr	r3, [r1, #16]
 80044c8:	4607      	mov	r7, r0
 80044ca:	4293      	cmp	r3, r2
 80044cc:	bfb8      	it	lt
 80044ce:	4613      	movlt	r3, r2
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044d6:	460c      	mov	r4, r1
 80044d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044dc:	b10a      	cbz	r2, 80044e2 <_printf_common+0x26>
 80044de:	3301      	adds	r3, #1
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	0699      	lsls	r1, r3, #26
 80044e6:	bf42      	ittt	mi
 80044e8:	6833      	ldrmi	r3, [r6, #0]
 80044ea:	3302      	addmi	r3, #2
 80044ec:	6033      	strmi	r3, [r6, #0]
 80044ee:	6825      	ldr	r5, [r4, #0]
 80044f0:	f015 0506 	ands.w	r5, r5, #6
 80044f4:	d106      	bne.n	8004504 <_printf_common+0x48>
 80044f6:	f104 0a19 	add.w	sl, r4, #25
 80044fa:	68e3      	ldr	r3, [r4, #12]
 80044fc:	6832      	ldr	r2, [r6, #0]
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	42ab      	cmp	r3, r5
 8004502:	dc28      	bgt.n	8004556 <_printf_common+0x9a>
 8004504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004508:	1e13      	subs	r3, r2, #0
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	bf18      	it	ne
 800450e:	2301      	movne	r3, #1
 8004510:	0692      	lsls	r2, r2, #26
 8004512:	d42d      	bmi.n	8004570 <_printf_common+0xb4>
 8004514:	4649      	mov	r1, r9
 8004516:	4638      	mov	r0, r7
 8004518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800451c:	47c0      	blx	r8
 800451e:	3001      	adds	r0, #1
 8004520:	d020      	beq.n	8004564 <_printf_common+0xa8>
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	68e5      	ldr	r5, [r4, #12]
 8004526:	f003 0306 	and.w	r3, r3, #6
 800452a:	2b04      	cmp	r3, #4
 800452c:	bf18      	it	ne
 800452e:	2500      	movne	r5, #0
 8004530:	6832      	ldr	r2, [r6, #0]
 8004532:	f04f 0600 	mov.w	r6, #0
 8004536:	68a3      	ldr	r3, [r4, #8]
 8004538:	bf08      	it	eq
 800453a:	1aad      	subeq	r5, r5, r2
 800453c:	6922      	ldr	r2, [r4, #16]
 800453e:	bf08      	it	eq
 8004540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004544:	4293      	cmp	r3, r2
 8004546:	bfc4      	itt	gt
 8004548:	1a9b      	subgt	r3, r3, r2
 800454a:	18ed      	addgt	r5, r5, r3
 800454c:	341a      	adds	r4, #26
 800454e:	42b5      	cmp	r5, r6
 8004550:	d11a      	bne.n	8004588 <_printf_common+0xcc>
 8004552:	2000      	movs	r0, #0
 8004554:	e008      	b.n	8004568 <_printf_common+0xac>
 8004556:	2301      	movs	r3, #1
 8004558:	4652      	mov	r2, sl
 800455a:	4649      	mov	r1, r9
 800455c:	4638      	mov	r0, r7
 800455e:	47c0      	blx	r8
 8004560:	3001      	adds	r0, #1
 8004562:	d103      	bne.n	800456c <_printf_common+0xb0>
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	3501      	adds	r5, #1
 800456e:	e7c4      	b.n	80044fa <_printf_common+0x3e>
 8004570:	2030      	movs	r0, #48	; 0x30
 8004572:	18e1      	adds	r1, r4, r3
 8004574:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800457e:	4422      	add	r2, r4
 8004580:	3302      	adds	r3, #2
 8004582:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004586:	e7c5      	b.n	8004514 <_printf_common+0x58>
 8004588:	2301      	movs	r3, #1
 800458a:	4622      	mov	r2, r4
 800458c:	4649      	mov	r1, r9
 800458e:	4638      	mov	r0, r7
 8004590:	47c0      	blx	r8
 8004592:	3001      	adds	r0, #1
 8004594:	d0e6      	beq.n	8004564 <_printf_common+0xa8>
 8004596:	3601      	adds	r6, #1
 8004598:	e7d9      	b.n	800454e <_printf_common+0x92>
	...

0800459c <_printf_i>:
 800459c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	460c      	mov	r4, r1
 80045a2:	7e27      	ldrb	r7, [r4, #24]
 80045a4:	4691      	mov	r9, r2
 80045a6:	2f78      	cmp	r7, #120	; 0x78
 80045a8:	4680      	mov	r8, r0
 80045aa:	469a      	mov	sl, r3
 80045ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045b2:	d807      	bhi.n	80045c4 <_printf_i+0x28>
 80045b4:	2f62      	cmp	r7, #98	; 0x62
 80045b6:	d80a      	bhi.n	80045ce <_printf_i+0x32>
 80045b8:	2f00      	cmp	r7, #0
 80045ba:	f000 80d9 	beq.w	8004770 <_printf_i+0x1d4>
 80045be:	2f58      	cmp	r7, #88	; 0x58
 80045c0:	f000 80a4 	beq.w	800470c <_printf_i+0x170>
 80045c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045cc:	e03a      	b.n	8004644 <_printf_i+0xa8>
 80045ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045d2:	2b15      	cmp	r3, #21
 80045d4:	d8f6      	bhi.n	80045c4 <_printf_i+0x28>
 80045d6:	a001      	add	r0, pc, #4	; (adr r0, 80045dc <_printf_i+0x40>)
 80045d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045dc:	08004635 	.word	0x08004635
 80045e0:	08004649 	.word	0x08004649
 80045e4:	080045c5 	.word	0x080045c5
 80045e8:	080045c5 	.word	0x080045c5
 80045ec:	080045c5 	.word	0x080045c5
 80045f0:	080045c5 	.word	0x080045c5
 80045f4:	08004649 	.word	0x08004649
 80045f8:	080045c5 	.word	0x080045c5
 80045fc:	080045c5 	.word	0x080045c5
 8004600:	080045c5 	.word	0x080045c5
 8004604:	080045c5 	.word	0x080045c5
 8004608:	08004757 	.word	0x08004757
 800460c:	08004679 	.word	0x08004679
 8004610:	08004739 	.word	0x08004739
 8004614:	080045c5 	.word	0x080045c5
 8004618:	080045c5 	.word	0x080045c5
 800461c:	08004779 	.word	0x08004779
 8004620:	080045c5 	.word	0x080045c5
 8004624:	08004679 	.word	0x08004679
 8004628:	080045c5 	.word	0x080045c5
 800462c:	080045c5 	.word	0x080045c5
 8004630:	08004741 	.word	0x08004741
 8004634:	680b      	ldr	r3, [r1, #0]
 8004636:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800463a:	1d1a      	adds	r2, r3, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	600a      	str	r2, [r1, #0]
 8004640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004644:	2301      	movs	r3, #1
 8004646:	e0a4      	b.n	8004792 <_printf_i+0x1f6>
 8004648:	6825      	ldr	r5, [r4, #0]
 800464a:	6808      	ldr	r0, [r1, #0]
 800464c:	062e      	lsls	r6, r5, #24
 800464e:	f100 0304 	add.w	r3, r0, #4
 8004652:	d50a      	bpl.n	800466a <_printf_i+0xce>
 8004654:	6805      	ldr	r5, [r0, #0]
 8004656:	600b      	str	r3, [r1, #0]
 8004658:	2d00      	cmp	r5, #0
 800465a:	da03      	bge.n	8004664 <_printf_i+0xc8>
 800465c:	232d      	movs	r3, #45	; 0x2d
 800465e:	426d      	negs	r5, r5
 8004660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004664:	230a      	movs	r3, #10
 8004666:	485e      	ldr	r0, [pc, #376]	; (80047e0 <_printf_i+0x244>)
 8004668:	e019      	b.n	800469e <_printf_i+0x102>
 800466a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800466e:	6805      	ldr	r5, [r0, #0]
 8004670:	600b      	str	r3, [r1, #0]
 8004672:	bf18      	it	ne
 8004674:	b22d      	sxthne	r5, r5
 8004676:	e7ef      	b.n	8004658 <_printf_i+0xbc>
 8004678:	680b      	ldr	r3, [r1, #0]
 800467a:	6825      	ldr	r5, [r4, #0]
 800467c:	1d18      	adds	r0, r3, #4
 800467e:	6008      	str	r0, [r1, #0]
 8004680:	0628      	lsls	r0, r5, #24
 8004682:	d501      	bpl.n	8004688 <_printf_i+0xec>
 8004684:	681d      	ldr	r5, [r3, #0]
 8004686:	e002      	b.n	800468e <_printf_i+0xf2>
 8004688:	0669      	lsls	r1, r5, #25
 800468a:	d5fb      	bpl.n	8004684 <_printf_i+0xe8>
 800468c:	881d      	ldrh	r5, [r3, #0]
 800468e:	2f6f      	cmp	r7, #111	; 0x6f
 8004690:	bf0c      	ite	eq
 8004692:	2308      	moveq	r3, #8
 8004694:	230a      	movne	r3, #10
 8004696:	4852      	ldr	r0, [pc, #328]	; (80047e0 <_printf_i+0x244>)
 8004698:	2100      	movs	r1, #0
 800469a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800469e:	6866      	ldr	r6, [r4, #4]
 80046a0:	2e00      	cmp	r6, #0
 80046a2:	bfa8      	it	ge
 80046a4:	6821      	ldrge	r1, [r4, #0]
 80046a6:	60a6      	str	r6, [r4, #8]
 80046a8:	bfa4      	itt	ge
 80046aa:	f021 0104 	bicge.w	r1, r1, #4
 80046ae:	6021      	strge	r1, [r4, #0]
 80046b0:	b90d      	cbnz	r5, 80046b6 <_printf_i+0x11a>
 80046b2:	2e00      	cmp	r6, #0
 80046b4:	d04d      	beq.n	8004752 <_printf_i+0x1b6>
 80046b6:	4616      	mov	r6, r2
 80046b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80046bc:	fb03 5711 	mls	r7, r3, r1, r5
 80046c0:	5dc7      	ldrb	r7, [r0, r7]
 80046c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046c6:	462f      	mov	r7, r5
 80046c8:	42bb      	cmp	r3, r7
 80046ca:	460d      	mov	r5, r1
 80046cc:	d9f4      	bls.n	80046b8 <_printf_i+0x11c>
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d10b      	bne.n	80046ea <_printf_i+0x14e>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	07df      	lsls	r7, r3, #31
 80046d6:	d508      	bpl.n	80046ea <_printf_i+0x14e>
 80046d8:	6923      	ldr	r3, [r4, #16]
 80046da:	6861      	ldr	r1, [r4, #4]
 80046dc:	4299      	cmp	r1, r3
 80046de:	bfde      	ittt	le
 80046e0:	2330      	movle	r3, #48	; 0x30
 80046e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046ea:	1b92      	subs	r2, r2, r6
 80046ec:	6122      	str	r2, [r4, #16]
 80046ee:	464b      	mov	r3, r9
 80046f0:	4621      	mov	r1, r4
 80046f2:	4640      	mov	r0, r8
 80046f4:	f8cd a000 	str.w	sl, [sp]
 80046f8:	aa03      	add	r2, sp, #12
 80046fa:	f7ff fedf 	bl	80044bc <_printf_common>
 80046fe:	3001      	adds	r0, #1
 8004700:	d14c      	bne.n	800479c <_printf_i+0x200>
 8004702:	f04f 30ff 	mov.w	r0, #4294967295
 8004706:	b004      	add	sp, #16
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470c:	4834      	ldr	r0, [pc, #208]	; (80047e0 <_printf_i+0x244>)
 800470e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004712:	680e      	ldr	r6, [r1, #0]
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	f856 5b04 	ldr.w	r5, [r6], #4
 800471a:	061f      	lsls	r7, r3, #24
 800471c:	600e      	str	r6, [r1, #0]
 800471e:	d514      	bpl.n	800474a <_printf_i+0x1ae>
 8004720:	07d9      	lsls	r1, r3, #31
 8004722:	bf44      	itt	mi
 8004724:	f043 0320 	orrmi.w	r3, r3, #32
 8004728:	6023      	strmi	r3, [r4, #0]
 800472a:	b91d      	cbnz	r5, 8004734 <_printf_i+0x198>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	f023 0320 	bic.w	r3, r3, #32
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	2310      	movs	r3, #16
 8004736:	e7af      	b.n	8004698 <_printf_i+0xfc>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	f043 0320 	orr.w	r3, r3, #32
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	2378      	movs	r3, #120	; 0x78
 8004742:	4828      	ldr	r0, [pc, #160]	; (80047e4 <_printf_i+0x248>)
 8004744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004748:	e7e3      	b.n	8004712 <_printf_i+0x176>
 800474a:	065e      	lsls	r6, r3, #25
 800474c:	bf48      	it	mi
 800474e:	b2ad      	uxthmi	r5, r5
 8004750:	e7e6      	b.n	8004720 <_printf_i+0x184>
 8004752:	4616      	mov	r6, r2
 8004754:	e7bb      	b.n	80046ce <_printf_i+0x132>
 8004756:	680b      	ldr	r3, [r1, #0]
 8004758:	6826      	ldr	r6, [r4, #0]
 800475a:	1d1d      	adds	r5, r3, #4
 800475c:	6960      	ldr	r0, [r4, #20]
 800475e:	600d      	str	r5, [r1, #0]
 8004760:	0635      	lsls	r5, r6, #24
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	d501      	bpl.n	800476a <_printf_i+0x1ce>
 8004766:	6018      	str	r0, [r3, #0]
 8004768:	e002      	b.n	8004770 <_printf_i+0x1d4>
 800476a:	0671      	lsls	r1, r6, #25
 800476c:	d5fb      	bpl.n	8004766 <_printf_i+0x1ca>
 800476e:	8018      	strh	r0, [r3, #0]
 8004770:	2300      	movs	r3, #0
 8004772:	4616      	mov	r6, r2
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	e7ba      	b.n	80046ee <_printf_i+0x152>
 8004778:	680b      	ldr	r3, [r1, #0]
 800477a:	1d1a      	adds	r2, r3, #4
 800477c:	600a      	str	r2, [r1, #0]
 800477e:	681e      	ldr	r6, [r3, #0]
 8004780:	2100      	movs	r1, #0
 8004782:	4630      	mov	r0, r6
 8004784:	6862      	ldr	r2, [r4, #4]
 8004786:	f002 fb4d 	bl	8006e24 <memchr>
 800478a:	b108      	cbz	r0, 8004790 <_printf_i+0x1f4>
 800478c:	1b80      	subs	r0, r0, r6
 800478e:	6060      	str	r0, [r4, #4]
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	6123      	str	r3, [r4, #16]
 8004794:	2300      	movs	r3, #0
 8004796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800479a:	e7a8      	b.n	80046ee <_printf_i+0x152>
 800479c:	4632      	mov	r2, r6
 800479e:	4649      	mov	r1, r9
 80047a0:	4640      	mov	r0, r8
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	47d0      	blx	sl
 80047a6:	3001      	adds	r0, #1
 80047a8:	d0ab      	beq.n	8004702 <_printf_i+0x166>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	079b      	lsls	r3, r3, #30
 80047ae:	d413      	bmi.n	80047d8 <_printf_i+0x23c>
 80047b0:	68e0      	ldr	r0, [r4, #12]
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	4298      	cmp	r0, r3
 80047b6:	bfb8      	it	lt
 80047b8:	4618      	movlt	r0, r3
 80047ba:	e7a4      	b.n	8004706 <_printf_i+0x16a>
 80047bc:	2301      	movs	r3, #1
 80047be:	4632      	mov	r2, r6
 80047c0:	4649      	mov	r1, r9
 80047c2:	4640      	mov	r0, r8
 80047c4:	47d0      	blx	sl
 80047c6:	3001      	adds	r0, #1
 80047c8:	d09b      	beq.n	8004702 <_printf_i+0x166>
 80047ca:	3501      	adds	r5, #1
 80047cc:	68e3      	ldr	r3, [r4, #12]
 80047ce:	9903      	ldr	r1, [sp, #12]
 80047d0:	1a5b      	subs	r3, r3, r1
 80047d2:	42ab      	cmp	r3, r5
 80047d4:	dcf2      	bgt.n	80047bc <_printf_i+0x220>
 80047d6:	e7eb      	b.n	80047b0 <_printf_i+0x214>
 80047d8:	2500      	movs	r5, #0
 80047da:	f104 0619 	add.w	r6, r4, #25
 80047de:	e7f5      	b.n	80047cc <_printf_i+0x230>
 80047e0:	08008fc6 	.word	0x08008fc6
 80047e4:	08008fd7 	.word	0x08008fd7

080047e8 <_scanf_float>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	b087      	sub	sp, #28
 80047ee:	9303      	str	r3, [sp, #12]
 80047f0:	688b      	ldr	r3, [r1, #8]
 80047f2:	4617      	mov	r7, r2
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80047fa:	bf85      	ittet	hi
 80047fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004800:	195b      	addhi	r3, r3, r5
 8004802:	2300      	movls	r3, #0
 8004804:	9302      	strhi	r3, [sp, #8]
 8004806:	bf88      	it	hi
 8004808:	f240 135d 	movwhi	r3, #349	; 0x15d
 800480c:	468b      	mov	fp, r1
 800480e:	f04f 0500 	mov.w	r5, #0
 8004812:	bf8c      	ite	hi
 8004814:	608b      	strhi	r3, [r1, #8]
 8004816:	9302      	strls	r3, [sp, #8]
 8004818:	680b      	ldr	r3, [r1, #0]
 800481a:	4680      	mov	r8, r0
 800481c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004820:	f84b 3b1c 	str.w	r3, [fp], #28
 8004824:	460c      	mov	r4, r1
 8004826:	465e      	mov	r6, fp
 8004828:	46aa      	mov	sl, r5
 800482a:	46a9      	mov	r9, r5
 800482c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004830:	9501      	str	r5, [sp, #4]
 8004832:	68a2      	ldr	r2, [r4, #8]
 8004834:	b152      	cbz	r2, 800484c <_scanf_float+0x64>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b4e      	cmp	r3, #78	; 0x4e
 800483c:	d864      	bhi.n	8004908 <_scanf_float+0x120>
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d83c      	bhi.n	80048bc <_scanf_float+0xd4>
 8004842:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004846:	b2c8      	uxtb	r0, r1
 8004848:	280e      	cmp	r0, #14
 800484a:	d93a      	bls.n	80048c2 <_scanf_float+0xda>
 800484c:	f1b9 0f00 	cmp.w	r9, #0
 8004850:	d003      	beq.n	800485a <_scanf_float+0x72>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800485e:	f1ba 0f01 	cmp.w	sl, #1
 8004862:	f200 8113 	bhi.w	8004a8c <_scanf_float+0x2a4>
 8004866:	455e      	cmp	r6, fp
 8004868:	f200 8105 	bhi.w	8004a76 <_scanf_float+0x28e>
 800486c:	2501      	movs	r5, #1
 800486e:	4628      	mov	r0, r5
 8004870:	b007      	add	sp, #28
 8004872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004876:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800487a:	2a0d      	cmp	r2, #13
 800487c:	d8e6      	bhi.n	800484c <_scanf_float+0x64>
 800487e:	a101      	add	r1, pc, #4	; (adr r1, 8004884 <_scanf_float+0x9c>)
 8004880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004884:	080049c3 	.word	0x080049c3
 8004888:	0800484d 	.word	0x0800484d
 800488c:	0800484d 	.word	0x0800484d
 8004890:	0800484d 	.word	0x0800484d
 8004894:	08004a23 	.word	0x08004a23
 8004898:	080049fb 	.word	0x080049fb
 800489c:	0800484d 	.word	0x0800484d
 80048a0:	0800484d 	.word	0x0800484d
 80048a4:	080049d1 	.word	0x080049d1
 80048a8:	0800484d 	.word	0x0800484d
 80048ac:	0800484d 	.word	0x0800484d
 80048b0:	0800484d 	.word	0x0800484d
 80048b4:	0800484d 	.word	0x0800484d
 80048b8:	08004989 	.word	0x08004989
 80048bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80048c0:	e7db      	b.n	800487a <_scanf_float+0x92>
 80048c2:	290e      	cmp	r1, #14
 80048c4:	d8c2      	bhi.n	800484c <_scanf_float+0x64>
 80048c6:	a001      	add	r0, pc, #4	; (adr r0, 80048cc <_scanf_float+0xe4>)
 80048c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80048cc:	0800497b 	.word	0x0800497b
 80048d0:	0800484d 	.word	0x0800484d
 80048d4:	0800497b 	.word	0x0800497b
 80048d8:	08004a0f 	.word	0x08004a0f
 80048dc:	0800484d 	.word	0x0800484d
 80048e0:	08004929 	.word	0x08004929
 80048e4:	08004965 	.word	0x08004965
 80048e8:	08004965 	.word	0x08004965
 80048ec:	08004965 	.word	0x08004965
 80048f0:	08004965 	.word	0x08004965
 80048f4:	08004965 	.word	0x08004965
 80048f8:	08004965 	.word	0x08004965
 80048fc:	08004965 	.word	0x08004965
 8004900:	08004965 	.word	0x08004965
 8004904:	08004965 	.word	0x08004965
 8004908:	2b6e      	cmp	r3, #110	; 0x6e
 800490a:	d809      	bhi.n	8004920 <_scanf_float+0x138>
 800490c:	2b60      	cmp	r3, #96	; 0x60
 800490e:	d8b2      	bhi.n	8004876 <_scanf_float+0x8e>
 8004910:	2b54      	cmp	r3, #84	; 0x54
 8004912:	d077      	beq.n	8004a04 <_scanf_float+0x21c>
 8004914:	2b59      	cmp	r3, #89	; 0x59
 8004916:	d199      	bne.n	800484c <_scanf_float+0x64>
 8004918:	2d07      	cmp	r5, #7
 800491a:	d197      	bne.n	800484c <_scanf_float+0x64>
 800491c:	2508      	movs	r5, #8
 800491e:	e029      	b.n	8004974 <_scanf_float+0x18c>
 8004920:	2b74      	cmp	r3, #116	; 0x74
 8004922:	d06f      	beq.n	8004a04 <_scanf_float+0x21c>
 8004924:	2b79      	cmp	r3, #121	; 0x79
 8004926:	e7f6      	b.n	8004916 <_scanf_float+0x12e>
 8004928:	6821      	ldr	r1, [r4, #0]
 800492a:	05c8      	lsls	r0, r1, #23
 800492c:	d51a      	bpl.n	8004964 <_scanf_float+0x17c>
 800492e:	9b02      	ldr	r3, [sp, #8]
 8004930:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004934:	6021      	str	r1, [r4, #0]
 8004936:	f109 0901 	add.w	r9, r9, #1
 800493a:	b11b      	cbz	r3, 8004944 <_scanf_float+0x15c>
 800493c:	3b01      	subs	r3, #1
 800493e:	3201      	adds	r2, #1
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	60a2      	str	r2, [r4, #8]
 8004944:	68a3      	ldr	r3, [r4, #8]
 8004946:	3b01      	subs	r3, #1
 8004948:	60a3      	str	r3, [r4, #8]
 800494a:	6923      	ldr	r3, [r4, #16]
 800494c:	3301      	adds	r3, #1
 800494e:	6123      	str	r3, [r4, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3b01      	subs	r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	f340 8084 	ble.w	8004a64 <_scanf_float+0x27c>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	e766      	b.n	8004832 <_scanf_float+0x4a>
 8004964:	eb1a 0f05 	cmn.w	sl, r5
 8004968:	f47f af70 	bne.w	800484c <_scanf_float+0x64>
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004972:	6022      	str	r2, [r4, #0]
 8004974:	f806 3b01 	strb.w	r3, [r6], #1
 8004978:	e7e4      	b.n	8004944 <_scanf_float+0x15c>
 800497a:	6822      	ldr	r2, [r4, #0]
 800497c:	0610      	lsls	r0, r2, #24
 800497e:	f57f af65 	bpl.w	800484c <_scanf_float+0x64>
 8004982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004986:	e7f4      	b.n	8004972 <_scanf_float+0x18a>
 8004988:	f1ba 0f00 	cmp.w	sl, #0
 800498c:	d10e      	bne.n	80049ac <_scanf_float+0x1c4>
 800498e:	f1b9 0f00 	cmp.w	r9, #0
 8004992:	d10e      	bne.n	80049b2 <_scanf_float+0x1ca>
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800499a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800499e:	d108      	bne.n	80049b2 <_scanf_float+0x1ca>
 80049a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049a4:	f04f 0a01 	mov.w	sl, #1
 80049a8:	6022      	str	r2, [r4, #0]
 80049aa:	e7e3      	b.n	8004974 <_scanf_float+0x18c>
 80049ac:	f1ba 0f02 	cmp.w	sl, #2
 80049b0:	d055      	beq.n	8004a5e <_scanf_float+0x276>
 80049b2:	2d01      	cmp	r5, #1
 80049b4:	d002      	beq.n	80049bc <_scanf_float+0x1d4>
 80049b6:	2d04      	cmp	r5, #4
 80049b8:	f47f af48 	bne.w	800484c <_scanf_float+0x64>
 80049bc:	3501      	adds	r5, #1
 80049be:	b2ed      	uxtb	r5, r5
 80049c0:	e7d8      	b.n	8004974 <_scanf_float+0x18c>
 80049c2:	f1ba 0f01 	cmp.w	sl, #1
 80049c6:	f47f af41 	bne.w	800484c <_scanf_float+0x64>
 80049ca:	f04f 0a02 	mov.w	sl, #2
 80049ce:	e7d1      	b.n	8004974 <_scanf_float+0x18c>
 80049d0:	b97d      	cbnz	r5, 80049f2 <_scanf_float+0x20a>
 80049d2:	f1b9 0f00 	cmp.w	r9, #0
 80049d6:	f47f af3c 	bne.w	8004852 <_scanf_float+0x6a>
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80049e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80049e4:	f47f af39 	bne.w	800485a <_scanf_float+0x72>
 80049e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049ec:	2501      	movs	r5, #1
 80049ee:	6022      	str	r2, [r4, #0]
 80049f0:	e7c0      	b.n	8004974 <_scanf_float+0x18c>
 80049f2:	2d03      	cmp	r5, #3
 80049f4:	d0e2      	beq.n	80049bc <_scanf_float+0x1d4>
 80049f6:	2d05      	cmp	r5, #5
 80049f8:	e7de      	b.n	80049b8 <_scanf_float+0x1d0>
 80049fa:	2d02      	cmp	r5, #2
 80049fc:	f47f af26 	bne.w	800484c <_scanf_float+0x64>
 8004a00:	2503      	movs	r5, #3
 8004a02:	e7b7      	b.n	8004974 <_scanf_float+0x18c>
 8004a04:	2d06      	cmp	r5, #6
 8004a06:	f47f af21 	bne.w	800484c <_scanf_float+0x64>
 8004a0a:	2507      	movs	r5, #7
 8004a0c:	e7b2      	b.n	8004974 <_scanf_float+0x18c>
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	0591      	lsls	r1, r2, #22
 8004a12:	f57f af1b 	bpl.w	800484c <_scanf_float+0x64>
 8004a16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004a1a:	6022      	str	r2, [r4, #0]
 8004a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a20:	e7a8      	b.n	8004974 <_scanf_float+0x18c>
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004a28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004a2c:	d006      	beq.n	8004a3c <_scanf_float+0x254>
 8004a2e:	0550      	lsls	r0, r2, #21
 8004a30:	f57f af0c 	bpl.w	800484c <_scanf_float+0x64>
 8004a34:	f1b9 0f00 	cmp.w	r9, #0
 8004a38:	f43f af0f 	beq.w	800485a <_scanf_float+0x72>
 8004a3c:	0591      	lsls	r1, r2, #22
 8004a3e:	bf58      	it	pl
 8004a40:	9901      	ldrpl	r1, [sp, #4]
 8004a42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a46:	bf58      	it	pl
 8004a48:	eba9 0101 	subpl.w	r1, r9, r1
 8004a4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004a50:	f04f 0900 	mov.w	r9, #0
 8004a54:	bf58      	it	pl
 8004a56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004a5a:	6022      	str	r2, [r4, #0]
 8004a5c:	e78a      	b.n	8004974 <_scanf_float+0x18c>
 8004a5e:	f04f 0a03 	mov.w	sl, #3
 8004a62:	e787      	b.n	8004974 <_scanf_float+0x18c>
 8004a64:	4639      	mov	r1, r7
 8004a66:	4640      	mov	r0, r8
 8004a68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a6c:	4798      	blx	r3
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	f43f aedf 	beq.w	8004832 <_scanf_float+0x4a>
 8004a74:	e6ea      	b.n	800484c <_scanf_float+0x64>
 8004a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a7a:	463a      	mov	r2, r7
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a82:	4798      	blx	r3
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	e6ec      	b.n	8004866 <_scanf_float+0x7e>
 8004a8c:	1e6b      	subs	r3, r5, #1
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d825      	bhi.n	8004ade <_scanf_float+0x2f6>
 8004a92:	2d02      	cmp	r5, #2
 8004a94:	d836      	bhi.n	8004b04 <_scanf_float+0x31c>
 8004a96:	455e      	cmp	r6, fp
 8004a98:	f67f aee8 	bls.w	800486c <_scanf_float+0x84>
 8004a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aa0:	463a      	mov	r2, r7
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004aa8:	4798      	blx	r3
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	e7f1      	b.n	8004a96 <_scanf_float+0x2ae>
 8004ab2:	9802      	ldr	r0, [sp, #8]
 8004ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ab8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004abc:	463a      	mov	r2, r7
 8004abe:	9002      	str	r0, [sp, #8]
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	4798      	blx	r3
 8004ac4:	6923      	ldr	r3, [r4, #16]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	6123      	str	r3, [r4, #16]
 8004aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ace:	fa5f fa8a 	uxtb.w	sl, sl
 8004ad2:	f1ba 0f02 	cmp.w	sl, #2
 8004ad6:	d1ec      	bne.n	8004ab2 <_scanf_float+0x2ca>
 8004ad8:	3d03      	subs	r5, #3
 8004ada:	b2ed      	uxtb	r5, r5
 8004adc:	1b76      	subs	r6, r6, r5
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	05da      	lsls	r2, r3, #23
 8004ae2:	d52f      	bpl.n	8004b44 <_scanf_float+0x35c>
 8004ae4:	055b      	lsls	r3, r3, #21
 8004ae6:	d510      	bpl.n	8004b0a <_scanf_float+0x322>
 8004ae8:	455e      	cmp	r6, fp
 8004aea:	f67f aebf 	bls.w	800486c <_scanf_float+0x84>
 8004aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004af2:	463a      	mov	r2, r7
 8004af4:	4640      	mov	r0, r8
 8004af6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004afa:	4798      	blx	r3
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	6123      	str	r3, [r4, #16]
 8004b02:	e7f1      	b.n	8004ae8 <_scanf_float+0x300>
 8004b04:	46aa      	mov	sl, r5
 8004b06:	9602      	str	r6, [sp, #8]
 8004b08:	e7df      	b.n	8004aca <_scanf_float+0x2e2>
 8004b0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004b0e:	6923      	ldr	r3, [r4, #16]
 8004b10:	2965      	cmp	r1, #101	; 0x65
 8004b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b16:	f106 35ff 	add.w	r5, r6, #4294967295
 8004b1a:	6123      	str	r3, [r4, #16]
 8004b1c:	d00c      	beq.n	8004b38 <_scanf_float+0x350>
 8004b1e:	2945      	cmp	r1, #69	; 0x45
 8004b20:	d00a      	beq.n	8004b38 <_scanf_float+0x350>
 8004b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b26:	463a      	mov	r2, r7
 8004b28:	4640      	mov	r0, r8
 8004b2a:	4798      	blx	r3
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	1eb5      	subs	r5, r6, #2
 8004b36:	6123      	str	r3, [r4, #16]
 8004b38:	463a      	mov	r2, r7
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b40:	4798      	blx	r3
 8004b42:	462e      	mov	r6, r5
 8004b44:	6825      	ldr	r5, [r4, #0]
 8004b46:	f015 0510 	ands.w	r5, r5, #16
 8004b4a:	d159      	bne.n	8004c00 <_scanf_float+0x418>
 8004b4c:	7035      	strb	r5, [r6, #0]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d11c      	bne.n	8004b94 <_scanf_float+0x3ac>
 8004b5a:	9b01      	ldr	r3, [sp, #4]
 8004b5c:	454b      	cmp	r3, r9
 8004b5e:	eba3 0209 	sub.w	r2, r3, r9
 8004b62:	d124      	bne.n	8004bae <_scanf_float+0x3c6>
 8004b64:	2200      	movs	r2, #0
 8004b66:	4659      	mov	r1, fp
 8004b68:	4640      	mov	r0, r8
 8004b6a:	f000 fe89 	bl	8005880 <_strtod_r>
 8004b6e:	f8d4 c000 	ldr.w	ip, [r4]
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	f01c 0f02 	tst.w	ip, #2
 8004b78:	4606      	mov	r6, r0
 8004b7a:	460f      	mov	r7, r1
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	d021      	beq.n	8004bc4 <_scanf_float+0x3dc>
 8004b80:	9903      	ldr	r1, [sp, #12]
 8004b82:	1d1a      	adds	r2, r3, #4
 8004b84:	600a      	str	r2, [r1, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	e9c3 6700 	strd	r6, r7, [r3]
 8004b8c:	68e3      	ldr	r3, [r4, #12]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	60e3      	str	r3, [r4, #12]
 8004b92:	e66c      	b.n	800486e <_scanf_float+0x86>
 8004b94:	9b04      	ldr	r3, [sp, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0e4      	beq.n	8004b64 <_scanf_float+0x37c>
 8004b9a:	9905      	ldr	r1, [sp, #20]
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	3101      	adds	r1, #1
 8004ba4:	f000 fef8 	bl	8005998 <_strtol_r>
 8004ba8:	9b04      	ldr	r3, [sp, #16]
 8004baa:	9e05      	ldr	r6, [sp, #20]
 8004bac:	1ac2      	subs	r2, r0, r3
 8004bae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004bb2:	429e      	cmp	r6, r3
 8004bb4:	bf28      	it	cs
 8004bb6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004bba:	4630      	mov	r0, r6
 8004bbc:	4911      	ldr	r1, [pc, #68]	; (8004c04 <_scanf_float+0x41c>)
 8004bbe:	f000 f829 	bl	8004c14 <siprintf>
 8004bc2:	e7cf      	b.n	8004b64 <_scanf_float+0x37c>
 8004bc4:	f01c 0f04 	tst.w	ip, #4
 8004bc8:	f103 0e04 	add.w	lr, r3, #4
 8004bcc:	d003      	beq.n	8004bd6 <_scanf_float+0x3ee>
 8004bce:	9903      	ldr	r1, [sp, #12]
 8004bd0:	f8c1 e000 	str.w	lr, [r1]
 8004bd4:	e7d7      	b.n	8004b86 <_scanf_float+0x39e>
 8004bd6:	9a03      	ldr	r2, [sp, #12]
 8004bd8:	f8c2 e000 	str.w	lr, [r2]
 8004bdc:	f8d3 8000 	ldr.w	r8, [r3]
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	f7fb ff12 	bl	8000a0c <__aeabi_dcmpun>
 8004be8:	b128      	cbz	r0, 8004bf6 <_scanf_float+0x40e>
 8004bea:	4807      	ldr	r0, [pc, #28]	; (8004c08 <_scanf_float+0x420>)
 8004bec:	f000 f80e 	bl	8004c0c <nanf>
 8004bf0:	f8c8 0000 	str.w	r0, [r8]
 8004bf4:	e7ca      	b.n	8004b8c <_scanf_float+0x3a4>
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	4639      	mov	r1, r7
 8004bfa:	f7fb ff65 	bl	8000ac8 <__aeabi_d2f>
 8004bfe:	e7f7      	b.n	8004bf0 <_scanf_float+0x408>
 8004c00:	2500      	movs	r5, #0
 8004c02:	e634      	b.n	800486e <_scanf_float+0x86>
 8004c04:	08008fe8 	.word	0x08008fe8
 8004c08:	08009420 	.word	0x08009420

08004c0c <nanf>:
 8004c0c:	4800      	ldr	r0, [pc, #0]	; (8004c10 <nanf+0x4>)
 8004c0e:	4770      	bx	lr
 8004c10:	7fc00000 	.word	0x7fc00000

08004c14 <siprintf>:
 8004c14:	b40e      	push	{r1, r2, r3}
 8004c16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c1a:	b500      	push	{lr}
 8004c1c:	b09c      	sub	sp, #112	; 0x70
 8004c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	9006      	str	r0, [sp, #24]
 8004c24:	9107      	str	r1, [sp, #28]
 8004c26:	9104      	str	r1, [sp, #16]
 8004c28:	4808      	ldr	r0, [pc, #32]	; (8004c4c <siprintf+0x38>)
 8004c2a:	4909      	ldr	r1, [pc, #36]	; (8004c50 <siprintf+0x3c>)
 8004c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c30:	9105      	str	r1, [sp, #20]
 8004c32:	6800      	ldr	r0, [r0, #0]
 8004c34:	a902      	add	r1, sp, #8
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	f002 fed8 	bl	80079ec <_svfiprintf_r>
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	9b02      	ldr	r3, [sp, #8]
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	b01c      	add	sp, #112	; 0x70
 8004c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c48:	b003      	add	sp, #12
 8004c4a:	4770      	bx	lr
 8004c4c:	20000014 	.word	0x20000014
 8004c50:	ffff0208 	.word	0xffff0208

08004c54 <sulp>:
 8004c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c58:	460f      	mov	r7, r1
 8004c5a:	4690      	mov	r8, r2
 8004c5c:	f002 fc6e 	bl	800753c <__ulp>
 8004c60:	4604      	mov	r4, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	f1b8 0f00 	cmp.w	r8, #0
 8004c68:	d011      	beq.n	8004c8e <sulp+0x3a>
 8004c6a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004c6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	dd0b      	ble.n	8004c8e <sulp+0x3a>
 8004c76:	2400      	movs	r4, #0
 8004c78:	051b      	lsls	r3, r3, #20
 8004c7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c82:	4622      	mov	r2, r4
 8004c84:	462b      	mov	r3, r5
 8004c86:	f7fb fc27 	bl	80004d8 <__aeabi_dmul>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
 8004c8e:	4620      	mov	r0, r4
 8004c90:	4629      	mov	r1, r5
 8004c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004c98 <_strtod_l>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	469b      	mov	fp, r3
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	b0a1      	sub	sp, #132	; 0x84
 8004ca2:	931c      	str	r3, [sp, #112]	; 0x70
 8004ca4:	4ba1      	ldr	r3, [pc, #644]	; (8004f2c <_strtod_l+0x294>)
 8004ca6:	4682      	mov	sl, r0
 8004ca8:	681f      	ldr	r7, [r3, #0]
 8004caa:	460e      	mov	r6, r1
 8004cac:	4638      	mov	r0, r7
 8004cae:	9217      	str	r2, [sp, #92]	; 0x5c
 8004cb0:	f7fb fa4e 	bl	8000150 <strlen>
 8004cb4:	f04f 0800 	mov.w	r8, #0
 8004cb8:	4604      	mov	r4, r0
 8004cba:	f04f 0900 	mov.w	r9, #0
 8004cbe:	961b      	str	r6, [sp, #108]	; 0x6c
 8004cc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cc2:	781a      	ldrb	r2, [r3, #0]
 8004cc4:	2a2b      	cmp	r2, #43	; 0x2b
 8004cc6:	d04c      	beq.n	8004d62 <_strtod_l+0xca>
 8004cc8:	d83a      	bhi.n	8004d40 <_strtod_l+0xa8>
 8004cca:	2a0d      	cmp	r2, #13
 8004ccc:	d833      	bhi.n	8004d36 <_strtod_l+0x9e>
 8004cce:	2a08      	cmp	r2, #8
 8004cd0:	d833      	bhi.n	8004d3a <_strtod_l+0xa2>
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	d03d      	beq.n	8004d52 <_strtod_l+0xba>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	930c      	str	r3, [sp, #48]	; 0x30
 8004cda:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004cdc:	782b      	ldrb	r3, [r5, #0]
 8004cde:	2b30      	cmp	r3, #48	; 0x30
 8004ce0:	f040 80af 	bne.w	8004e42 <_strtod_l+0x1aa>
 8004ce4:	786b      	ldrb	r3, [r5, #1]
 8004ce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004cea:	2b58      	cmp	r3, #88	; 0x58
 8004cec:	d16c      	bne.n	8004dc8 <_strtod_l+0x130>
 8004cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cf0:	4650      	mov	r0, sl
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	ab1c      	add	r3, sp, #112	; 0x70
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4a8d      	ldr	r2, [pc, #564]	; (8004f30 <_strtod_l+0x298>)
 8004cfa:	f8cd b008 	str.w	fp, [sp, #8]
 8004cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8004d00:	a91b      	add	r1, sp, #108	; 0x6c
 8004d02:	f001 fd73 	bl	80067ec <__gethex>
 8004d06:	f010 0607 	ands.w	r6, r0, #7
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	d005      	beq.n	8004d1a <_strtod_l+0x82>
 8004d0e:	2e06      	cmp	r6, #6
 8004d10:	d129      	bne.n	8004d66 <_strtod_l+0xce>
 8004d12:	2300      	movs	r3, #0
 8004d14:	3501      	adds	r5, #1
 8004d16:	951b      	str	r5, [sp, #108]	; 0x6c
 8004d18:	930c      	str	r3, [sp, #48]	; 0x30
 8004d1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f040 8596 	bne.w	800584e <_strtod_l+0xbb6>
 8004d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d24:	b1d3      	cbz	r3, 8004d5c <_strtod_l+0xc4>
 8004d26:	4642      	mov	r2, r8
 8004d28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	b021      	add	sp, #132	; 0x84
 8004d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d36:	2a20      	cmp	r2, #32
 8004d38:	d1cd      	bne.n	8004cd6 <_strtod_l+0x3e>
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d3e:	e7bf      	b.n	8004cc0 <_strtod_l+0x28>
 8004d40:	2a2d      	cmp	r2, #45	; 0x2d
 8004d42:	d1c8      	bne.n	8004cd6 <_strtod_l+0x3e>
 8004d44:	2201      	movs	r2, #1
 8004d46:	920c      	str	r2, [sp, #48]	; 0x30
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8004d4c:	785b      	ldrb	r3, [r3, #1]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1c3      	bne.n	8004cda <_strtod_l+0x42>
 8004d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d54:	961b      	str	r6, [sp, #108]	; 0x6c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 8577 	bne.w	800584a <_strtod_l+0xbb2>
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	e7e4      	b.n	8004d2c <_strtod_l+0x94>
 8004d62:	2200      	movs	r2, #0
 8004d64:	e7ef      	b.n	8004d46 <_strtod_l+0xae>
 8004d66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004d68:	b13a      	cbz	r2, 8004d7a <_strtod_l+0xe2>
 8004d6a:	2135      	movs	r1, #53	; 0x35
 8004d6c:	a81e      	add	r0, sp, #120	; 0x78
 8004d6e:	f002 fce9 	bl	8007744 <__copybits>
 8004d72:	4650      	mov	r0, sl
 8004d74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d76:	f002 f8b1 	bl	8006edc <_Bfree>
 8004d7a:	3e01      	subs	r6, #1
 8004d7c:	2e05      	cmp	r6, #5
 8004d7e:	d807      	bhi.n	8004d90 <_strtod_l+0xf8>
 8004d80:	e8df f006 	tbb	[pc, r6]
 8004d84:	1d180b0e 	.word	0x1d180b0e
 8004d88:	030e      	.short	0x030e
 8004d8a:	f04f 0900 	mov.w	r9, #0
 8004d8e:	46c8      	mov	r8, r9
 8004d90:	0721      	lsls	r1, r4, #28
 8004d92:	d5c2      	bpl.n	8004d1a <_strtod_l+0x82>
 8004d94:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004d98:	e7bf      	b.n	8004d1a <_strtod_l+0x82>
 8004d9a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8004d9e:	e7f7      	b.n	8004d90 <_strtod_l+0xf8>
 8004da0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004da2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004da6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004daa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004dae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004db2:	e7ed      	b.n	8004d90 <_strtod_l+0xf8>
 8004db4:	f04f 0800 	mov.w	r8, #0
 8004db8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004f34 <_strtod_l+0x29c>
 8004dbc:	e7e8      	b.n	8004d90 <_strtod_l+0xf8>
 8004dbe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004dc2:	f04f 38ff 	mov.w	r8, #4294967295
 8004dc6:	e7e3      	b.n	8004d90 <_strtod_l+0xf8>
 8004dc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	921b      	str	r2, [sp, #108]	; 0x6c
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	2b30      	cmp	r3, #48	; 0x30
 8004dd2:	d0f9      	beq.n	8004dc8 <_strtod_l+0x130>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0a0      	beq.n	8004d1a <_strtod_l+0x82>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	9307      	str	r3, [sp, #28]
 8004ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dde:	220a      	movs	r2, #10
 8004de0:	9308      	str	r3, [sp, #32]
 8004de2:	2300      	movs	r3, #0
 8004de4:	469b      	mov	fp, r3
 8004de6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004dea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004dec:	7805      	ldrb	r5, [r0, #0]
 8004dee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004df2:	b2d9      	uxtb	r1, r3
 8004df4:	2909      	cmp	r1, #9
 8004df6:	d926      	bls.n	8004e46 <_strtod_l+0x1ae>
 8004df8:	4622      	mov	r2, r4
 8004dfa:	4639      	mov	r1, r7
 8004dfc:	f002 ff0c 	bl	8007c18 <strncmp>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d032      	beq.n	8004e6a <_strtod_l+0x1d2>
 8004e04:	2000      	movs	r0, #0
 8004e06:	462b      	mov	r3, r5
 8004e08:	465c      	mov	r4, fp
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	9004      	str	r0, [sp, #16]
 8004e0e:	2b65      	cmp	r3, #101	; 0x65
 8004e10:	d001      	beq.n	8004e16 <_strtod_l+0x17e>
 8004e12:	2b45      	cmp	r3, #69	; 0x45
 8004e14:	d113      	bne.n	8004e3e <_strtod_l+0x1a6>
 8004e16:	b91c      	cbnz	r4, 8004e20 <_strtod_l+0x188>
 8004e18:	9b07      	ldr	r3, [sp, #28]
 8004e1a:	4303      	orrs	r3, r0
 8004e1c:	d099      	beq.n	8004d52 <_strtod_l+0xba>
 8004e1e:	2400      	movs	r4, #0
 8004e20:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004e22:	1c73      	adds	r3, r6, #1
 8004e24:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e26:	7873      	ldrb	r3, [r6, #1]
 8004e28:	2b2b      	cmp	r3, #43	; 0x2b
 8004e2a:	d078      	beq.n	8004f1e <_strtod_l+0x286>
 8004e2c:	2b2d      	cmp	r3, #45	; 0x2d
 8004e2e:	d07b      	beq.n	8004f28 <_strtod_l+0x290>
 8004e30:	2700      	movs	r7, #0
 8004e32:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004e36:	2909      	cmp	r1, #9
 8004e38:	f240 8082 	bls.w	8004f40 <_strtod_l+0x2a8>
 8004e3c:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e3e:	2500      	movs	r5, #0
 8004e40:	e09e      	b.n	8004f80 <_strtod_l+0x2e8>
 8004e42:	2300      	movs	r3, #0
 8004e44:	e7c9      	b.n	8004dda <_strtod_l+0x142>
 8004e46:	f1bb 0f08 	cmp.w	fp, #8
 8004e4a:	bfd5      	itete	le
 8004e4c:	9906      	ldrle	r1, [sp, #24]
 8004e4e:	9905      	ldrgt	r1, [sp, #20]
 8004e50:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004e58:	f100 0001 	add.w	r0, r0, #1
 8004e5c:	bfd4      	ite	le
 8004e5e:	9306      	strle	r3, [sp, #24]
 8004e60:	9305      	strgt	r3, [sp, #20]
 8004e62:	f10b 0b01 	add.w	fp, fp, #1
 8004e66:	901b      	str	r0, [sp, #108]	; 0x6c
 8004e68:	e7bf      	b.n	8004dea <_strtod_l+0x152>
 8004e6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e6c:	191a      	adds	r2, r3, r4
 8004e6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e70:	5d1b      	ldrb	r3, [r3, r4]
 8004e72:	f1bb 0f00 	cmp.w	fp, #0
 8004e76:	d036      	beq.n	8004ee6 <_strtod_l+0x24e>
 8004e78:	465c      	mov	r4, fp
 8004e7a:	9004      	str	r0, [sp, #16]
 8004e7c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004e80:	2a09      	cmp	r2, #9
 8004e82:	d912      	bls.n	8004eaa <_strtod_l+0x212>
 8004e84:	2201      	movs	r2, #1
 8004e86:	e7c2      	b.n	8004e0e <_strtod_l+0x176>
 8004e88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	2b30      	cmp	r3, #48	; 0x30
 8004e94:	d0f8      	beq.n	8004e88 <_strtod_l+0x1f0>
 8004e96:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004e9a:	2a08      	cmp	r2, #8
 8004e9c:	f200 84dc 	bhi.w	8005858 <_strtod_l+0xbc0>
 8004ea0:	9004      	str	r0, [sp, #16]
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004ea8:	9208      	str	r2, [sp, #32]
 8004eaa:	3b30      	subs	r3, #48	; 0x30
 8004eac:	f100 0201 	add.w	r2, r0, #1
 8004eb0:	d013      	beq.n	8004eda <_strtod_l+0x242>
 8004eb2:	9904      	ldr	r1, [sp, #16]
 8004eb4:	1905      	adds	r5, r0, r4
 8004eb6:	4411      	add	r1, r2
 8004eb8:	9104      	str	r1, [sp, #16]
 8004eba:	4622      	mov	r2, r4
 8004ebc:	210a      	movs	r1, #10
 8004ebe:	42aa      	cmp	r2, r5
 8004ec0:	d113      	bne.n	8004eea <_strtod_l+0x252>
 8004ec2:	1822      	adds	r2, r4, r0
 8004ec4:	2a08      	cmp	r2, #8
 8004ec6:	f104 0401 	add.w	r4, r4, #1
 8004eca:	4404      	add	r4, r0
 8004ecc:	dc1b      	bgt.n	8004f06 <_strtod_l+0x26e>
 8004ece:	220a      	movs	r2, #10
 8004ed0:	9906      	ldr	r1, [sp, #24]
 8004ed2:	fb02 3301 	mla	r3, r2, r1, r3
 8004ed6:	9306      	str	r3, [sp, #24]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004edc:	4610      	mov	r0, r2
 8004ede:	1c59      	adds	r1, r3, #1
 8004ee0:	911b      	str	r1, [sp, #108]	; 0x6c
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	e7ca      	b.n	8004e7c <_strtod_l+0x1e4>
 8004ee6:	4658      	mov	r0, fp
 8004ee8:	e7d3      	b.n	8004e92 <_strtod_l+0x1fa>
 8004eea:	2a08      	cmp	r2, #8
 8004eec:	dc04      	bgt.n	8004ef8 <_strtod_l+0x260>
 8004eee:	9f06      	ldr	r7, [sp, #24]
 8004ef0:	434f      	muls	r7, r1
 8004ef2:	9706      	str	r7, [sp, #24]
 8004ef4:	3201      	adds	r2, #1
 8004ef6:	e7e2      	b.n	8004ebe <_strtod_l+0x226>
 8004ef8:	1c57      	adds	r7, r2, #1
 8004efa:	2f10      	cmp	r7, #16
 8004efc:	bfde      	ittt	le
 8004efe:	9f05      	ldrle	r7, [sp, #20]
 8004f00:	434f      	mulle	r7, r1
 8004f02:	9705      	strle	r7, [sp, #20]
 8004f04:	e7f6      	b.n	8004ef4 <_strtod_l+0x25c>
 8004f06:	2c10      	cmp	r4, #16
 8004f08:	bfdf      	itttt	le
 8004f0a:	220a      	movle	r2, #10
 8004f0c:	9905      	ldrle	r1, [sp, #20]
 8004f0e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f12:	9305      	strle	r3, [sp, #20]
 8004f14:	e7e0      	b.n	8004ed8 <_strtod_l+0x240>
 8004f16:	2300      	movs	r3, #0
 8004f18:	2201      	movs	r2, #1
 8004f1a:	9304      	str	r3, [sp, #16]
 8004f1c:	e77c      	b.n	8004e18 <_strtod_l+0x180>
 8004f1e:	2700      	movs	r7, #0
 8004f20:	1cb3      	adds	r3, r6, #2
 8004f22:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f24:	78b3      	ldrb	r3, [r6, #2]
 8004f26:	e784      	b.n	8004e32 <_strtod_l+0x19a>
 8004f28:	2701      	movs	r7, #1
 8004f2a:	e7f9      	b.n	8004f20 <_strtod_l+0x288>
 8004f2c:	08009264 	.word	0x08009264
 8004f30:	08008ff0 	.word	0x08008ff0
 8004f34:	7ff00000 	.word	0x7ff00000
 8004f38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f3a:	1c59      	adds	r1, r3, #1
 8004f3c:	911b      	str	r1, [sp, #108]	; 0x6c
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b30      	cmp	r3, #48	; 0x30
 8004f42:	d0f9      	beq.n	8004f38 <_strtod_l+0x2a0>
 8004f44:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004f48:	2908      	cmp	r1, #8
 8004f4a:	f63f af78 	bhi.w	8004e3e <_strtod_l+0x1a6>
 8004f4e:	f04f 0e0a 	mov.w	lr, #10
 8004f52:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004f56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f58:	9309      	str	r3, [sp, #36]	; 0x24
 8004f5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f5c:	1c59      	adds	r1, r3, #1
 8004f5e:	911b      	str	r1, [sp, #108]	; 0x6c
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004f66:	2d09      	cmp	r5, #9
 8004f68:	d935      	bls.n	8004fd6 <_strtod_l+0x33e>
 8004f6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f6c:	1b49      	subs	r1, r1, r5
 8004f6e:	2908      	cmp	r1, #8
 8004f70:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004f74:	dc02      	bgt.n	8004f7c <_strtod_l+0x2e4>
 8004f76:	4565      	cmp	r5, ip
 8004f78:	bfa8      	it	ge
 8004f7a:	4665      	movge	r5, ip
 8004f7c:	b107      	cbz	r7, 8004f80 <_strtod_l+0x2e8>
 8004f7e:	426d      	negs	r5, r5
 8004f80:	2c00      	cmp	r4, #0
 8004f82:	d14c      	bne.n	800501e <_strtod_l+0x386>
 8004f84:	9907      	ldr	r1, [sp, #28]
 8004f86:	4301      	orrs	r1, r0
 8004f88:	f47f aec7 	bne.w	8004d1a <_strtod_l+0x82>
 8004f8c:	2a00      	cmp	r2, #0
 8004f8e:	f47f aee0 	bne.w	8004d52 <_strtod_l+0xba>
 8004f92:	2b69      	cmp	r3, #105	; 0x69
 8004f94:	d026      	beq.n	8004fe4 <_strtod_l+0x34c>
 8004f96:	dc23      	bgt.n	8004fe0 <_strtod_l+0x348>
 8004f98:	2b49      	cmp	r3, #73	; 0x49
 8004f9a:	d023      	beq.n	8004fe4 <_strtod_l+0x34c>
 8004f9c:	2b4e      	cmp	r3, #78	; 0x4e
 8004f9e:	f47f aed8 	bne.w	8004d52 <_strtod_l+0xba>
 8004fa2:	499c      	ldr	r1, [pc, #624]	; (8005214 <_strtod_l+0x57c>)
 8004fa4:	a81b      	add	r0, sp, #108	; 0x6c
 8004fa6:	f001 fe6f 	bl	8006c88 <__match>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	f43f aed1 	beq.w	8004d52 <_strtod_l+0xba>
 8004fb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b28      	cmp	r3, #40	; 0x28
 8004fb6:	d12c      	bne.n	8005012 <_strtod_l+0x37a>
 8004fb8:	4997      	ldr	r1, [pc, #604]	; (8005218 <_strtod_l+0x580>)
 8004fba:	aa1e      	add	r2, sp, #120	; 0x78
 8004fbc:	a81b      	add	r0, sp, #108	; 0x6c
 8004fbe:	f001 fe77 	bl	8006cb0 <__hexnan>
 8004fc2:	2805      	cmp	r0, #5
 8004fc4:	d125      	bne.n	8005012 <_strtod_l+0x37a>
 8004fc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fc8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004fcc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004fd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004fd4:	e6a1      	b.n	8004d1a <_strtod_l+0x82>
 8004fd6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8004fda:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004fde:	e7bc      	b.n	8004f5a <_strtod_l+0x2c2>
 8004fe0:	2b6e      	cmp	r3, #110	; 0x6e
 8004fe2:	e7dc      	b.n	8004f9e <_strtod_l+0x306>
 8004fe4:	498d      	ldr	r1, [pc, #564]	; (800521c <_strtod_l+0x584>)
 8004fe6:	a81b      	add	r0, sp, #108	; 0x6c
 8004fe8:	f001 fe4e 	bl	8006c88 <__match>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	f43f aeb0 	beq.w	8004d52 <_strtod_l+0xba>
 8004ff2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ff4:	498a      	ldr	r1, [pc, #552]	; (8005220 <_strtod_l+0x588>)
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	a81b      	add	r0, sp, #108	; 0x6c
 8004ffa:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ffc:	f001 fe44 	bl	8006c88 <__match>
 8005000:	b910      	cbnz	r0, 8005008 <_strtod_l+0x370>
 8005002:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005004:	3301      	adds	r3, #1
 8005006:	931b      	str	r3, [sp, #108]	; 0x6c
 8005008:	f04f 0800 	mov.w	r8, #0
 800500c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005230 <_strtod_l+0x598>
 8005010:	e683      	b.n	8004d1a <_strtod_l+0x82>
 8005012:	4884      	ldr	r0, [pc, #528]	; (8005224 <_strtod_l+0x58c>)
 8005014:	f002 fdea 	bl	8007bec <nan>
 8005018:	4680      	mov	r8, r0
 800501a:	4689      	mov	r9, r1
 800501c:	e67d      	b.n	8004d1a <_strtod_l+0x82>
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	f1bb 0f00 	cmp.w	fp, #0
 8005024:	bf08      	it	eq
 8005026:	46a3      	moveq	fp, r4
 8005028:	1aeb      	subs	r3, r5, r3
 800502a:	2c10      	cmp	r4, #16
 800502c:	9806      	ldr	r0, [sp, #24]
 800502e:	4626      	mov	r6, r4
 8005030:	9307      	str	r3, [sp, #28]
 8005032:	bfa8      	it	ge
 8005034:	2610      	movge	r6, #16
 8005036:	f7fb f9d5 	bl	80003e4 <__aeabi_ui2d>
 800503a:	2c09      	cmp	r4, #9
 800503c:	4680      	mov	r8, r0
 800503e:	4689      	mov	r9, r1
 8005040:	dd13      	ble.n	800506a <_strtod_l+0x3d2>
 8005042:	4b79      	ldr	r3, [pc, #484]	; (8005228 <_strtod_l+0x590>)
 8005044:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005048:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800504c:	f7fb fa44 	bl	80004d8 <__aeabi_dmul>
 8005050:	4680      	mov	r8, r0
 8005052:	9805      	ldr	r0, [sp, #20]
 8005054:	4689      	mov	r9, r1
 8005056:	f7fb f9c5 	bl	80003e4 <__aeabi_ui2d>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4640      	mov	r0, r8
 8005060:	4649      	mov	r1, r9
 8005062:	f7fb f883 	bl	800016c <__adddf3>
 8005066:	4680      	mov	r8, r0
 8005068:	4689      	mov	r9, r1
 800506a:	2c0f      	cmp	r4, #15
 800506c:	dc36      	bgt.n	80050dc <_strtod_l+0x444>
 800506e:	9b07      	ldr	r3, [sp, #28]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f43f ae52 	beq.w	8004d1a <_strtod_l+0x82>
 8005076:	dd22      	ble.n	80050be <_strtod_l+0x426>
 8005078:	2b16      	cmp	r3, #22
 800507a:	dc09      	bgt.n	8005090 <_strtod_l+0x3f8>
 800507c:	4c6a      	ldr	r4, [pc, #424]	; (8005228 <_strtod_l+0x590>)
 800507e:	4642      	mov	r2, r8
 8005080:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005084:	464b      	mov	r3, r9
 8005086:	e9d4 0100 	ldrd	r0, r1, [r4]
 800508a:	f7fb fa25 	bl	80004d8 <__aeabi_dmul>
 800508e:	e7c3      	b.n	8005018 <_strtod_l+0x380>
 8005090:	9a07      	ldr	r2, [sp, #28]
 8005092:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005096:	4293      	cmp	r3, r2
 8005098:	db20      	blt.n	80050dc <_strtod_l+0x444>
 800509a:	4d63      	ldr	r5, [pc, #396]	; (8005228 <_strtod_l+0x590>)
 800509c:	f1c4 040f 	rsb	r4, r4, #15
 80050a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80050a4:	4642      	mov	r2, r8
 80050a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050aa:	464b      	mov	r3, r9
 80050ac:	f7fb fa14 	bl	80004d8 <__aeabi_dmul>
 80050b0:	9b07      	ldr	r3, [sp, #28]
 80050b2:	1b1c      	subs	r4, r3, r4
 80050b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80050b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050bc:	e7e5      	b.n	800508a <_strtod_l+0x3f2>
 80050be:	9b07      	ldr	r3, [sp, #28]
 80050c0:	3316      	adds	r3, #22
 80050c2:	db0b      	blt.n	80050dc <_strtod_l+0x444>
 80050c4:	9b04      	ldr	r3, [sp, #16]
 80050c6:	4a58      	ldr	r2, [pc, #352]	; (8005228 <_strtod_l+0x590>)
 80050c8:	1b5d      	subs	r5, r3, r5
 80050ca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80050ce:	4640      	mov	r0, r8
 80050d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050d4:	4649      	mov	r1, r9
 80050d6:	f7fb fb29 	bl	800072c <__aeabi_ddiv>
 80050da:	e79d      	b.n	8005018 <_strtod_l+0x380>
 80050dc:	9b07      	ldr	r3, [sp, #28]
 80050de:	1ba6      	subs	r6, r4, r6
 80050e0:	441e      	add	r6, r3
 80050e2:	2e00      	cmp	r6, #0
 80050e4:	dd71      	ble.n	80051ca <_strtod_l+0x532>
 80050e6:	f016 030f 	ands.w	r3, r6, #15
 80050ea:	d00a      	beq.n	8005102 <_strtod_l+0x46a>
 80050ec:	494e      	ldr	r1, [pc, #312]	; (8005228 <_strtod_l+0x590>)
 80050ee:	4642      	mov	r2, r8
 80050f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050f8:	464b      	mov	r3, r9
 80050fa:	f7fb f9ed 	bl	80004d8 <__aeabi_dmul>
 80050fe:	4680      	mov	r8, r0
 8005100:	4689      	mov	r9, r1
 8005102:	f036 060f 	bics.w	r6, r6, #15
 8005106:	d050      	beq.n	80051aa <_strtod_l+0x512>
 8005108:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800510c:	dd27      	ble.n	800515e <_strtod_l+0x4c6>
 800510e:	f04f 0b00 	mov.w	fp, #0
 8005112:	f8cd b010 	str.w	fp, [sp, #16]
 8005116:	f8cd b020 	str.w	fp, [sp, #32]
 800511a:	f8cd b018 	str.w	fp, [sp, #24]
 800511e:	2322      	movs	r3, #34	; 0x22
 8005120:	f04f 0800 	mov.w	r8, #0
 8005124:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005230 <_strtod_l+0x598>
 8005128:	f8ca 3000 	str.w	r3, [sl]
 800512c:	9b08      	ldr	r3, [sp, #32]
 800512e:	2b00      	cmp	r3, #0
 8005130:	f43f adf3 	beq.w	8004d1a <_strtod_l+0x82>
 8005134:	4650      	mov	r0, sl
 8005136:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005138:	f001 fed0 	bl	8006edc <_Bfree>
 800513c:	4650      	mov	r0, sl
 800513e:	9906      	ldr	r1, [sp, #24]
 8005140:	f001 fecc 	bl	8006edc <_Bfree>
 8005144:	4650      	mov	r0, sl
 8005146:	9904      	ldr	r1, [sp, #16]
 8005148:	f001 fec8 	bl	8006edc <_Bfree>
 800514c:	4650      	mov	r0, sl
 800514e:	9908      	ldr	r1, [sp, #32]
 8005150:	f001 fec4 	bl	8006edc <_Bfree>
 8005154:	4659      	mov	r1, fp
 8005156:	4650      	mov	r0, sl
 8005158:	f001 fec0 	bl	8006edc <_Bfree>
 800515c:	e5dd      	b.n	8004d1a <_strtod_l+0x82>
 800515e:	2300      	movs	r3, #0
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	461f      	mov	r7, r3
 8005166:	1136      	asrs	r6, r6, #4
 8005168:	2e01      	cmp	r6, #1
 800516a:	dc21      	bgt.n	80051b0 <_strtod_l+0x518>
 800516c:	b10b      	cbz	r3, 8005172 <_strtod_l+0x4da>
 800516e:	4680      	mov	r8, r0
 8005170:	4689      	mov	r9, r1
 8005172:	4b2e      	ldr	r3, [pc, #184]	; (800522c <_strtod_l+0x594>)
 8005174:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005178:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800517c:	4642      	mov	r2, r8
 800517e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005182:	464b      	mov	r3, r9
 8005184:	f7fb f9a8 	bl	80004d8 <__aeabi_dmul>
 8005188:	4b29      	ldr	r3, [pc, #164]	; (8005230 <_strtod_l+0x598>)
 800518a:	460a      	mov	r2, r1
 800518c:	400b      	ands	r3, r1
 800518e:	4929      	ldr	r1, [pc, #164]	; (8005234 <_strtod_l+0x59c>)
 8005190:	4680      	mov	r8, r0
 8005192:	428b      	cmp	r3, r1
 8005194:	d8bb      	bhi.n	800510e <_strtod_l+0x476>
 8005196:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800519a:	428b      	cmp	r3, r1
 800519c:	bf86      	itte	hi
 800519e:	f04f 38ff 	movhi.w	r8, #4294967295
 80051a2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005238 <_strtod_l+0x5a0>
 80051a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80051aa:	2300      	movs	r3, #0
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	e07e      	b.n	80052ae <_strtod_l+0x616>
 80051b0:	07f2      	lsls	r2, r6, #31
 80051b2:	d507      	bpl.n	80051c4 <_strtod_l+0x52c>
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <_strtod_l+0x594>)
 80051b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f7fb f98b 	bl	80004d8 <__aeabi_dmul>
 80051c2:	2301      	movs	r3, #1
 80051c4:	3701      	adds	r7, #1
 80051c6:	1076      	asrs	r6, r6, #1
 80051c8:	e7ce      	b.n	8005168 <_strtod_l+0x4d0>
 80051ca:	d0ee      	beq.n	80051aa <_strtod_l+0x512>
 80051cc:	4276      	negs	r6, r6
 80051ce:	f016 020f 	ands.w	r2, r6, #15
 80051d2:	d00a      	beq.n	80051ea <_strtod_l+0x552>
 80051d4:	4b14      	ldr	r3, [pc, #80]	; (8005228 <_strtod_l+0x590>)
 80051d6:	4640      	mov	r0, r8
 80051d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051dc:	4649      	mov	r1, r9
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb faa3 	bl	800072c <__aeabi_ddiv>
 80051e6:	4680      	mov	r8, r0
 80051e8:	4689      	mov	r9, r1
 80051ea:	1136      	asrs	r6, r6, #4
 80051ec:	d0dd      	beq.n	80051aa <_strtod_l+0x512>
 80051ee:	2e1f      	cmp	r6, #31
 80051f0:	dd24      	ble.n	800523c <_strtod_l+0x5a4>
 80051f2:	f04f 0b00 	mov.w	fp, #0
 80051f6:	f8cd b010 	str.w	fp, [sp, #16]
 80051fa:	f8cd b020 	str.w	fp, [sp, #32]
 80051fe:	f8cd b018 	str.w	fp, [sp, #24]
 8005202:	2322      	movs	r3, #34	; 0x22
 8005204:	f04f 0800 	mov.w	r8, #0
 8005208:	f04f 0900 	mov.w	r9, #0
 800520c:	f8ca 3000 	str.w	r3, [sl]
 8005210:	e78c      	b.n	800512c <_strtod_l+0x494>
 8005212:	bf00      	nop
 8005214:	08008fc1 	.word	0x08008fc1
 8005218:	08009004 	.word	0x08009004
 800521c:	08008fb9 	.word	0x08008fb9
 8005220:	08009169 	.word	0x08009169
 8005224:	08009420 	.word	0x08009420
 8005228:	08009300 	.word	0x08009300
 800522c:	080092d8 	.word	0x080092d8
 8005230:	7ff00000 	.word	0x7ff00000
 8005234:	7ca00000 	.word	0x7ca00000
 8005238:	7fefffff 	.word	0x7fefffff
 800523c:	f016 0310 	ands.w	r3, r6, #16
 8005240:	bf18      	it	ne
 8005242:	236a      	movne	r3, #106	; 0x6a
 8005244:	4640      	mov	r0, r8
 8005246:	9305      	str	r3, [sp, #20]
 8005248:	4649      	mov	r1, r9
 800524a:	2300      	movs	r3, #0
 800524c:	4fb2      	ldr	r7, [pc, #712]	; (8005518 <_strtod_l+0x880>)
 800524e:	07f2      	lsls	r2, r6, #31
 8005250:	d504      	bpl.n	800525c <_strtod_l+0x5c4>
 8005252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005256:	f7fb f93f 	bl	80004d8 <__aeabi_dmul>
 800525a:	2301      	movs	r3, #1
 800525c:	1076      	asrs	r6, r6, #1
 800525e:	f107 0708 	add.w	r7, r7, #8
 8005262:	d1f4      	bne.n	800524e <_strtod_l+0x5b6>
 8005264:	b10b      	cbz	r3, 800526a <_strtod_l+0x5d2>
 8005266:	4680      	mov	r8, r0
 8005268:	4689      	mov	r9, r1
 800526a:	9b05      	ldr	r3, [sp, #20]
 800526c:	b1bb      	cbz	r3, 800529e <_strtod_l+0x606>
 800526e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8005272:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005276:	2b00      	cmp	r3, #0
 8005278:	4649      	mov	r1, r9
 800527a:	dd10      	ble.n	800529e <_strtod_l+0x606>
 800527c:	2b1f      	cmp	r3, #31
 800527e:	f340 812b 	ble.w	80054d8 <_strtod_l+0x840>
 8005282:	2b34      	cmp	r3, #52	; 0x34
 8005284:	bfd8      	it	le
 8005286:	f04f 32ff 	movle.w	r2, #4294967295
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	bfcf      	iteee	gt
 8005290:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005294:	3b20      	suble	r3, #32
 8005296:	fa02 f303 	lslle.w	r3, r2, r3
 800529a:	ea03 0901 	andle.w	r9, r3, r1
 800529e:	2200      	movs	r2, #0
 80052a0:	2300      	movs	r3, #0
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	f7fb fb7f 	bl	80009a8 <__aeabi_dcmpeq>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d1a1      	bne.n	80051f2 <_strtod_l+0x55a>
 80052ae:	9b06      	ldr	r3, [sp, #24]
 80052b0:	465a      	mov	r2, fp
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	4650      	mov	r0, sl
 80052b6:	4623      	mov	r3, r4
 80052b8:	9908      	ldr	r1, [sp, #32]
 80052ba:	f001 fe7b 	bl	8006fb4 <__s2b>
 80052be:	9008      	str	r0, [sp, #32]
 80052c0:	2800      	cmp	r0, #0
 80052c2:	f43f af24 	beq.w	800510e <_strtod_l+0x476>
 80052c6:	9b04      	ldr	r3, [sp, #16]
 80052c8:	f04f 0b00 	mov.w	fp, #0
 80052cc:	1b5d      	subs	r5, r3, r5
 80052ce:	9b07      	ldr	r3, [sp, #28]
 80052d0:	f8cd b010 	str.w	fp, [sp, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bfb4      	ite	lt
 80052d8:	462b      	movlt	r3, r5
 80052da:	2300      	movge	r3, #0
 80052dc:	930e      	str	r3, [sp, #56]	; 0x38
 80052de:	9b07      	ldr	r3, [sp, #28]
 80052e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80052e4:	9316      	str	r3, [sp, #88]	; 0x58
 80052e6:	9b08      	ldr	r3, [sp, #32]
 80052e8:	4650      	mov	r0, sl
 80052ea:	6859      	ldr	r1, [r3, #4]
 80052ec:	f001 fdb6 	bl	8006e5c <_Balloc>
 80052f0:	9006      	str	r0, [sp, #24]
 80052f2:	2800      	cmp	r0, #0
 80052f4:	f43f af13 	beq.w	800511e <_strtod_l+0x486>
 80052f8:	9b08      	ldr	r3, [sp, #32]
 80052fa:	300c      	adds	r0, #12
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	f103 010c 	add.w	r1, r3, #12
 8005302:	3202      	adds	r2, #2
 8005304:	0092      	lsls	r2, r2, #2
 8005306:	f001 fd9b 	bl	8006e40 <memcpy>
 800530a:	ab1e      	add	r3, sp, #120	; 0x78
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	ab1d      	add	r3, sp, #116	; 0x74
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	4642      	mov	r2, r8
 8005314:	464b      	mov	r3, r9
 8005316:	4650      	mov	r0, sl
 8005318:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800531c:	f002 f988 	bl	8007630 <__d2b>
 8005320:	901c      	str	r0, [sp, #112]	; 0x70
 8005322:	2800      	cmp	r0, #0
 8005324:	f43f aefb 	beq.w	800511e <_strtod_l+0x486>
 8005328:	2101      	movs	r1, #1
 800532a:	4650      	mov	r0, sl
 800532c:	f001 feda 	bl	80070e4 <__i2b>
 8005330:	4603      	mov	r3, r0
 8005332:	9004      	str	r0, [sp, #16]
 8005334:	2800      	cmp	r0, #0
 8005336:	f43f aef2 	beq.w	800511e <_strtod_l+0x486>
 800533a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800533c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800533e:	2d00      	cmp	r5, #0
 8005340:	bfab      	itete	ge
 8005342:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005344:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005346:	18ee      	addge	r6, r5, r3
 8005348:	1b5c      	sublt	r4, r3, r5
 800534a:	9b05      	ldr	r3, [sp, #20]
 800534c:	bfa8      	it	ge
 800534e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005350:	eba5 0503 	sub.w	r5, r5, r3
 8005354:	4415      	add	r5, r2
 8005356:	4b71      	ldr	r3, [pc, #452]	; (800551c <_strtod_l+0x884>)
 8005358:	f105 35ff 	add.w	r5, r5, #4294967295
 800535c:	bfb8      	it	lt
 800535e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005360:	429d      	cmp	r5, r3
 8005362:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005366:	f280 80c9 	bge.w	80054fc <_strtod_l+0x864>
 800536a:	1b5b      	subs	r3, r3, r5
 800536c:	2b1f      	cmp	r3, #31
 800536e:	f04f 0701 	mov.w	r7, #1
 8005372:	eba2 0203 	sub.w	r2, r2, r3
 8005376:	f300 80b6 	bgt.w	80054e6 <_strtod_l+0x84e>
 800537a:	2500      	movs	r5, #0
 800537c:	fa07 f303 	lsl.w	r3, r7, r3
 8005380:	930f      	str	r3, [sp, #60]	; 0x3c
 8005382:	18b7      	adds	r7, r6, r2
 8005384:	9b05      	ldr	r3, [sp, #20]
 8005386:	42be      	cmp	r6, r7
 8005388:	4414      	add	r4, r2
 800538a:	441c      	add	r4, r3
 800538c:	4633      	mov	r3, r6
 800538e:	bfa8      	it	ge
 8005390:	463b      	movge	r3, r7
 8005392:	42a3      	cmp	r3, r4
 8005394:	bfa8      	it	ge
 8005396:	4623      	movge	r3, r4
 8005398:	2b00      	cmp	r3, #0
 800539a:	bfc2      	ittt	gt
 800539c:	1aff      	subgt	r7, r7, r3
 800539e:	1ae4      	subgt	r4, r4, r3
 80053a0:	1af6      	subgt	r6, r6, r3
 80053a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dd17      	ble.n	80053d8 <_strtod_l+0x740>
 80053a8:	461a      	mov	r2, r3
 80053aa:	4650      	mov	r0, sl
 80053ac:	9904      	ldr	r1, [sp, #16]
 80053ae:	f001 ff53 	bl	8007258 <__pow5mult>
 80053b2:	9004      	str	r0, [sp, #16]
 80053b4:	2800      	cmp	r0, #0
 80053b6:	f43f aeb2 	beq.w	800511e <_strtod_l+0x486>
 80053ba:	4601      	mov	r1, r0
 80053bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80053be:	4650      	mov	r0, sl
 80053c0:	f001 fea6 	bl	8007110 <__multiply>
 80053c4:	9009      	str	r0, [sp, #36]	; 0x24
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f43f aea9 	beq.w	800511e <_strtod_l+0x486>
 80053cc:	4650      	mov	r0, sl
 80053ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053d0:	f001 fd84 	bl	8006edc <_Bfree>
 80053d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d6:	931c      	str	r3, [sp, #112]	; 0x70
 80053d8:	2f00      	cmp	r7, #0
 80053da:	f300 8093 	bgt.w	8005504 <_strtod_l+0x86c>
 80053de:	9b07      	ldr	r3, [sp, #28]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	dd08      	ble.n	80053f6 <_strtod_l+0x75e>
 80053e4:	4650      	mov	r0, sl
 80053e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053e8:	9906      	ldr	r1, [sp, #24]
 80053ea:	f001 ff35 	bl	8007258 <__pow5mult>
 80053ee:	9006      	str	r0, [sp, #24]
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f43f ae94 	beq.w	800511e <_strtod_l+0x486>
 80053f6:	2c00      	cmp	r4, #0
 80053f8:	dd08      	ble.n	800540c <_strtod_l+0x774>
 80053fa:	4622      	mov	r2, r4
 80053fc:	4650      	mov	r0, sl
 80053fe:	9906      	ldr	r1, [sp, #24]
 8005400:	f001 ff84 	bl	800730c <__lshift>
 8005404:	9006      	str	r0, [sp, #24]
 8005406:	2800      	cmp	r0, #0
 8005408:	f43f ae89 	beq.w	800511e <_strtod_l+0x486>
 800540c:	2e00      	cmp	r6, #0
 800540e:	dd08      	ble.n	8005422 <_strtod_l+0x78a>
 8005410:	4632      	mov	r2, r6
 8005412:	4650      	mov	r0, sl
 8005414:	9904      	ldr	r1, [sp, #16]
 8005416:	f001 ff79 	bl	800730c <__lshift>
 800541a:	9004      	str	r0, [sp, #16]
 800541c:	2800      	cmp	r0, #0
 800541e:	f43f ae7e 	beq.w	800511e <_strtod_l+0x486>
 8005422:	4650      	mov	r0, sl
 8005424:	9a06      	ldr	r2, [sp, #24]
 8005426:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005428:	f001 fff8 	bl	800741c <__mdiff>
 800542c:	4683      	mov	fp, r0
 800542e:	2800      	cmp	r0, #0
 8005430:	f43f ae75 	beq.w	800511e <_strtod_l+0x486>
 8005434:	2400      	movs	r4, #0
 8005436:	68c3      	ldr	r3, [r0, #12]
 8005438:	9904      	ldr	r1, [sp, #16]
 800543a:	60c4      	str	r4, [r0, #12]
 800543c:	930d      	str	r3, [sp, #52]	; 0x34
 800543e:	f001 ffd1 	bl	80073e4 <__mcmp>
 8005442:	42a0      	cmp	r0, r4
 8005444:	da70      	bge.n	8005528 <_strtod_l+0x890>
 8005446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005448:	ea53 0308 	orrs.w	r3, r3, r8
 800544c:	f040 8096 	bne.w	800557c <_strtod_l+0x8e4>
 8005450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005454:	2b00      	cmp	r3, #0
 8005456:	f040 8091 	bne.w	800557c <_strtod_l+0x8e4>
 800545a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800545e:	0d1b      	lsrs	r3, r3, #20
 8005460:	051b      	lsls	r3, r3, #20
 8005462:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005466:	f240 8089 	bls.w	800557c <_strtod_l+0x8e4>
 800546a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800546e:	b923      	cbnz	r3, 800547a <_strtod_l+0x7e2>
 8005470:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005474:	2b01      	cmp	r3, #1
 8005476:	f340 8081 	ble.w	800557c <_strtod_l+0x8e4>
 800547a:	4659      	mov	r1, fp
 800547c:	2201      	movs	r2, #1
 800547e:	4650      	mov	r0, sl
 8005480:	f001 ff44 	bl	800730c <__lshift>
 8005484:	9904      	ldr	r1, [sp, #16]
 8005486:	4683      	mov	fp, r0
 8005488:	f001 ffac 	bl	80073e4 <__mcmp>
 800548c:	2800      	cmp	r0, #0
 800548e:	dd75      	ble.n	800557c <_strtod_l+0x8e4>
 8005490:	9905      	ldr	r1, [sp, #20]
 8005492:	464b      	mov	r3, r9
 8005494:	4a22      	ldr	r2, [pc, #136]	; (8005520 <_strtod_l+0x888>)
 8005496:	2900      	cmp	r1, #0
 8005498:	f000 8091 	beq.w	80055be <_strtod_l+0x926>
 800549c:	ea02 0109 	and.w	r1, r2, r9
 80054a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80054a4:	f300 808b 	bgt.w	80055be <_strtod_l+0x926>
 80054a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80054ac:	f77f aea9 	ble.w	8005202 <_strtod_l+0x56a>
 80054b0:	2300      	movs	r3, #0
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <_strtod_l+0x88c>)
 80054b4:	4640      	mov	r0, r8
 80054b6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80054ba:	4649      	mov	r1, r9
 80054bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80054c0:	f7fb f80a 	bl	80004d8 <__aeabi_dmul>
 80054c4:	460b      	mov	r3, r1
 80054c6:	4303      	orrs	r3, r0
 80054c8:	bf08      	it	eq
 80054ca:	2322      	moveq	r3, #34	; 0x22
 80054cc:	4680      	mov	r8, r0
 80054ce:	4689      	mov	r9, r1
 80054d0:	bf08      	it	eq
 80054d2:	f8ca 3000 	streq.w	r3, [sl]
 80054d6:	e62d      	b.n	8005134 <_strtod_l+0x49c>
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	ea03 0808 	and.w	r8, r3, r8
 80054e4:	e6db      	b.n	800529e <_strtod_l+0x606>
 80054e6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80054ea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80054ee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80054f2:	35e2      	adds	r5, #226	; 0xe2
 80054f4:	fa07 f505 	lsl.w	r5, r7, r5
 80054f8:	970f      	str	r7, [sp, #60]	; 0x3c
 80054fa:	e742      	b.n	8005382 <_strtod_l+0x6ea>
 80054fc:	2301      	movs	r3, #1
 80054fe:	2500      	movs	r5, #0
 8005500:	930f      	str	r3, [sp, #60]	; 0x3c
 8005502:	e73e      	b.n	8005382 <_strtod_l+0x6ea>
 8005504:	463a      	mov	r2, r7
 8005506:	4650      	mov	r0, sl
 8005508:	991c      	ldr	r1, [sp, #112]	; 0x70
 800550a:	f001 feff 	bl	800730c <__lshift>
 800550e:	901c      	str	r0, [sp, #112]	; 0x70
 8005510:	2800      	cmp	r0, #0
 8005512:	f47f af64 	bne.w	80053de <_strtod_l+0x746>
 8005516:	e602      	b.n	800511e <_strtod_l+0x486>
 8005518:	08009018 	.word	0x08009018
 800551c:	fffffc02 	.word	0xfffffc02
 8005520:	7ff00000 	.word	0x7ff00000
 8005524:	39500000 	.word	0x39500000
 8005528:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800552c:	d166      	bne.n	80055fc <_strtod_l+0x964>
 800552e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005530:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005534:	b35a      	cbz	r2, 800558e <_strtod_l+0x8f6>
 8005536:	4a9c      	ldr	r2, [pc, #624]	; (80057a8 <_strtod_l+0xb10>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d12c      	bne.n	8005596 <_strtod_l+0x8fe>
 800553c:	9b05      	ldr	r3, [sp, #20]
 800553e:	4640      	mov	r0, r8
 8005540:	b303      	cbz	r3, 8005584 <_strtod_l+0x8ec>
 8005542:	464b      	mov	r3, r9
 8005544:	4a99      	ldr	r2, [pc, #612]	; (80057ac <_strtod_l+0xb14>)
 8005546:	f04f 31ff 	mov.w	r1, #4294967295
 800554a:	401a      	ands	r2, r3
 800554c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005550:	d81b      	bhi.n	800558a <_strtod_l+0x8f2>
 8005552:	0d12      	lsrs	r2, r2, #20
 8005554:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	4298      	cmp	r0, r3
 800555e:	d11a      	bne.n	8005596 <_strtod_l+0x8fe>
 8005560:	4b93      	ldr	r3, [pc, #588]	; (80057b0 <_strtod_l+0xb18>)
 8005562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005564:	429a      	cmp	r2, r3
 8005566:	d102      	bne.n	800556e <_strtod_l+0x8d6>
 8005568:	3001      	adds	r0, #1
 800556a:	f43f add8 	beq.w	800511e <_strtod_l+0x486>
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	4b8e      	ldr	r3, [pc, #568]	; (80057ac <_strtod_l+0xb14>)
 8005574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005576:	401a      	ands	r2, r3
 8005578:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800557c:	9b05      	ldr	r3, [sp, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d196      	bne.n	80054b0 <_strtod_l+0x818>
 8005582:	e5d7      	b.n	8005134 <_strtod_l+0x49c>
 8005584:	f04f 33ff 	mov.w	r3, #4294967295
 8005588:	e7e8      	b.n	800555c <_strtod_l+0x8c4>
 800558a:	460b      	mov	r3, r1
 800558c:	e7e6      	b.n	800555c <_strtod_l+0x8c4>
 800558e:	ea53 0308 	orrs.w	r3, r3, r8
 8005592:	f43f af7d 	beq.w	8005490 <_strtod_l+0x7f8>
 8005596:	b1e5      	cbz	r5, 80055d2 <_strtod_l+0x93a>
 8005598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559a:	421d      	tst	r5, r3
 800559c:	d0ee      	beq.n	800557c <_strtod_l+0x8e4>
 800559e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055a0:	4640      	mov	r0, r8
 80055a2:	4649      	mov	r1, r9
 80055a4:	9a05      	ldr	r2, [sp, #20]
 80055a6:	b1c3      	cbz	r3, 80055da <_strtod_l+0x942>
 80055a8:	f7ff fb54 	bl	8004c54 <sulp>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055b4:	f7fa fdda 	bl	800016c <__adddf3>
 80055b8:	4680      	mov	r8, r0
 80055ba:	4689      	mov	r9, r1
 80055bc:	e7de      	b.n	800557c <_strtod_l+0x8e4>
 80055be:	4013      	ands	r3, r2
 80055c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80055c4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80055c8:	f04f 38ff 	mov.w	r8, #4294967295
 80055cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80055d0:	e7d4      	b.n	800557c <_strtod_l+0x8e4>
 80055d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055d4:	ea13 0f08 	tst.w	r3, r8
 80055d8:	e7e0      	b.n	800559c <_strtod_l+0x904>
 80055da:	f7ff fb3b 	bl	8004c54 <sulp>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055e6:	f7fa fdbf 	bl	8000168 <__aeabi_dsub>
 80055ea:	2200      	movs	r2, #0
 80055ec:	2300      	movs	r3, #0
 80055ee:	4680      	mov	r8, r0
 80055f0:	4689      	mov	r9, r1
 80055f2:	f7fb f9d9 	bl	80009a8 <__aeabi_dcmpeq>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d0c0      	beq.n	800557c <_strtod_l+0x8e4>
 80055fa:	e602      	b.n	8005202 <_strtod_l+0x56a>
 80055fc:	4658      	mov	r0, fp
 80055fe:	9904      	ldr	r1, [sp, #16]
 8005600:	f002 f872 	bl	80076e8 <__ratio>
 8005604:	2200      	movs	r2, #0
 8005606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800560a:	4606      	mov	r6, r0
 800560c:	460f      	mov	r7, r1
 800560e:	f7fb f9df 	bl	80009d0 <__aeabi_dcmple>
 8005612:	2800      	cmp	r0, #0
 8005614:	d075      	beq.n	8005702 <_strtod_l+0xa6a>
 8005616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005618:	2b00      	cmp	r3, #0
 800561a:	d047      	beq.n	80056ac <_strtod_l+0xa14>
 800561c:	2600      	movs	r6, #0
 800561e:	4f65      	ldr	r7, [pc, #404]	; (80057b4 <_strtod_l+0xb1c>)
 8005620:	4d64      	ldr	r5, [pc, #400]	; (80057b4 <_strtod_l+0xb1c>)
 8005622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005628:	0d1b      	lsrs	r3, r3, #20
 800562a:	051b      	lsls	r3, r3, #20
 800562c:	930f      	str	r3, [sp, #60]	; 0x3c
 800562e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005630:	4b61      	ldr	r3, [pc, #388]	; (80057b8 <_strtod_l+0xb20>)
 8005632:	429a      	cmp	r2, r3
 8005634:	f040 80c8 	bne.w	80057c8 <_strtod_l+0xb30>
 8005638:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800563c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005642:	4640      	mov	r0, r8
 8005644:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005648:	4649      	mov	r1, r9
 800564a:	f001 ff77 	bl	800753c <__ulp>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4630      	mov	r0, r6
 8005654:	4639      	mov	r1, r7
 8005656:	f7fa ff3f 	bl	80004d8 <__aeabi_dmul>
 800565a:	4642      	mov	r2, r8
 800565c:	464b      	mov	r3, r9
 800565e:	f7fa fd85 	bl	800016c <__adddf3>
 8005662:	460b      	mov	r3, r1
 8005664:	4951      	ldr	r1, [pc, #324]	; (80057ac <_strtod_l+0xb14>)
 8005666:	4a55      	ldr	r2, [pc, #340]	; (80057bc <_strtod_l+0xb24>)
 8005668:	4019      	ands	r1, r3
 800566a:	4291      	cmp	r1, r2
 800566c:	4680      	mov	r8, r0
 800566e:	d95e      	bls.n	800572e <_strtod_l+0xa96>
 8005670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005672:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005676:	4293      	cmp	r3, r2
 8005678:	d103      	bne.n	8005682 <_strtod_l+0x9ea>
 800567a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567c:	3301      	adds	r3, #1
 800567e:	f43f ad4e 	beq.w	800511e <_strtod_l+0x486>
 8005682:	f04f 38ff 	mov.w	r8, #4294967295
 8005686:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80057b0 <_strtod_l+0xb18>
 800568a:	4650      	mov	r0, sl
 800568c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800568e:	f001 fc25 	bl	8006edc <_Bfree>
 8005692:	4650      	mov	r0, sl
 8005694:	9906      	ldr	r1, [sp, #24]
 8005696:	f001 fc21 	bl	8006edc <_Bfree>
 800569a:	4650      	mov	r0, sl
 800569c:	9904      	ldr	r1, [sp, #16]
 800569e:	f001 fc1d 	bl	8006edc <_Bfree>
 80056a2:	4659      	mov	r1, fp
 80056a4:	4650      	mov	r0, sl
 80056a6:	f001 fc19 	bl	8006edc <_Bfree>
 80056aa:	e61c      	b.n	80052e6 <_strtod_l+0x64e>
 80056ac:	f1b8 0f00 	cmp.w	r8, #0
 80056b0:	d119      	bne.n	80056e6 <_strtod_l+0xa4e>
 80056b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056b8:	b9e3      	cbnz	r3, 80056f4 <_strtod_l+0xa5c>
 80056ba:	2200      	movs	r2, #0
 80056bc:	4630      	mov	r0, r6
 80056be:	4639      	mov	r1, r7
 80056c0:	4b3c      	ldr	r3, [pc, #240]	; (80057b4 <_strtod_l+0xb1c>)
 80056c2:	f7fb f97b 	bl	80009bc <__aeabi_dcmplt>
 80056c6:	b9c8      	cbnz	r0, 80056fc <_strtod_l+0xa64>
 80056c8:	2200      	movs	r2, #0
 80056ca:	4630      	mov	r0, r6
 80056cc:	4639      	mov	r1, r7
 80056ce:	4b3c      	ldr	r3, [pc, #240]	; (80057c0 <_strtod_l+0xb28>)
 80056d0:	f7fa ff02 	bl	80004d8 <__aeabi_dmul>
 80056d4:	4604      	mov	r4, r0
 80056d6:	460d      	mov	r5, r1
 80056d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80056dc:	9418      	str	r4, [sp, #96]	; 0x60
 80056de:	9319      	str	r3, [sp, #100]	; 0x64
 80056e0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80056e4:	e79d      	b.n	8005622 <_strtod_l+0x98a>
 80056e6:	f1b8 0f01 	cmp.w	r8, #1
 80056ea:	d103      	bne.n	80056f4 <_strtod_l+0xa5c>
 80056ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f43f ad87 	beq.w	8005202 <_strtod_l+0x56a>
 80056f4:	2600      	movs	r6, #0
 80056f6:	2400      	movs	r4, #0
 80056f8:	4f32      	ldr	r7, [pc, #200]	; (80057c4 <_strtod_l+0xb2c>)
 80056fa:	e791      	b.n	8005620 <_strtod_l+0x988>
 80056fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80056fe:	4d30      	ldr	r5, [pc, #192]	; (80057c0 <_strtod_l+0xb28>)
 8005700:	e7ea      	b.n	80056d8 <_strtod_l+0xa40>
 8005702:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <_strtod_l+0xb28>)
 8005704:	2200      	movs	r2, #0
 8005706:	4630      	mov	r0, r6
 8005708:	4639      	mov	r1, r7
 800570a:	f7fa fee5 	bl	80004d8 <__aeabi_dmul>
 800570e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005710:	4604      	mov	r4, r0
 8005712:	460d      	mov	r5, r1
 8005714:	b933      	cbnz	r3, 8005724 <_strtod_l+0xa8c>
 8005716:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800571a:	9010      	str	r0, [sp, #64]	; 0x40
 800571c:	9311      	str	r3, [sp, #68]	; 0x44
 800571e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005722:	e77e      	b.n	8005622 <_strtod_l+0x98a>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800572c:	e7f7      	b.n	800571e <_strtod_l+0xa86>
 800572e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005732:	9b05      	ldr	r3, [sp, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1a8      	bne.n	800568a <_strtod_l+0x9f2>
 8005738:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800573c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800573e:	0d1b      	lsrs	r3, r3, #20
 8005740:	051b      	lsls	r3, r3, #20
 8005742:	429a      	cmp	r2, r3
 8005744:	d1a1      	bne.n	800568a <_strtod_l+0x9f2>
 8005746:	4620      	mov	r0, r4
 8005748:	4629      	mov	r1, r5
 800574a:	f7fb fa0d 	bl	8000b68 <__aeabi_d2lz>
 800574e:	f7fa fe95 	bl	800047c <__aeabi_l2d>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fa fd05 	bl	8000168 <__aeabi_dsub>
 800575e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005764:	ea43 0308 	orr.w	r3, r3, r8
 8005768:	4313      	orrs	r3, r2
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	d066      	beq.n	800583e <_strtod_l+0xba6>
 8005770:	a309      	add	r3, pc, #36	; (adr r3, 8005798 <_strtod_l+0xb00>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fb f921 	bl	80009bc <__aeabi_dcmplt>
 800577a:	2800      	cmp	r0, #0
 800577c:	f47f acda 	bne.w	8005134 <_strtod_l+0x49c>
 8005780:	a307      	add	r3, pc, #28	; (adr r3, 80057a0 <_strtod_l+0xb08>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	4620      	mov	r0, r4
 8005788:	4629      	mov	r1, r5
 800578a:	f7fb f935 	bl	80009f8 <__aeabi_dcmpgt>
 800578e:	2800      	cmp	r0, #0
 8005790:	f43f af7b 	beq.w	800568a <_strtod_l+0x9f2>
 8005794:	e4ce      	b.n	8005134 <_strtod_l+0x49c>
 8005796:	bf00      	nop
 8005798:	94a03595 	.word	0x94a03595
 800579c:	3fdfffff 	.word	0x3fdfffff
 80057a0:	35afe535 	.word	0x35afe535
 80057a4:	3fe00000 	.word	0x3fe00000
 80057a8:	000fffff 	.word	0x000fffff
 80057ac:	7ff00000 	.word	0x7ff00000
 80057b0:	7fefffff 	.word	0x7fefffff
 80057b4:	3ff00000 	.word	0x3ff00000
 80057b8:	7fe00000 	.word	0x7fe00000
 80057bc:	7c9fffff 	.word	0x7c9fffff
 80057c0:	3fe00000 	.word	0x3fe00000
 80057c4:	bff00000 	.word	0xbff00000
 80057c8:	9b05      	ldr	r3, [sp, #20]
 80057ca:	b313      	cbz	r3, 8005812 <_strtod_l+0xb7a>
 80057cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80057d2:	d81e      	bhi.n	8005812 <_strtod_l+0xb7a>
 80057d4:	a326      	add	r3, pc, #152	; (adr r3, 8005870 <_strtod_l+0xbd8>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	4620      	mov	r0, r4
 80057dc:	4629      	mov	r1, r5
 80057de:	f7fb f8f7 	bl	80009d0 <__aeabi_dcmple>
 80057e2:	b190      	cbz	r0, 800580a <_strtod_l+0xb72>
 80057e4:	4629      	mov	r1, r5
 80057e6:	4620      	mov	r0, r4
 80057e8:	f7fb f94e 	bl	8000a88 <__aeabi_d2uiz>
 80057ec:	2801      	cmp	r0, #1
 80057ee:	bf38      	it	cc
 80057f0:	2001      	movcc	r0, #1
 80057f2:	f7fa fdf7 	bl	80003e4 <__aeabi_ui2d>
 80057f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057f8:	4604      	mov	r4, r0
 80057fa:	460d      	mov	r5, r1
 80057fc:	b9d3      	cbnz	r3, 8005834 <_strtod_l+0xb9c>
 80057fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005802:	9012      	str	r0, [sp, #72]	; 0x48
 8005804:	9313      	str	r3, [sp, #76]	; 0x4c
 8005806:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800580a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800580c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005810:	1a9f      	subs	r7, r3, r2
 8005812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005816:	f001 fe91 	bl	800753c <__ulp>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4630      	mov	r0, r6
 8005820:	4639      	mov	r1, r7
 8005822:	f7fa fe59 	bl	80004d8 <__aeabi_dmul>
 8005826:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800582a:	f7fa fc9f 	bl	800016c <__adddf3>
 800582e:	4680      	mov	r8, r0
 8005830:	4689      	mov	r9, r1
 8005832:	e77e      	b.n	8005732 <_strtod_l+0xa9a>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800583c:	e7e3      	b.n	8005806 <_strtod_l+0xb6e>
 800583e:	a30e      	add	r3, pc, #56	; (adr r3, 8005878 <_strtod_l+0xbe0>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f7fb f8ba 	bl	80009bc <__aeabi_dcmplt>
 8005848:	e7a1      	b.n	800578e <_strtod_l+0xaf6>
 800584a:	2300      	movs	r3, #0
 800584c:	930c      	str	r3, [sp, #48]	; 0x30
 800584e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005850:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	f7ff ba65 	b.w	8004d22 <_strtod_l+0x8a>
 8005858:	2b65      	cmp	r3, #101	; 0x65
 800585a:	f43f ab5c 	beq.w	8004f16 <_strtod_l+0x27e>
 800585e:	2b45      	cmp	r3, #69	; 0x45
 8005860:	f43f ab59 	beq.w	8004f16 <_strtod_l+0x27e>
 8005864:	2201      	movs	r2, #1
 8005866:	f7ff bb8d 	b.w	8004f84 <_strtod_l+0x2ec>
 800586a:	bf00      	nop
 800586c:	f3af 8000 	nop.w
 8005870:	ffc00000 	.word	0xffc00000
 8005874:	41dfffff 	.word	0x41dfffff
 8005878:	94a03595 	.word	0x94a03595
 800587c:	3fcfffff 	.word	0x3fcfffff

08005880 <_strtod_r>:
 8005880:	4b01      	ldr	r3, [pc, #4]	; (8005888 <_strtod_r+0x8>)
 8005882:	f7ff ba09 	b.w	8004c98 <_strtod_l>
 8005886:	bf00      	nop
 8005888:	2000007c 	.word	0x2000007c

0800588c <_strtol_l.isra.0>:
 800588c:	2b01      	cmp	r3, #1
 800588e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005892:	4686      	mov	lr, r0
 8005894:	d001      	beq.n	800589a <_strtol_l.isra.0+0xe>
 8005896:	2b24      	cmp	r3, #36	; 0x24
 8005898:	d906      	bls.n	80058a8 <_strtol_l.isra.0+0x1c>
 800589a:	f7fe faf9 	bl	8003e90 <__errno>
 800589e:	2316      	movs	r3, #22
 80058a0:	6003      	str	r3, [r0, #0]
 80058a2:	2000      	movs	r0, #0
 80058a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a8:	468c      	mov	ip, r1
 80058aa:	4e3a      	ldr	r6, [pc, #232]	; (8005994 <_strtol_l.isra.0+0x108>)
 80058ac:	4660      	mov	r0, ip
 80058ae:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80058b2:	5da5      	ldrb	r5, [r4, r6]
 80058b4:	f015 0508 	ands.w	r5, r5, #8
 80058b8:	d1f8      	bne.n	80058ac <_strtol_l.isra.0+0x20>
 80058ba:	2c2d      	cmp	r4, #45	; 0x2d
 80058bc:	d133      	bne.n	8005926 <_strtol_l.isra.0+0x9a>
 80058be:	f04f 0801 	mov.w	r8, #1
 80058c2:	f89c 4000 	ldrb.w	r4, [ip]
 80058c6:	f100 0c02 	add.w	ip, r0, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d05d      	beq.n	800598a <_strtol_l.isra.0+0xfe>
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d10c      	bne.n	80058ec <_strtol_l.isra.0+0x60>
 80058d2:	2c30      	cmp	r4, #48	; 0x30
 80058d4:	d10a      	bne.n	80058ec <_strtol_l.isra.0+0x60>
 80058d6:	f89c 0000 	ldrb.w	r0, [ip]
 80058da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80058de:	2858      	cmp	r0, #88	; 0x58
 80058e0:	d14e      	bne.n	8005980 <_strtol_l.isra.0+0xf4>
 80058e2:	2310      	movs	r3, #16
 80058e4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80058e8:	f10c 0c02 	add.w	ip, ip, #2
 80058ec:	2500      	movs	r5, #0
 80058ee:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80058f2:	3f01      	subs	r7, #1
 80058f4:	fbb7 f9f3 	udiv	r9, r7, r3
 80058f8:	4628      	mov	r0, r5
 80058fa:	fb03 7a19 	mls	sl, r3, r9, r7
 80058fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005902:	2e09      	cmp	r6, #9
 8005904:	d818      	bhi.n	8005938 <_strtol_l.isra.0+0xac>
 8005906:	4634      	mov	r4, r6
 8005908:	42a3      	cmp	r3, r4
 800590a:	dd24      	ble.n	8005956 <_strtol_l.isra.0+0xca>
 800590c:	2d00      	cmp	r5, #0
 800590e:	db1f      	blt.n	8005950 <_strtol_l.isra.0+0xc4>
 8005910:	4581      	cmp	r9, r0
 8005912:	d31d      	bcc.n	8005950 <_strtol_l.isra.0+0xc4>
 8005914:	d101      	bne.n	800591a <_strtol_l.isra.0+0x8e>
 8005916:	45a2      	cmp	sl, r4
 8005918:	db1a      	blt.n	8005950 <_strtol_l.isra.0+0xc4>
 800591a:	2501      	movs	r5, #1
 800591c:	fb00 4003 	mla	r0, r0, r3, r4
 8005920:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005924:	e7eb      	b.n	80058fe <_strtol_l.isra.0+0x72>
 8005926:	2c2b      	cmp	r4, #43	; 0x2b
 8005928:	bf08      	it	eq
 800592a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800592e:	46a8      	mov	r8, r5
 8005930:	bf08      	it	eq
 8005932:	f100 0c02 	addeq.w	ip, r0, #2
 8005936:	e7c8      	b.n	80058ca <_strtol_l.isra.0+0x3e>
 8005938:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800593c:	2e19      	cmp	r6, #25
 800593e:	d801      	bhi.n	8005944 <_strtol_l.isra.0+0xb8>
 8005940:	3c37      	subs	r4, #55	; 0x37
 8005942:	e7e1      	b.n	8005908 <_strtol_l.isra.0+0x7c>
 8005944:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005948:	2e19      	cmp	r6, #25
 800594a:	d804      	bhi.n	8005956 <_strtol_l.isra.0+0xca>
 800594c:	3c57      	subs	r4, #87	; 0x57
 800594e:	e7db      	b.n	8005908 <_strtol_l.isra.0+0x7c>
 8005950:	f04f 35ff 	mov.w	r5, #4294967295
 8005954:	e7e4      	b.n	8005920 <_strtol_l.isra.0+0x94>
 8005956:	2d00      	cmp	r5, #0
 8005958:	da08      	bge.n	800596c <_strtol_l.isra.0+0xe0>
 800595a:	2322      	movs	r3, #34	; 0x22
 800595c:	4638      	mov	r0, r7
 800595e:	f8ce 3000 	str.w	r3, [lr]
 8005962:	2a00      	cmp	r2, #0
 8005964:	d09e      	beq.n	80058a4 <_strtol_l.isra.0+0x18>
 8005966:	f10c 31ff 	add.w	r1, ip, #4294967295
 800596a:	e007      	b.n	800597c <_strtol_l.isra.0+0xf0>
 800596c:	f1b8 0f00 	cmp.w	r8, #0
 8005970:	d000      	beq.n	8005974 <_strtol_l.isra.0+0xe8>
 8005972:	4240      	negs	r0, r0
 8005974:	2a00      	cmp	r2, #0
 8005976:	d095      	beq.n	80058a4 <_strtol_l.isra.0+0x18>
 8005978:	2d00      	cmp	r5, #0
 800597a:	d1f4      	bne.n	8005966 <_strtol_l.isra.0+0xda>
 800597c:	6011      	str	r1, [r2, #0]
 800597e:	e791      	b.n	80058a4 <_strtol_l.isra.0+0x18>
 8005980:	2430      	movs	r4, #48	; 0x30
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1b2      	bne.n	80058ec <_strtol_l.isra.0+0x60>
 8005986:	2308      	movs	r3, #8
 8005988:	e7b0      	b.n	80058ec <_strtol_l.isra.0+0x60>
 800598a:	2c30      	cmp	r4, #48	; 0x30
 800598c:	d0a3      	beq.n	80058d6 <_strtol_l.isra.0+0x4a>
 800598e:	230a      	movs	r3, #10
 8005990:	e7ac      	b.n	80058ec <_strtol_l.isra.0+0x60>
 8005992:	bf00      	nop
 8005994:	08009066 	.word	0x08009066

08005998 <_strtol_r>:
 8005998:	f7ff bf78 	b.w	800588c <_strtol_l.isra.0>

0800599c <__utoa>:
 800599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599e:	b08b      	sub	sp, #44	; 0x2c
 80059a0:	4605      	mov	r5, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	466e      	mov	r6, sp
 80059a6:	4c1d      	ldr	r4, [pc, #116]	; (8005a1c <__utoa+0x80>)
 80059a8:	f104 0c20 	add.w	ip, r4, #32
 80059ac:	4637      	mov	r7, r6
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	6861      	ldr	r1, [r4, #4]
 80059b2:	3408      	adds	r4, #8
 80059b4:	c703      	stmia	r7!, {r0, r1}
 80059b6:	4564      	cmp	r4, ip
 80059b8:	463e      	mov	r6, r7
 80059ba:	d1f7      	bne.n	80059ac <__utoa+0x10>
 80059bc:	7921      	ldrb	r1, [r4, #4]
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	7139      	strb	r1, [r7, #4]
 80059c2:	1e91      	subs	r1, r2, #2
 80059c4:	2922      	cmp	r1, #34	; 0x22
 80059c6:	6038      	str	r0, [r7, #0]
 80059c8:	f04f 0100 	mov.w	r1, #0
 80059cc:	d904      	bls.n	80059d8 <__utoa+0x3c>
 80059ce:	7019      	strb	r1, [r3, #0]
 80059d0:	460b      	mov	r3, r1
 80059d2:	4618      	mov	r0, r3
 80059d4:	b00b      	add	sp, #44	; 0x2c
 80059d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d8:	1e58      	subs	r0, r3, #1
 80059da:	4684      	mov	ip, r0
 80059dc:	fbb5 f7f2 	udiv	r7, r5, r2
 80059e0:	fb02 5617 	mls	r6, r2, r7, r5
 80059e4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80059e8:	4476      	add	r6, lr
 80059ea:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80059ee:	460c      	mov	r4, r1
 80059f0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80059f4:	462e      	mov	r6, r5
 80059f6:	42b2      	cmp	r2, r6
 80059f8:	463d      	mov	r5, r7
 80059fa:	f101 0101 	add.w	r1, r1, #1
 80059fe:	d9ed      	bls.n	80059dc <__utoa+0x40>
 8005a00:	2200      	movs	r2, #0
 8005a02:	545a      	strb	r2, [r3, r1]
 8005a04:	1919      	adds	r1, r3, r4
 8005a06:	1aa5      	subs	r5, r4, r2
 8005a08:	42aa      	cmp	r2, r5
 8005a0a:	dae2      	bge.n	80059d2 <__utoa+0x36>
 8005a0c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005a10:	780e      	ldrb	r6, [r1, #0]
 8005a12:	3201      	adds	r2, #1
 8005a14:	7006      	strb	r6, [r0, #0]
 8005a16:	f801 5901 	strb.w	r5, [r1], #-1
 8005a1a:	e7f4      	b.n	8005a06 <__utoa+0x6a>
 8005a1c:	08009040 	.word	0x08009040

08005a20 <quorem>:
 8005a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	6903      	ldr	r3, [r0, #16]
 8005a26:	690c      	ldr	r4, [r1, #16]
 8005a28:	4607      	mov	r7, r0
 8005a2a:	42a3      	cmp	r3, r4
 8005a2c:	f2c0 8083 	blt.w	8005b36 <quorem+0x116>
 8005a30:	3c01      	subs	r4, #1
 8005a32:	f100 0514 	add.w	r5, r0, #20
 8005a36:	f101 0814 	add.w	r8, r1, #20
 8005a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a58:	d332      	bcc.n	8005ac0 <quorem+0xa0>
 8005a5a:	f04f 0e00 	mov.w	lr, #0
 8005a5e:	4640      	mov	r0, r8
 8005a60:	46ac      	mov	ip, r5
 8005a62:	46f2      	mov	sl, lr
 8005a64:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a68:	b293      	uxth	r3, r2
 8005a6a:	fb06 e303 	mla	r3, r6, r3, lr
 8005a6e:	0c12      	lsrs	r2, r2, #16
 8005a70:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a74:	fb06 e202 	mla	r2, r6, r2, lr
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	ebaa 0303 	sub.w	r3, sl, r3
 8005a7e:	f8dc a000 	ldr.w	sl, [ip]
 8005a82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a86:	fa1f fa8a 	uxth.w	sl, sl
 8005a8a:	4453      	add	r3, sl
 8005a8c:	fa1f fa82 	uxth.w	sl, r2
 8005a90:	f8dc 2000 	ldr.w	r2, [ip]
 8005a94:	4581      	cmp	r9, r0
 8005a96:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005a9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aa4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005aa8:	f84c 3b04 	str.w	r3, [ip], #4
 8005aac:	d2da      	bcs.n	8005a64 <quorem+0x44>
 8005aae:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ab2:	b92b      	cbnz	r3, 8005ac0 <quorem+0xa0>
 8005ab4:	9b01      	ldr	r3, [sp, #4]
 8005ab6:	3b04      	subs	r3, #4
 8005ab8:	429d      	cmp	r5, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	d32f      	bcc.n	8005b1e <quorem+0xfe>
 8005abe:	613c      	str	r4, [r7, #16]
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f001 fc8f 	bl	80073e4 <__mcmp>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	db25      	blt.n	8005b16 <quorem+0xf6>
 8005aca:	4628      	mov	r0, r5
 8005acc:	f04f 0c00 	mov.w	ip, #0
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	f858 1b04 	ldr.w	r1, [r8], #4
 8005ad6:	f8d0 e000 	ldr.w	lr, [r0]
 8005ada:	b28b      	uxth	r3, r1
 8005adc:	ebac 0303 	sub.w	r3, ip, r3
 8005ae0:	fa1f f28e 	uxth.w	r2, lr
 8005ae4:	4413      	add	r3, r2
 8005ae6:	0c0a      	lsrs	r2, r1, #16
 8005ae8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005aec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005af6:	45c1      	cmp	r9, r8
 8005af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005afc:	f840 3b04 	str.w	r3, [r0], #4
 8005b00:	d2e7      	bcs.n	8005ad2 <quorem+0xb2>
 8005b02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b0a:	b922      	cbnz	r2, 8005b16 <quorem+0xf6>
 8005b0c:	3b04      	subs	r3, #4
 8005b0e:	429d      	cmp	r5, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	d30a      	bcc.n	8005b2a <quorem+0x10a>
 8005b14:	613c      	str	r4, [r7, #16]
 8005b16:	4630      	mov	r0, r6
 8005b18:	b003      	add	sp, #12
 8005b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	3b04      	subs	r3, #4
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	d1cb      	bne.n	8005abe <quorem+0x9e>
 8005b26:	3c01      	subs	r4, #1
 8005b28:	e7c6      	b.n	8005ab8 <quorem+0x98>
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	3b04      	subs	r3, #4
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	d1f0      	bne.n	8005b14 <quorem+0xf4>
 8005b32:	3c01      	subs	r4, #1
 8005b34:	e7eb      	b.n	8005b0e <quorem+0xee>
 8005b36:	2000      	movs	r0, #0
 8005b38:	e7ee      	b.n	8005b18 <quorem+0xf8>
 8005b3a:	0000      	movs	r0, r0
 8005b3c:	0000      	movs	r0, r0
	...

08005b40 <_dtoa_r>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	4616      	mov	r6, r2
 8005b46:	461f      	mov	r7, r3
 8005b48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b4a:	b099      	sub	sp, #100	; 0x64
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005b52:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005b56:	b974      	cbnz	r4, 8005b76 <_dtoa_r+0x36>
 8005b58:	2010      	movs	r0, #16
 8005b5a:	f001 f949 	bl	8006df0 <malloc>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	6268      	str	r0, [r5, #36]	; 0x24
 8005b62:	b920      	cbnz	r0, 8005b6e <_dtoa_r+0x2e>
 8005b64:	21ea      	movs	r1, #234	; 0xea
 8005b66:	4bae      	ldr	r3, [pc, #696]	; (8005e20 <_dtoa_r+0x2e0>)
 8005b68:	48ae      	ldr	r0, [pc, #696]	; (8005e24 <_dtoa_r+0x2e4>)
 8005b6a:	f002 f875 	bl	8007c58 <__assert_func>
 8005b6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b72:	6004      	str	r4, [r0, #0]
 8005b74:	60c4      	str	r4, [r0, #12]
 8005b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b78:	6819      	ldr	r1, [r3, #0]
 8005b7a:	b151      	cbz	r1, 8005b92 <_dtoa_r+0x52>
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4093      	lsls	r3, r2
 8005b82:	604a      	str	r2, [r1, #4]
 8005b84:	608b      	str	r3, [r1, #8]
 8005b86:	4628      	mov	r0, r5
 8005b88:	f001 f9a8 	bl	8006edc <_Bfree>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	1e3b      	subs	r3, r7, #0
 8005b94:	bfaf      	iteee	ge
 8005b96:	2300      	movge	r3, #0
 8005b98:	2201      	movlt	r2, #1
 8005b9a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b9e:	9305      	strlt	r3, [sp, #20]
 8005ba0:	bfa8      	it	ge
 8005ba2:	f8c8 3000 	strge.w	r3, [r8]
 8005ba6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005baa:	4b9f      	ldr	r3, [pc, #636]	; (8005e28 <_dtoa_r+0x2e8>)
 8005bac:	bfb8      	it	lt
 8005bae:	f8c8 2000 	strlt.w	r2, [r8]
 8005bb2:	ea33 0309 	bics.w	r3, r3, r9
 8005bb6:	d119      	bne.n	8005bec <_dtoa_r+0xac>
 8005bb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bc4:	4333      	orrs	r3, r6
 8005bc6:	f000 8580 	beq.w	80066ca <_dtoa_r+0xb8a>
 8005bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bcc:	b953      	cbnz	r3, 8005be4 <_dtoa_r+0xa4>
 8005bce:	4b97      	ldr	r3, [pc, #604]	; (8005e2c <_dtoa_r+0x2ec>)
 8005bd0:	e022      	b.n	8005c18 <_dtoa_r+0xd8>
 8005bd2:	4b97      	ldr	r3, [pc, #604]	; (8005e30 <_dtoa_r+0x2f0>)
 8005bd4:	9308      	str	r3, [sp, #32]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	9808      	ldr	r0, [sp, #32]
 8005bde:	b019      	add	sp, #100	; 0x64
 8005be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be4:	4b91      	ldr	r3, [pc, #580]	; (8005e2c <_dtoa_r+0x2ec>)
 8005be6:	9308      	str	r3, [sp, #32]
 8005be8:	3303      	adds	r3, #3
 8005bea:	e7f5      	b.n	8005bd8 <_dtoa_r+0x98>
 8005bec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005bf0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005bf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f7fa fed4 	bl	80009a8 <__aeabi_dcmpeq>
 8005c00:	4680      	mov	r8, r0
 8005c02:	b158      	cbz	r0, 8005c1c <_dtoa_r+0xdc>
 8005c04:	2301      	movs	r3, #1
 8005c06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8559 	beq.w	80066c4 <_dtoa_r+0xb84>
 8005c12:	4888      	ldr	r0, [pc, #544]	; (8005e34 <_dtoa_r+0x2f4>)
 8005c14:	6018      	str	r0, [r3, #0]
 8005c16:	1e43      	subs	r3, r0, #1
 8005c18:	9308      	str	r3, [sp, #32]
 8005c1a:	e7df      	b.n	8005bdc <_dtoa_r+0x9c>
 8005c1c:	ab16      	add	r3, sp, #88	; 0x58
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	ab17      	add	r3, sp, #92	; 0x5c
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4628      	mov	r0, r5
 8005c26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c2a:	f001 fd01 	bl	8007630 <__d2b>
 8005c2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005c32:	4682      	mov	sl, r0
 8005c34:	2c00      	cmp	r4, #0
 8005c36:	d07e      	beq.n	8005d36 <_dtoa_r+0x1f6>
 8005c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c3e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005c4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005c4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005c52:	2200      	movs	r2, #0
 8005c54:	4b78      	ldr	r3, [pc, #480]	; (8005e38 <_dtoa_r+0x2f8>)
 8005c56:	f7fa fa87 	bl	8000168 <__aeabi_dsub>
 8005c5a:	a36b      	add	r3, pc, #428	; (adr r3, 8005e08 <_dtoa_r+0x2c8>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f7fa fc3a 	bl	80004d8 <__aeabi_dmul>
 8005c64:	a36a      	add	r3, pc, #424	; (adr r3, 8005e10 <_dtoa_r+0x2d0>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f7fa fa7f 	bl	800016c <__adddf3>
 8005c6e:	4606      	mov	r6, r0
 8005c70:	4620      	mov	r0, r4
 8005c72:	460f      	mov	r7, r1
 8005c74:	f7fa fbc6 	bl	8000404 <__aeabi_i2d>
 8005c78:	a367      	add	r3, pc, #412	; (adr r3, 8005e18 <_dtoa_r+0x2d8>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fc2b 	bl	80004d8 <__aeabi_dmul>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4630      	mov	r0, r6
 8005c88:	4639      	mov	r1, r7
 8005c8a:	f7fa fa6f 	bl	800016c <__adddf3>
 8005c8e:	4606      	mov	r6, r0
 8005c90:	460f      	mov	r7, r1
 8005c92:	f7fa fed1 	bl	8000a38 <__aeabi_d2iz>
 8005c96:	2200      	movs	r2, #0
 8005c98:	4681      	mov	r9, r0
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa fe8c 	bl	80009bc <__aeabi_dcmplt>
 8005ca4:	b148      	cbz	r0, 8005cba <_dtoa_r+0x17a>
 8005ca6:	4648      	mov	r0, r9
 8005ca8:	f7fa fbac 	bl	8000404 <__aeabi_i2d>
 8005cac:	4632      	mov	r2, r6
 8005cae:	463b      	mov	r3, r7
 8005cb0:	f7fa fe7a 	bl	80009a8 <__aeabi_dcmpeq>
 8005cb4:	b908      	cbnz	r0, 8005cba <_dtoa_r+0x17a>
 8005cb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8005cba:	f1b9 0f16 	cmp.w	r9, #22
 8005cbe:	d857      	bhi.n	8005d70 <_dtoa_r+0x230>
 8005cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cc4:	4b5d      	ldr	r3, [pc, #372]	; (8005e3c <_dtoa_r+0x2fc>)
 8005cc6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fe75 	bl	80009bc <__aeabi_dcmplt>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d04e      	beq.n	8005d74 <_dtoa_r+0x234>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ce0:	1b1c      	subs	r4, r3, r4
 8005ce2:	1e63      	subs	r3, r4, #1
 8005ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce6:	bf49      	itett	mi
 8005ce8:	f1c4 0301 	rsbmi	r3, r4, #1
 8005cec:	2300      	movpl	r3, #0
 8005cee:	9306      	strmi	r3, [sp, #24]
 8005cf0:	2300      	movmi	r3, #0
 8005cf2:	bf54      	ite	pl
 8005cf4:	9306      	strpl	r3, [sp, #24]
 8005cf6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005cf8:	f1b9 0f00 	cmp.w	r9, #0
 8005cfc:	db3c      	blt.n	8005d78 <_dtoa_r+0x238>
 8005cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d00:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005d04:	444b      	add	r3, r9
 8005d06:	9309      	str	r3, [sp, #36]	; 0x24
 8005d08:	2300      	movs	r3, #0
 8005d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d0e:	2b09      	cmp	r3, #9
 8005d10:	d86c      	bhi.n	8005dec <_dtoa_r+0x2ac>
 8005d12:	2b05      	cmp	r3, #5
 8005d14:	bfc4      	itt	gt
 8005d16:	3b04      	subgt	r3, #4
 8005d18:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005d1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d1c:	bfc8      	it	gt
 8005d1e:	2400      	movgt	r4, #0
 8005d20:	f1a3 0302 	sub.w	r3, r3, #2
 8005d24:	bfd8      	it	le
 8005d26:	2401      	movle	r4, #1
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	f200 808b 	bhi.w	8005e44 <_dtoa_r+0x304>
 8005d2e:	e8df f003 	tbb	[pc, r3]
 8005d32:	4f2d      	.short	0x4f2d
 8005d34:	5b4d      	.short	0x5b4d
 8005d36:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005d3a:	441c      	add	r4, r3
 8005d3c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	bfc3      	ittte	gt
 8005d44:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d48:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005d4c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005d50:	f1c3 0320 	rsble	r3, r3, #32
 8005d54:	bfc6      	itte	gt
 8005d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d5a:	4318      	orrgt	r0, r3
 8005d5c:	fa06 f003 	lslle.w	r0, r6, r3
 8005d60:	f7fa fb40 	bl	80003e4 <__aeabi_ui2d>
 8005d64:	2301      	movs	r3, #1
 8005d66:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005d6a:	3c01      	subs	r4, #1
 8005d6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d6e:	e770      	b.n	8005c52 <_dtoa_r+0x112>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e7b3      	b.n	8005cdc <_dtoa_r+0x19c>
 8005d74:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d76:	e7b2      	b.n	8005cde <_dtoa_r+0x19e>
 8005d78:	9b06      	ldr	r3, [sp, #24]
 8005d7a:	eba3 0309 	sub.w	r3, r3, r9
 8005d7e:	9306      	str	r3, [sp, #24]
 8005d80:	f1c9 0300 	rsb	r3, r9, #0
 8005d84:	930a      	str	r3, [sp, #40]	; 0x28
 8005d86:	2300      	movs	r3, #0
 8005d88:	930e      	str	r3, [sp, #56]	; 0x38
 8005d8a:	e7bf      	b.n	8005d0c <_dtoa_r+0x1cc>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	dc59      	bgt.n	8005e4a <_dtoa_r+0x30a>
 8005d96:	f04f 0b01 	mov.w	fp, #1
 8005d9a:	465b      	mov	r3, fp
 8005d9c:	f8cd b008 	str.w	fp, [sp, #8]
 8005da0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005da4:	2200      	movs	r2, #0
 8005da6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005da8:	6042      	str	r2, [r0, #4]
 8005daa:	2204      	movs	r2, #4
 8005dac:	f102 0614 	add.w	r6, r2, #20
 8005db0:	429e      	cmp	r6, r3
 8005db2:	6841      	ldr	r1, [r0, #4]
 8005db4:	d94f      	bls.n	8005e56 <_dtoa_r+0x316>
 8005db6:	4628      	mov	r0, r5
 8005db8:	f001 f850 	bl	8006e5c <_Balloc>
 8005dbc:	9008      	str	r0, [sp, #32]
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d14d      	bne.n	8005e5e <_dtoa_r+0x31e>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <_dtoa_r+0x300>)
 8005dca:	e6cd      	b.n	8005b68 <_dtoa_r+0x28>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e7de      	b.n	8005d8e <_dtoa_r+0x24e>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dd6:	eb09 0b03 	add.w	fp, r9, r3
 8005dda:	f10b 0301 	add.w	r3, fp, #1
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	9302      	str	r3, [sp, #8]
 8005de2:	bfb8      	it	lt
 8005de4:	2301      	movlt	r3, #1
 8005de6:	e7dd      	b.n	8005da4 <_dtoa_r+0x264>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e7f2      	b.n	8005dd2 <_dtoa_r+0x292>
 8005dec:	2401      	movs	r4, #1
 8005dee:	2300      	movs	r3, #0
 8005df0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005df2:	9322      	str	r3, [sp, #136]	; 0x88
 8005df4:	f04f 3bff 	mov.w	fp, #4294967295
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2312      	movs	r3, #18
 8005dfc:	f8cd b008 	str.w	fp, [sp, #8]
 8005e00:	9223      	str	r2, [sp, #140]	; 0x8c
 8005e02:	e7cf      	b.n	8005da4 <_dtoa_r+0x264>
 8005e04:	f3af 8000 	nop.w
 8005e08:	636f4361 	.word	0x636f4361
 8005e0c:	3fd287a7 	.word	0x3fd287a7
 8005e10:	8b60c8b3 	.word	0x8b60c8b3
 8005e14:	3fc68a28 	.word	0x3fc68a28
 8005e18:	509f79fb 	.word	0x509f79fb
 8005e1c:	3fd34413 	.word	0x3fd34413
 8005e20:	08009173 	.word	0x08009173
 8005e24:	0800918a 	.word	0x0800918a
 8005e28:	7ff00000 	.word	0x7ff00000
 8005e2c:	0800916f 	.word	0x0800916f
 8005e30:	08009166 	.word	0x08009166
 8005e34:	08008fc5 	.word	0x08008fc5
 8005e38:	3ff80000 	.word	0x3ff80000
 8005e3c:	08009300 	.word	0x08009300
 8005e40:	080091e9 	.word	0x080091e9
 8005e44:	2301      	movs	r3, #1
 8005e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e48:	e7d4      	b.n	8005df4 <_dtoa_r+0x2b4>
 8005e4a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005e4e:	465b      	mov	r3, fp
 8005e50:	f8cd b008 	str.w	fp, [sp, #8]
 8005e54:	e7a6      	b.n	8005da4 <_dtoa_r+0x264>
 8005e56:	3101      	adds	r1, #1
 8005e58:	6041      	str	r1, [r0, #4]
 8005e5a:	0052      	lsls	r2, r2, #1
 8005e5c:	e7a6      	b.n	8005dac <_dtoa_r+0x26c>
 8005e5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e60:	9a08      	ldr	r2, [sp, #32]
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	9b02      	ldr	r3, [sp, #8]
 8005e66:	2b0e      	cmp	r3, #14
 8005e68:	f200 80a8 	bhi.w	8005fbc <_dtoa_r+0x47c>
 8005e6c:	2c00      	cmp	r4, #0
 8005e6e:	f000 80a5 	beq.w	8005fbc <_dtoa_r+0x47c>
 8005e72:	f1b9 0f00 	cmp.w	r9, #0
 8005e76:	dd34      	ble.n	8005ee2 <_dtoa_r+0x3a2>
 8005e78:	4a9a      	ldr	r2, [pc, #616]	; (80060e4 <_dtoa_r+0x5a4>)
 8005e7a:	f009 030f 	and.w	r3, r9, #15
 8005e7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e82:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005e86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e8e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005e92:	d016      	beq.n	8005ec2 <_dtoa_r+0x382>
 8005e94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e98:	4b93      	ldr	r3, [pc, #588]	; (80060e8 <_dtoa_r+0x5a8>)
 8005e9a:	2703      	movs	r7, #3
 8005e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ea0:	f7fa fc44 	bl	800072c <__aeabi_ddiv>
 8005ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ea8:	f004 040f 	and.w	r4, r4, #15
 8005eac:	4e8e      	ldr	r6, [pc, #568]	; (80060e8 <_dtoa_r+0x5a8>)
 8005eae:	b954      	cbnz	r4, 8005ec6 <_dtoa_r+0x386>
 8005eb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005eb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eb8:	f7fa fc38 	bl	800072c <__aeabi_ddiv>
 8005ebc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ec0:	e029      	b.n	8005f16 <_dtoa_r+0x3d6>
 8005ec2:	2702      	movs	r7, #2
 8005ec4:	e7f2      	b.n	8005eac <_dtoa_r+0x36c>
 8005ec6:	07e1      	lsls	r1, r4, #31
 8005ec8:	d508      	bpl.n	8005edc <_dtoa_r+0x39c>
 8005eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ece:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ed2:	f7fa fb01 	bl	80004d8 <__aeabi_dmul>
 8005ed6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eda:	3701      	adds	r7, #1
 8005edc:	1064      	asrs	r4, r4, #1
 8005ede:	3608      	adds	r6, #8
 8005ee0:	e7e5      	b.n	8005eae <_dtoa_r+0x36e>
 8005ee2:	f000 80a5 	beq.w	8006030 <_dtoa_r+0x4f0>
 8005ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005eea:	f1c9 0400 	rsb	r4, r9, #0
 8005eee:	4b7d      	ldr	r3, [pc, #500]	; (80060e4 <_dtoa_r+0x5a4>)
 8005ef0:	f004 020f 	and.w	r2, r4, #15
 8005ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa faec 	bl	80004d8 <__aeabi_dmul>
 8005f00:	2702      	movs	r7, #2
 8005f02:	2300      	movs	r3, #0
 8005f04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f08:	4e77      	ldr	r6, [pc, #476]	; (80060e8 <_dtoa_r+0x5a8>)
 8005f0a:	1124      	asrs	r4, r4, #4
 8005f0c:	2c00      	cmp	r4, #0
 8005f0e:	f040 8084 	bne.w	800601a <_dtoa_r+0x4da>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1d2      	bne.n	8005ebc <_dtoa_r+0x37c>
 8005f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 808b 	beq.w	8006034 <_dtoa_r+0x4f4>
 8005f1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005f26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4b6f      	ldr	r3, [pc, #444]	; (80060ec <_dtoa_r+0x5ac>)
 8005f2e:	f7fa fd45 	bl	80009bc <__aeabi_dcmplt>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d07e      	beq.n	8006034 <_dtoa_r+0x4f4>
 8005f36:	9b02      	ldr	r3, [sp, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d07b      	beq.n	8006034 <_dtoa_r+0x4f4>
 8005f3c:	f1bb 0f00 	cmp.w	fp, #0
 8005f40:	dd38      	ble.n	8005fb4 <_dtoa_r+0x474>
 8005f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f46:	2200      	movs	r2, #0
 8005f48:	4b69      	ldr	r3, [pc, #420]	; (80060f0 <_dtoa_r+0x5b0>)
 8005f4a:	f7fa fac5 	bl	80004d8 <__aeabi_dmul>
 8005f4e:	465c      	mov	r4, fp
 8005f50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f54:	f109 38ff 	add.w	r8, r9, #4294967295
 8005f58:	3701      	adds	r7, #1
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	f7fa fa52 	bl	8000404 <__aeabi_i2d>
 8005f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f64:	f7fa fab8 	bl	80004d8 <__aeabi_dmul>
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4b62      	ldr	r3, [pc, #392]	; (80060f4 <_dtoa_r+0x5b4>)
 8005f6c:	f7fa f8fe 	bl	800016c <__adddf3>
 8005f70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005f74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f78:	9611      	str	r6, [sp, #68]	; 0x44
 8005f7a:	2c00      	cmp	r4, #0
 8005f7c:	d15d      	bne.n	800603a <_dtoa_r+0x4fa>
 8005f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f82:	2200      	movs	r2, #0
 8005f84:	4b5c      	ldr	r3, [pc, #368]	; (80060f8 <_dtoa_r+0x5b8>)
 8005f86:	f7fa f8ef 	bl	8000168 <__aeabi_dsub>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f92:	4633      	mov	r3, r6
 8005f94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f96:	f7fa fd2f 	bl	80009f8 <__aeabi_dcmpgt>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	f040 829e 	bne.w	80064dc <_dtoa_r+0x99c>
 8005fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fa6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005faa:	f7fa fd07 	bl	80009bc <__aeabi_dcmplt>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	f040 8292 	bne.w	80064d8 <_dtoa_r+0x998>
 8005fb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005fb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005fbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f2c0 8153 	blt.w	800626a <_dtoa_r+0x72a>
 8005fc4:	f1b9 0f0e 	cmp.w	r9, #14
 8005fc8:	f300 814f 	bgt.w	800626a <_dtoa_r+0x72a>
 8005fcc:	4b45      	ldr	r3, [pc, #276]	; (80060e4 <_dtoa_r+0x5a4>)
 8005fce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005fd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fd6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005fda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f280 80db 	bge.w	8006198 <_dtoa_r+0x658>
 8005fe2:	9b02      	ldr	r3, [sp, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f300 80d7 	bgt.w	8006198 <_dtoa_r+0x658>
 8005fea:	f040 8274 	bne.w	80064d6 <_dtoa_r+0x996>
 8005fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	4b40      	ldr	r3, [pc, #256]	; (80060f8 <_dtoa_r+0x5b8>)
 8005ff6:	f7fa fa6f 	bl	80004d8 <__aeabi_dmul>
 8005ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffe:	f7fa fcf1 	bl	80009e4 <__aeabi_dcmpge>
 8006002:	9c02      	ldr	r4, [sp, #8]
 8006004:	4626      	mov	r6, r4
 8006006:	2800      	cmp	r0, #0
 8006008:	f040 824a 	bne.w	80064a0 <_dtoa_r+0x960>
 800600c:	2331      	movs	r3, #49	; 0x31
 800600e:	9f08      	ldr	r7, [sp, #32]
 8006010:	f109 0901 	add.w	r9, r9, #1
 8006014:	f807 3b01 	strb.w	r3, [r7], #1
 8006018:	e246      	b.n	80064a8 <_dtoa_r+0x968>
 800601a:	07e2      	lsls	r2, r4, #31
 800601c:	d505      	bpl.n	800602a <_dtoa_r+0x4ea>
 800601e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006022:	f7fa fa59 	bl	80004d8 <__aeabi_dmul>
 8006026:	2301      	movs	r3, #1
 8006028:	3701      	adds	r7, #1
 800602a:	1064      	asrs	r4, r4, #1
 800602c:	3608      	adds	r6, #8
 800602e:	e76d      	b.n	8005f0c <_dtoa_r+0x3cc>
 8006030:	2702      	movs	r7, #2
 8006032:	e770      	b.n	8005f16 <_dtoa_r+0x3d6>
 8006034:	46c8      	mov	r8, r9
 8006036:	9c02      	ldr	r4, [sp, #8]
 8006038:	e78f      	b.n	8005f5a <_dtoa_r+0x41a>
 800603a:	9908      	ldr	r1, [sp, #32]
 800603c:	4b29      	ldr	r3, [pc, #164]	; (80060e4 <_dtoa_r+0x5a4>)
 800603e:	4421      	add	r1, r4
 8006040:	9112      	str	r1, [sp, #72]	; 0x48
 8006042:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006044:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006048:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800604c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006050:	2900      	cmp	r1, #0
 8006052:	d055      	beq.n	8006100 <_dtoa_r+0x5c0>
 8006054:	2000      	movs	r0, #0
 8006056:	4929      	ldr	r1, [pc, #164]	; (80060fc <_dtoa_r+0x5bc>)
 8006058:	f7fa fb68 	bl	800072c <__aeabi_ddiv>
 800605c:	463b      	mov	r3, r7
 800605e:	4632      	mov	r2, r6
 8006060:	f7fa f882 	bl	8000168 <__aeabi_dsub>
 8006064:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006068:	9f08      	ldr	r7, [sp, #32]
 800606a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800606e:	f7fa fce3 	bl	8000a38 <__aeabi_d2iz>
 8006072:	4604      	mov	r4, r0
 8006074:	f7fa f9c6 	bl	8000404 <__aeabi_i2d>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006080:	f7fa f872 	bl	8000168 <__aeabi_dsub>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	3430      	adds	r4, #48	; 0x30
 800608a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800608e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006092:	f807 4b01 	strb.w	r4, [r7], #1
 8006096:	f7fa fc91 	bl	80009bc <__aeabi_dcmplt>
 800609a:	2800      	cmp	r0, #0
 800609c:	d174      	bne.n	8006188 <_dtoa_r+0x648>
 800609e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060a2:	2000      	movs	r0, #0
 80060a4:	4911      	ldr	r1, [pc, #68]	; (80060ec <_dtoa_r+0x5ac>)
 80060a6:	f7fa f85f 	bl	8000168 <__aeabi_dsub>
 80060aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060ae:	f7fa fc85 	bl	80009bc <__aeabi_dcmplt>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	f040 80b6 	bne.w	8006224 <_dtoa_r+0x6e4>
 80060b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060ba:	429f      	cmp	r7, r3
 80060bc:	f43f af7a 	beq.w	8005fb4 <_dtoa_r+0x474>
 80060c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060c4:	2200      	movs	r2, #0
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <_dtoa_r+0x5b0>)
 80060c8:	f7fa fa06 	bl	80004d8 <__aeabi_dmul>
 80060cc:	2200      	movs	r2, #0
 80060ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d6:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <_dtoa_r+0x5b0>)
 80060d8:	f7fa f9fe 	bl	80004d8 <__aeabi_dmul>
 80060dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060e0:	e7c3      	b.n	800606a <_dtoa_r+0x52a>
 80060e2:	bf00      	nop
 80060e4:	08009300 	.word	0x08009300
 80060e8:	080092d8 	.word	0x080092d8
 80060ec:	3ff00000 	.word	0x3ff00000
 80060f0:	40240000 	.word	0x40240000
 80060f4:	401c0000 	.word	0x401c0000
 80060f8:	40140000 	.word	0x40140000
 80060fc:	3fe00000 	.word	0x3fe00000
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	f7fa f9e8 	bl	80004d8 <__aeabi_dmul>
 8006108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800610a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800610e:	9c08      	ldr	r4, [sp, #32]
 8006110:	9314      	str	r3, [sp, #80]	; 0x50
 8006112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006116:	f7fa fc8f 	bl	8000a38 <__aeabi_d2iz>
 800611a:	9015      	str	r0, [sp, #84]	; 0x54
 800611c:	f7fa f972 	bl	8000404 <__aeabi_i2d>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006128:	f7fa f81e 	bl	8000168 <__aeabi_dsub>
 800612c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800612e:	4606      	mov	r6, r0
 8006130:	3330      	adds	r3, #48	; 0x30
 8006132:	f804 3b01 	strb.w	r3, [r4], #1
 8006136:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006138:	460f      	mov	r7, r1
 800613a:	429c      	cmp	r4, r3
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	d124      	bne.n	800618c <_dtoa_r+0x64c>
 8006142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006146:	4bb3      	ldr	r3, [pc, #716]	; (8006414 <_dtoa_r+0x8d4>)
 8006148:	f7fa f810 	bl	800016c <__adddf3>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4630      	mov	r0, r6
 8006152:	4639      	mov	r1, r7
 8006154:	f7fa fc50 	bl	80009f8 <__aeabi_dcmpgt>
 8006158:	2800      	cmp	r0, #0
 800615a:	d162      	bne.n	8006222 <_dtoa_r+0x6e2>
 800615c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006160:	2000      	movs	r0, #0
 8006162:	49ac      	ldr	r1, [pc, #688]	; (8006414 <_dtoa_r+0x8d4>)
 8006164:	f7fa f800 	bl	8000168 <__aeabi_dsub>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7fa fc24 	bl	80009bc <__aeabi_dcmplt>
 8006174:	2800      	cmp	r0, #0
 8006176:	f43f af1d 	beq.w	8005fb4 <_dtoa_r+0x474>
 800617a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800617c:	1e7b      	subs	r3, r7, #1
 800617e:	9314      	str	r3, [sp, #80]	; 0x50
 8006180:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006184:	2b30      	cmp	r3, #48	; 0x30
 8006186:	d0f8      	beq.n	800617a <_dtoa_r+0x63a>
 8006188:	46c1      	mov	r9, r8
 800618a:	e03a      	b.n	8006202 <_dtoa_r+0x6c2>
 800618c:	4ba2      	ldr	r3, [pc, #648]	; (8006418 <_dtoa_r+0x8d8>)
 800618e:	f7fa f9a3 	bl	80004d8 <__aeabi_dmul>
 8006192:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006196:	e7bc      	b.n	8006112 <_dtoa_r+0x5d2>
 8006198:	9f08      	ldr	r7, [sp, #32]
 800619a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800619e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061a2:	f7fa fac3 	bl	800072c <__aeabi_ddiv>
 80061a6:	f7fa fc47 	bl	8000a38 <__aeabi_d2iz>
 80061aa:	4604      	mov	r4, r0
 80061ac:	f7fa f92a 	bl	8000404 <__aeabi_i2d>
 80061b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061b4:	f7fa f990 	bl	80004d8 <__aeabi_dmul>
 80061b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80061bc:	460b      	mov	r3, r1
 80061be:	4602      	mov	r2, r0
 80061c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061c4:	f7f9 ffd0 	bl	8000168 <__aeabi_dsub>
 80061c8:	f807 6b01 	strb.w	r6, [r7], #1
 80061cc:	9e08      	ldr	r6, [sp, #32]
 80061ce:	9b02      	ldr	r3, [sp, #8]
 80061d0:	1bbe      	subs	r6, r7, r6
 80061d2:	42b3      	cmp	r3, r6
 80061d4:	d13a      	bne.n	800624c <_dtoa_r+0x70c>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	f7f9 ffc7 	bl	800016c <__adddf3>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061ea:	f7fa fc05 	bl	80009f8 <__aeabi_dcmpgt>
 80061ee:	bb58      	cbnz	r0, 8006248 <_dtoa_r+0x708>
 80061f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f8:	f7fa fbd6 	bl	80009a8 <__aeabi_dcmpeq>
 80061fc:	b108      	cbz	r0, 8006202 <_dtoa_r+0x6c2>
 80061fe:	07e1      	lsls	r1, r4, #31
 8006200:	d422      	bmi.n	8006248 <_dtoa_r+0x708>
 8006202:	4628      	mov	r0, r5
 8006204:	4651      	mov	r1, sl
 8006206:	f000 fe69 	bl	8006edc <_Bfree>
 800620a:	2300      	movs	r3, #0
 800620c:	703b      	strb	r3, [r7, #0]
 800620e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006210:	f109 0001 	add.w	r0, r9, #1
 8006214:	6018      	str	r0, [r3, #0]
 8006216:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006218:	2b00      	cmp	r3, #0
 800621a:	f43f acdf 	beq.w	8005bdc <_dtoa_r+0x9c>
 800621e:	601f      	str	r7, [r3, #0]
 8006220:	e4dc      	b.n	8005bdc <_dtoa_r+0x9c>
 8006222:	4627      	mov	r7, r4
 8006224:	463b      	mov	r3, r7
 8006226:	461f      	mov	r7, r3
 8006228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800622c:	2a39      	cmp	r2, #57	; 0x39
 800622e:	d107      	bne.n	8006240 <_dtoa_r+0x700>
 8006230:	9a08      	ldr	r2, [sp, #32]
 8006232:	429a      	cmp	r2, r3
 8006234:	d1f7      	bne.n	8006226 <_dtoa_r+0x6e6>
 8006236:	2230      	movs	r2, #48	; 0x30
 8006238:	9908      	ldr	r1, [sp, #32]
 800623a:	f108 0801 	add.w	r8, r8, #1
 800623e:	700a      	strb	r2, [r1, #0]
 8006240:	781a      	ldrb	r2, [r3, #0]
 8006242:	3201      	adds	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e79f      	b.n	8006188 <_dtoa_r+0x648>
 8006248:	46c8      	mov	r8, r9
 800624a:	e7eb      	b.n	8006224 <_dtoa_r+0x6e4>
 800624c:	2200      	movs	r2, #0
 800624e:	4b72      	ldr	r3, [pc, #456]	; (8006418 <_dtoa_r+0x8d8>)
 8006250:	f7fa f942 	bl	80004d8 <__aeabi_dmul>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800625c:	2200      	movs	r2, #0
 800625e:	2300      	movs	r3, #0
 8006260:	f7fa fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8006264:	2800      	cmp	r0, #0
 8006266:	d098      	beq.n	800619a <_dtoa_r+0x65a>
 8006268:	e7cb      	b.n	8006202 <_dtoa_r+0x6c2>
 800626a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800626c:	2a00      	cmp	r2, #0
 800626e:	f000 80cd 	beq.w	800640c <_dtoa_r+0x8cc>
 8006272:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006274:	2a01      	cmp	r2, #1
 8006276:	f300 80af 	bgt.w	80063d8 <_dtoa_r+0x898>
 800627a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800627c:	2a00      	cmp	r2, #0
 800627e:	f000 80a7 	beq.w	80063d0 <_dtoa_r+0x890>
 8006282:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006286:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006288:	9f06      	ldr	r7, [sp, #24]
 800628a:	9a06      	ldr	r2, [sp, #24]
 800628c:	2101      	movs	r1, #1
 800628e:	441a      	add	r2, r3
 8006290:	9206      	str	r2, [sp, #24]
 8006292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006294:	4628      	mov	r0, r5
 8006296:	441a      	add	r2, r3
 8006298:	9209      	str	r2, [sp, #36]	; 0x24
 800629a:	f000 ff23 	bl	80070e4 <__i2b>
 800629e:	4606      	mov	r6, r0
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	dd0c      	ble.n	80062be <_dtoa_r+0x77e>
 80062a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dd09      	ble.n	80062be <_dtoa_r+0x77e>
 80062aa:	42bb      	cmp	r3, r7
 80062ac:	bfa8      	it	ge
 80062ae:	463b      	movge	r3, r7
 80062b0:	9a06      	ldr	r2, [sp, #24]
 80062b2:	1aff      	subs	r7, r7, r3
 80062b4:	1ad2      	subs	r2, r2, r3
 80062b6:	9206      	str	r2, [sp, #24]
 80062b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	9309      	str	r3, [sp, #36]	; 0x24
 80062be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c0:	b1f3      	cbz	r3, 8006300 <_dtoa_r+0x7c0>
 80062c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80a9 	beq.w	800641c <_dtoa_r+0x8dc>
 80062ca:	2c00      	cmp	r4, #0
 80062cc:	dd10      	ble.n	80062f0 <_dtoa_r+0x7b0>
 80062ce:	4631      	mov	r1, r6
 80062d0:	4622      	mov	r2, r4
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 ffc0 	bl	8007258 <__pow5mult>
 80062d8:	4652      	mov	r2, sl
 80062da:	4601      	mov	r1, r0
 80062dc:	4606      	mov	r6, r0
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 ff16 	bl	8007110 <__multiply>
 80062e4:	4680      	mov	r8, r0
 80062e6:	4651      	mov	r1, sl
 80062e8:	4628      	mov	r0, r5
 80062ea:	f000 fdf7 	bl	8006edc <_Bfree>
 80062ee:	46c2      	mov	sl, r8
 80062f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f2:	1b1a      	subs	r2, r3, r4
 80062f4:	d004      	beq.n	8006300 <_dtoa_r+0x7c0>
 80062f6:	4651      	mov	r1, sl
 80062f8:	4628      	mov	r0, r5
 80062fa:	f000 ffad 	bl	8007258 <__pow5mult>
 80062fe:	4682      	mov	sl, r0
 8006300:	2101      	movs	r1, #1
 8006302:	4628      	mov	r0, r5
 8006304:	f000 feee 	bl	80070e4 <__i2b>
 8006308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800630a:	4604      	mov	r4, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	f340 8087 	ble.w	8006420 <_dtoa_r+0x8e0>
 8006312:	461a      	mov	r2, r3
 8006314:	4601      	mov	r1, r0
 8006316:	4628      	mov	r0, r5
 8006318:	f000 ff9e 	bl	8007258 <__pow5mult>
 800631c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800631e:	4604      	mov	r4, r0
 8006320:	2b01      	cmp	r3, #1
 8006322:	f340 8080 	ble.w	8006426 <_dtoa_r+0x8e6>
 8006326:	f04f 0800 	mov.w	r8, #0
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006330:	6918      	ldr	r0, [r3, #16]
 8006332:	f000 fe89 	bl	8007048 <__hi0bits>
 8006336:	f1c0 0020 	rsb	r0, r0, #32
 800633a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800633c:	4418      	add	r0, r3
 800633e:	f010 001f 	ands.w	r0, r0, #31
 8006342:	f000 8092 	beq.w	800646a <_dtoa_r+0x92a>
 8006346:	f1c0 0320 	rsb	r3, r0, #32
 800634a:	2b04      	cmp	r3, #4
 800634c:	f340 808a 	ble.w	8006464 <_dtoa_r+0x924>
 8006350:	f1c0 001c 	rsb	r0, r0, #28
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	4407      	add	r7, r0
 8006358:	4403      	add	r3, r0
 800635a:	9306      	str	r3, [sp, #24]
 800635c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635e:	4403      	add	r3, r0
 8006360:	9309      	str	r3, [sp, #36]	; 0x24
 8006362:	9b06      	ldr	r3, [sp, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dd05      	ble.n	8006374 <_dtoa_r+0x834>
 8006368:	4651      	mov	r1, sl
 800636a:	461a      	mov	r2, r3
 800636c:	4628      	mov	r0, r5
 800636e:	f000 ffcd 	bl	800730c <__lshift>
 8006372:	4682      	mov	sl, r0
 8006374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd05      	ble.n	8006386 <_dtoa_r+0x846>
 800637a:	4621      	mov	r1, r4
 800637c:	461a      	mov	r2, r3
 800637e:	4628      	mov	r0, r5
 8006380:	f000 ffc4 	bl	800730c <__lshift>
 8006384:	4604      	mov	r4, r0
 8006386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d070      	beq.n	800646e <_dtoa_r+0x92e>
 800638c:	4621      	mov	r1, r4
 800638e:	4650      	mov	r0, sl
 8006390:	f001 f828 	bl	80073e4 <__mcmp>
 8006394:	2800      	cmp	r0, #0
 8006396:	da6a      	bge.n	800646e <_dtoa_r+0x92e>
 8006398:	2300      	movs	r3, #0
 800639a:	4651      	mov	r1, sl
 800639c:	220a      	movs	r2, #10
 800639e:	4628      	mov	r0, r5
 80063a0:	f000 fdbe 	bl	8006f20 <__multadd>
 80063a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a6:	4682      	mov	sl, r0
 80063a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8193 	beq.w	80066d8 <_dtoa_r+0xb98>
 80063b2:	4631      	mov	r1, r6
 80063b4:	2300      	movs	r3, #0
 80063b6:	220a      	movs	r2, #10
 80063b8:	4628      	mov	r0, r5
 80063ba:	f000 fdb1 	bl	8006f20 <__multadd>
 80063be:	f1bb 0f00 	cmp.w	fp, #0
 80063c2:	4606      	mov	r6, r0
 80063c4:	f300 8093 	bgt.w	80064ee <_dtoa_r+0x9ae>
 80063c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	dc57      	bgt.n	800647e <_dtoa_r+0x93e>
 80063ce:	e08e      	b.n	80064ee <_dtoa_r+0x9ae>
 80063d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80063d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063d6:	e756      	b.n	8006286 <_dtoa_r+0x746>
 80063d8:	9b02      	ldr	r3, [sp, #8]
 80063da:	1e5c      	subs	r4, r3, #1
 80063dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063de:	42a3      	cmp	r3, r4
 80063e0:	bfb7      	itett	lt
 80063e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80063e4:	1b1c      	subge	r4, r3, r4
 80063e6:	1ae2      	sublt	r2, r4, r3
 80063e8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80063ea:	bfbe      	ittt	lt
 80063ec:	940a      	strlt	r4, [sp, #40]	; 0x28
 80063ee:	189b      	addlt	r3, r3, r2
 80063f0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80063f2:	9b02      	ldr	r3, [sp, #8]
 80063f4:	bfb8      	it	lt
 80063f6:	2400      	movlt	r4, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bfbb      	ittet	lt
 80063fc:	9b06      	ldrlt	r3, [sp, #24]
 80063fe:	9a02      	ldrlt	r2, [sp, #8]
 8006400:	9f06      	ldrge	r7, [sp, #24]
 8006402:	1a9f      	sublt	r7, r3, r2
 8006404:	bfac      	ite	ge
 8006406:	9b02      	ldrge	r3, [sp, #8]
 8006408:	2300      	movlt	r3, #0
 800640a:	e73e      	b.n	800628a <_dtoa_r+0x74a>
 800640c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800640e:	9f06      	ldr	r7, [sp, #24]
 8006410:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006412:	e745      	b.n	80062a0 <_dtoa_r+0x760>
 8006414:	3fe00000 	.word	0x3fe00000
 8006418:	40240000 	.word	0x40240000
 800641c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800641e:	e76a      	b.n	80062f6 <_dtoa_r+0x7b6>
 8006420:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006422:	2b01      	cmp	r3, #1
 8006424:	dc19      	bgt.n	800645a <_dtoa_r+0x91a>
 8006426:	9b04      	ldr	r3, [sp, #16]
 8006428:	b9bb      	cbnz	r3, 800645a <_dtoa_r+0x91a>
 800642a:	9b05      	ldr	r3, [sp, #20]
 800642c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006430:	b99b      	cbnz	r3, 800645a <_dtoa_r+0x91a>
 8006432:	9b05      	ldr	r3, [sp, #20]
 8006434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006438:	0d1b      	lsrs	r3, r3, #20
 800643a:	051b      	lsls	r3, r3, #20
 800643c:	b183      	cbz	r3, 8006460 <_dtoa_r+0x920>
 800643e:	f04f 0801 	mov.w	r8, #1
 8006442:	9b06      	ldr	r3, [sp, #24]
 8006444:	3301      	adds	r3, #1
 8006446:	9306      	str	r3, [sp, #24]
 8006448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644a:	3301      	adds	r3, #1
 800644c:	9309      	str	r3, [sp, #36]	; 0x24
 800644e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	f47f af6a 	bne.w	800632a <_dtoa_r+0x7ea>
 8006456:	2001      	movs	r0, #1
 8006458:	e76f      	b.n	800633a <_dtoa_r+0x7fa>
 800645a:	f04f 0800 	mov.w	r8, #0
 800645e:	e7f6      	b.n	800644e <_dtoa_r+0x90e>
 8006460:	4698      	mov	r8, r3
 8006462:	e7f4      	b.n	800644e <_dtoa_r+0x90e>
 8006464:	f43f af7d 	beq.w	8006362 <_dtoa_r+0x822>
 8006468:	4618      	mov	r0, r3
 800646a:	301c      	adds	r0, #28
 800646c:	e772      	b.n	8006354 <_dtoa_r+0x814>
 800646e:	9b02      	ldr	r3, [sp, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	dc36      	bgt.n	80064e2 <_dtoa_r+0x9a2>
 8006474:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006476:	2b02      	cmp	r3, #2
 8006478:	dd33      	ble.n	80064e2 <_dtoa_r+0x9a2>
 800647a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800647e:	f1bb 0f00 	cmp.w	fp, #0
 8006482:	d10d      	bne.n	80064a0 <_dtoa_r+0x960>
 8006484:	4621      	mov	r1, r4
 8006486:	465b      	mov	r3, fp
 8006488:	2205      	movs	r2, #5
 800648a:	4628      	mov	r0, r5
 800648c:	f000 fd48 	bl	8006f20 <__multadd>
 8006490:	4601      	mov	r1, r0
 8006492:	4604      	mov	r4, r0
 8006494:	4650      	mov	r0, sl
 8006496:	f000 ffa5 	bl	80073e4 <__mcmp>
 800649a:	2800      	cmp	r0, #0
 800649c:	f73f adb6 	bgt.w	800600c <_dtoa_r+0x4cc>
 80064a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064a2:	9f08      	ldr	r7, [sp, #32]
 80064a4:	ea6f 0903 	mvn.w	r9, r3
 80064a8:	f04f 0800 	mov.w	r8, #0
 80064ac:	4621      	mov	r1, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 fd14 	bl	8006edc <_Bfree>
 80064b4:	2e00      	cmp	r6, #0
 80064b6:	f43f aea4 	beq.w	8006202 <_dtoa_r+0x6c2>
 80064ba:	f1b8 0f00 	cmp.w	r8, #0
 80064be:	d005      	beq.n	80064cc <_dtoa_r+0x98c>
 80064c0:	45b0      	cmp	r8, r6
 80064c2:	d003      	beq.n	80064cc <_dtoa_r+0x98c>
 80064c4:	4641      	mov	r1, r8
 80064c6:	4628      	mov	r0, r5
 80064c8:	f000 fd08 	bl	8006edc <_Bfree>
 80064cc:	4631      	mov	r1, r6
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 fd04 	bl	8006edc <_Bfree>
 80064d4:	e695      	b.n	8006202 <_dtoa_r+0x6c2>
 80064d6:	2400      	movs	r4, #0
 80064d8:	4626      	mov	r6, r4
 80064da:	e7e1      	b.n	80064a0 <_dtoa_r+0x960>
 80064dc:	46c1      	mov	r9, r8
 80064de:	4626      	mov	r6, r4
 80064e0:	e594      	b.n	800600c <_dtoa_r+0x4cc>
 80064e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 80fc 	beq.w	80066e6 <_dtoa_r+0xba6>
 80064ee:	2f00      	cmp	r7, #0
 80064f0:	dd05      	ble.n	80064fe <_dtoa_r+0x9be>
 80064f2:	4631      	mov	r1, r6
 80064f4:	463a      	mov	r2, r7
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 ff08 	bl	800730c <__lshift>
 80064fc:	4606      	mov	r6, r0
 80064fe:	f1b8 0f00 	cmp.w	r8, #0
 8006502:	d05c      	beq.n	80065be <_dtoa_r+0xa7e>
 8006504:	4628      	mov	r0, r5
 8006506:	6871      	ldr	r1, [r6, #4]
 8006508:	f000 fca8 	bl	8006e5c <_Balloc>
 800650c:	4607      	mov	r7, r0
 800650e:	b928      	cbnz	r0, 800651c <_dtoa_r+0x9dc>
 8006510:	4602      	mov	r2, r0
 8006512:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006516:	4b7e      	ldr	r3, [pc, #504]	; (8006710 <_dtoa_r+0xbd0>)
 8006518:	f7ff bb26 	b.w	8005b68 <_dtoa_r+0x28>
 800651c:	6932      	ldr	r2, [r6, #16]
 800651e:	f106 010c 	add.w	r1, r6, #12
 8006522:	3202      	adds	r2, #2
 8006524:	0092      	lsls	r2, r2, #2
 8006526:	300c      	adds	r0, #12
 8006528:	f000 fc8a 	bl	8006e40 <memcpy>
 800652c:	2201      	movs	r2, #1
 800652e:	4639      	mov	r1, r7
 8006530:	4628      	mov	r0, r5
 8006532:	f000 feeb 	bl	800730c <__lshift>
 8006536:	46b0      	mov	r8, r6
 8006538:	4606      	mov	r6, r0
 800653a:	9b08      	ldr	r3, [sp, #32]
 800653c:	3301      	adds	r3, #1
 800653e:	9302      	str	r3, [sp, #8]
 8006540:	9b08      	ldr	r3, [sp, #32]
 8006542:	445b      	add	r3, fp
 8006544:	930a      	str	r3, [sp, #40]	; 0x28
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	9309      	str	r3, [sp, #36]	; 0x24
 800654e:	9b02      	ldr	r3, [sp, #8]
 8006550:	4621      	mov	r1, r4
 8006552:	4650      	mov	r0, sl
 8006554:	f103 3bff 	add.w	fp, r3, #4294967295
 8006558:	f7ff fa62 	bl	8005a20 <quorem>
 800655c:	4603      	mov	r3, r0
 800655e:	4641      	mov	r1, r8
 8006560:	3330      	adds	r3, #48	; 0x30
 8006562:	9004      	str	r0, [sp, #16]
 8006564:	4650      	mov	r0, sl
 8006566:	930b      	str	r3, [sp, #44]	; 0x2c
 8006568:	f000 ff3c 	bl	80073e4 <__mcmp>
 800656c:	4632      	mov	r2, r6
 800656e:	9006      	str	r0, [sp, #24]
 8006570:	4621      	mov	r1, r4
 8006572:	4628      	mov	r0, r5
 8006574:	f000 ff52 	bl	800741c <__mdiff>
 8006578:	68c2      	ldr	r2, [r0, #12]
 800657a:	4607      	mov	r7, r0
 800657c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800657e:	bb02      	cbnz	r2, 80065c2 <_dtoa_r+0xa82>
 8006580:	4601      	mov	r1, r0
 8006582:	4650      	mov	r0, sl
 8006584:	f000 ff2e 	bl	80073e4 <__mcmp>
 8006588:	4602      	mov	r2, r0
 800658a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800658c:	4639      	mov	r1, r7
 800658e:	4628      	mov	r0, r5
 8006590:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006594:	f000 fca2 	bl	8006edc <_Bfree>
 8006598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800659a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800659c:	9f02      	ldr	r7, [sp, #8]
 800659e:	ea43 0102 	orr.w	r1, r3, r2
 80065a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a4:	430b      	orrs	r3, r1
 80065a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a8:	d10d      	bne.n	80065c6 <_dtoa_r+0xa86>
 80065aa:	2b39      	cmp	r3, #57	; 0x39
 80065ac:	d027      	beq.n	80065fe <_dtoa_r+0xabe>
 80065ae:	9a06      	ldr	r2, [sp, #24]
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	dd01      	ble.n	80065b8 <_dtoa_r+0xa78>
 80065b4:	9b04      	ldr	r3, [sp, #16]
 80065b6:	3331      	adds	r3, #49	; 0x31
 80065b8:	f88b 3000 	strb.w	r3, [fp]
 80065bc:	e776      	b.n	80064ac <_dtoa_r+0x96c>
 80065be:	4630      	mov	r0, r6
 80065c0:	e7b9      	b.n	8006536 <_dtoa_r+0x9f6>
 80065c2:	2201      	movs	r2, #1
 80065c4:	e7e2      	b.n	800658c <_dtoa_r+0xa4c>
 80065c6:	9906      	ldr	r1, [sp, #24]
 80065c8:	2900      	cmp	r1, #0
 80065ca:	db04      	blt.n	80065d6 <_dtoa_r+0xa96>
 80065cc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80065ce:	4301      	orrs	r1, r0
 80065d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065d2:	4301      	orrs	r1, r0
 80065d4:	d120      	bne.n	8006618 <_dtoa_r+0xad8>
 80065d6:	2a00      	cmp	r2, #0
 80065d8:	ddee      	ble.n	80065b8 <_dtoa_r+0xa78>
 80065da:	4651      	mov	r1, sl
 80065dc:	2201      	movs	r2, #1
 80065de:	4628      	mov	r0, r5
 80065e0:	9302      	str	r3, [sp, #8]
 80065e2:	f000 fe93 	bl	800730c <__lshift>
 80065e6:	4621      	mov	r1, r4
 80065e8:	4682      	mov	sl, r0
 80065ea:	f000 fefb 	bl	80073e4 <__mcmp>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	9b02      	ldr	r3, [sp, #8]
 80065f2:	dc02      	bgt.n	80065fa <_dtoa_r+0xaba>
 80065f4:	d1e0      	bne.n	80065b8 <_dtoa_r+0xa78>
 80065f6:	07da      	lsls	r2, r3, #31
 80065f8:	d5de      	bpl.n	80065b8 <_dtoa_r+0xa78>
 80065fa:	2b39      	cmp	r3, #57	; 0x39
 80065fc:	d1da      	bne.n	80065b4 <_dtoa_r+0xa74>
 80065fe:	2339      	movs	r3, #57	; 0x39
 8006600:	f88b 3000 	strb.w	r3, [fp]
 8006604:	463b      	mov	r3, r7
 8006606:	461f      	mov	r7, r3
 8006608:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800660c:	3b01      	subs	r3, #1
 800660e:	2a39      	cmp	r2, #57	; 0x39
 8006610:	d050      	beq.n	80066b4 <_dtoa_r+0xb74>
 8006612:	3201      	adds	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e749      	b.n	80064ac <_dtoa_r+0x96c>
 8006618:	2a00      	cmp	r2, #0
 800661a:	dd03      	ble.n	8006624 <_dtoa_r+0xae4>
 800661c:	2b39      	cmp	r3, #57	; 0x39
 800661e:	d0ee      	beq.n	80065fe <_dtoa_r+0xabe>
 8006620:	3301      	adds	r3, #1
 8006622:	e7c9      	b.n	80065b8 <_dtoa_r+0xa78>
 8006624:	9a02      	ldr	r2, [sp, #8]
 8006626:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006628:	f802 3c01 	strb.w	r3, [r2, #-1]
 800662c:	428a      	cmp	r2, r1
 800662e:	d02a      	beq.n	8006686 <_dtoa_r+0xb46>
 8006630:	4651      	mov	r1, sl
 8006632:	2300      	movs	r3, #0
 8006634:	220a      	movs	r2, #10
 8006636:	4628      	mov	r0, r5
 8006638:	f000 fc72 	bl	8006f20 <__multadd>
 800663c:	45b0      	cmp	r8, r6
 800663e:	4682      	mov	sl, r0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	f04f 020a 	mov.w	r2, #10
 8006648:	4641      	mov	r1, r8
 800664a:	4628      	mov	r0, r5
 800664c:	d107      	bne.n	800665e <_dtoa_r+0xb1e>
 800664e:	f000 fc67 	bl	8006f20 <__multadd>
 8006652:	4680      	mov	r8, r0
 8006654:	4606      	mov	r6, r0
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	3301      	adds	r3, #1
 800665a:	9302      	str	r3, [sp, #8]
 800665c:	e777      	b.n	800654e <_dtoa_r+0xa0e>
 800665e:	f000 fc5f 	bl	8006f20 <__multadd>
 8006662:	4631      	mov	r1, r6
 8006664:	4680      	mov	r8, r0
 8006666:	2300      	movs	r3, #0
 8006668:	220a      	movs	r2, #10
 800666a:	4628      	mov	r0, r5
 800666c:	f000 fc58 	bl	8006f20 <__multadd>
 8006670:	4606      	mov	r6, r0
 8006672:	e7f0      	b.n	8006656 <_dtoa_r+0xb16>
 8006674:	f1bb 0f00 	cmp.w	fp, #0
 8006678:	bfcc      	ite	gt
 800667a:	465f      	movgt	r7, fp
 800667c:	2701      	movle	r7, #1
 800667e:	f04f 0800 	mov.w	r8, #0
 8006682:	9a08      	ldr	r2, [sp, #32]
 8006684:	4417      	add	r7, r2
 8006686:	4651      	mov	r1, sl
 8006688:	2201      	movs	r2, #1
 800668a:	4628      	mov	r0, r5
 800668c:	9302      	str	r3, [sp, #8]
 800668e:	f000 fe3d 	bl	800730c <__lshift>
 8006692:	4621      	mov	r1, r4
 8006694:	4682      	mov	sl, r0
 8006696:	f000 fea5 	bl	80073e4 <__mcmp>
 800669a:	2800      	cmp	r0, #0
 800669c:	dcb2      	bgt.n	8006604 <_dtoa_r+0xac4>
 800669e:	d102      	bne.n	80066a6 <_dtoa_r+0xb66>
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	07db      	lsls	r3, r3, #31
 80066a4:	d4ae      	bmi.n	8006604 <_dtoa_r+0xac4>
 80066a6:	463b      	mov	r3, r7
 80066a8:	461f      	mov	r7, r3
 80066aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ae:	2a30      	cmp	r2, #48	; 0x30
 80066b0:	d0fa      	beq.n	80066a8 <_dtoa_r+0xb68>
 80066b2:	e6fb      	b.n	80064ac <_dtoa_r+0x96c>
 80066b4:	9a08      	ldr	r2, [sp, #32]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d1a5      	bne.n	8006606 <_dtoa_r+0xac6>
 80066ba:	2331      	movs	r3, #49	; 0x31
 80066bc:	f109 0901 	add.w	r9, r9, #1
 80066c0:	7013      	strb	r3, [r2, #0]
 80066c2:	e6f3      	b.n	80064ac <_dtoa_r+0x96c>
 80066c4:	4b13      	ldr	r3, [pc, #76]	; (8006714 <_dtoa_r+0xbd4>)
 80066c6:	f7ff baa7 	b.w	8005c18 <_dtoa_r+0xd8>
 80066ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f aa80 	bne.w	8005bd2 <_dtoa_r+0x92>
 80066d2:	4b11      	ldr	r3, [pc, #68]	; (8006718 <_dtoa_r+0xbd8>)
 80066d4:	f7ff baa0 	b.w	8005c18 <_dtoa_r+0xd8>
 80066d8:	f1bb 0f00 	cmp.w	fp, #0
 80066dc:	dc03      	bgt.n	80066e6 <_dtoa_r+0xba6>
 80066de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	f73f aecc 	bgt.w	800647e <_dtoa_r+0x93e>
 80066e6:	9f08      	ldr	r7, [sp, #32]
 80066e8:	4621      	mov	r1, r4
 80066ea:	4650      	mov	r0, sl
 80066ec:	f7ff f998 	bl	8005a20 <quorem>
 80066f0:	9a08      	ldr	r2, [sp, #32]
 80066f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80066f6:	f807 3b01 	strb.w	r3, [r7], #1
 80066fa:	1aba      	subs	r2, r7, r2
 80066fc:	4593      	cmp	fp, r2
 80066fe:	ddb9      	ble.n	8006674 <_dtoa_r+0xb34>
 8006700:	4651      	mov	r1, sl
 8006702:	2300      	movs	r3, #0
 8006704:	220a      	movs	r2, #10
 8006706:	4628      	mov	r0, r5
 8006708:	f000 fc0a 	bl	8006f20 <__multadd>
 800670c:	4682      	mov	sl, r0
 800670e:	e7eb      	b.n	80066e8 <_dtoa_r+0xba8>
 8006710:	080091e9 	.word	0x080091e9
 8006714:	08008fc4 	.word	0x08008fc4
 8006718:	08009166 	.word	0x08009166

0800671c <rshift>:
 800671c:	6903      	ldr	r3, [r0, #16]
 800671e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006722:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006726:	f100 0414 	add.w	r4, r0, #20
 800672a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800672e:	dd46      	ble.n	80067be <rshift+0xa2>
 8006730:	f011 011f 	ands.w	r1, r1, #31
 8006734:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006738:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800673c:	d10c      	bne.n	8006758 <rshift+0x3c>
 800673e:	4629      	mov	r1, r5
 8006740:	f100 0710 	add.w	r7, r0, #16
 8006744:	42b1      	cmp	r1, r6
 8006746:	d335      	bcc.n	80067b4 <rshift+0x98>
 8006748:	1a9b      	subs	r3, r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	1eea      	subs	r2, r5, #3
 800674e:	4296      	cmp	r6, r2
 8006750:	bf38      	it	cc
 8006752:	2300      	movcc	r3, #0
 8006754:	4423      	add	r3, r4
 8006756:	e015      	b.n	8006784 <rshift+0x68>
 8006758:	46a1      	mov	r9, r4
 800675a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800675e:	f1c1 0820 	rsb	r8, r1, #32
 8006762:	40cf      	lsrs	r7, r1
 8006764:	f105 0e04 	add.w	lr, r5, #4
 8006768:	4576      	cmp	r6, lr
 800676a:	46f4      	mov	ip, lr
 800676c:	d816      	bhi.n	800679c <rshift+0x80>
 800676e:	1a9b      	subs	r3, r3, r2
 8006770:	009a      	lsls	r2, r3, #2
 8006772:	3a04      	subs	r2, #4
 8006774:	3501      	adds	r5, #1
 8006776:	42ae      	cmp	r6, r5
 8006778:	bf38      	it	cc
 800677a:	2200      	movcc	r2, #0
 800677c:	18a3      	adds	r3, r4, r2
 800677e:	50a7      	str	r7, [r4, r2]
 8006780:	b107      	cbz	r7, 8006784 <rshift+0x68>
 8006782:	3304      	adds	r3, #4
 8006784:	42a3      	cmp	r3, r4
 8006786:	eba3 0204 	sub.w	r2, r3, r4
 800678a:	bf08      	it	eq
 800678c:	2300      	moveq	r3, #0
 800678e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006792:	6102      	str	r2, [r0, #16]
 8006794:	bf08      	it	eq
 8006796:	6143      	streq	r3, [r0, #20]
 8006798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800679c:	f8dc c000 	ldr.w	ip, [ip]
 80067a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80067a4:	ea4c 0707 	orr.w	r7, ip, r7
 80067a8:	f849 7b04 	str.w	r7, [r9], #4
 80067ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80067b0:	40cf      	lsrs	r7, r1
 80067b2:	e7d9      	b.n	8006768 <rshift+0x4c>
 80067b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80067b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80067bc:	e7c2      	b.n	8006744 <rshift+0x28>
 80067be:	4623      	mov	r3, r4
 80067c0:	e7e0      	b.n	8006784 <rshift+0x68>

080067c2 <__hexdig_fun>:
 80067c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80067c6:	2b09      	cmp	r3, #9
 80067c8:	d802      	bhi.n	80067d0 <__hexdig_fun+0xe>
 80067ca:	3820      	subs	r0, #32
 80067cc:	b2c0      	uxtb	r0, r0
 80067ce:	4770      	bx	lr
 80067d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80067d4:	2b05      	cmp	r3, #5
 80067d6:	d801      	bhi.n	80067dc <__hexdig_fun+0x1a>
 80067d8:	3847      	subs	r0, #71	; 0x47
 80067da:	e7f7      	b.n	80067cc <__hexdig_fun+0xa>
 80067dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	d801      	bhi.n	80067e8 <__hexdig_fun+0x26>
 80067e4:	3827      	subs	r0, #39	; 0x27
 80067e6:	e7f1      	b.n	80067cc <__hexdig_fun+0xa>
 80067e8:	2000      	movs	r0, #0
 80067ea:	4770      	bx	lr

080067ec <__gethex>:
 80067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f0:	b08b      	sub	sp, #44	; 0x2c
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	4bb9      	ldr	r3, [pc, #740]	; (8006adc <__gethex+0x2f0>)
 80067f6:	9002      	str	r0, [sp, #8]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	468b      	mov	fp, r1
 80067fc:	4618      	mov	r0, r3
 80067fe:	4690      	mov	r8, r2
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	f7f9 fca5 	bl	8000150 <strlen>
 8006806:	4682      	mov	sl, r0
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	f8db 2000 	ldr.w	r2, [fp]
 800680e:	4403      	add	r3, r0
 8006810:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006814:	9307      	str	r3, [sp, #28]
 8006816:	1c93      	adds	r3, r2, #2
 8006818:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800681c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006820:	32fe      	adds	r2, #254	; 0xfe
 8006822:	18d1      	adds	r1, r2, r3
 8006824:	461f      	mov	r7, r3
 8006826:	f813 0b01 	ldrb.w	r0, [r3], #1
 800682a:	9101      	str	r1, [sp, #4]
 800682c:	2830      	cmp	r0, #48	; 0x30
 800682e:	d0f8      	beq.n	8006822 <__gethex+0x36>
 8006830:	f7ff ffc7 	bl	80067c2 <__hexdig_fun>
 8006834:	4604      	mov	r4, r0
 8006836:	2800      	cmp	r0, #0
 8006838:	d13a      	bne.n	80068b0 <__gethex+0xc4>
 800683a:	4652      	mov	r2, sl
 800683c:	4638      	mov	r0, r7
 800683e:	9903      	ldr	r1, [sp, #12]
 8006840:	f001 f9ea 	bl	8007c18 <strncmp>
 8006844:	4605      	mov	r5, r0
 8006846:	2800      	cmp	r0, #0
 8006848:	d166      	bne.n	8006918 <__gethex+0x12c>
 800684a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800684e:	eb07 060a 	add.w	r6, r7, sl
 8006852:	f7ff ffb6 	bl	80067c2 <__hexdig_fun>
 8006856:	2800      	cmp	r0, #0
 8006858:	d060      	beq.n	800691c <__gethex+0x130>
 800685a:	4633      	mov	r3, r6
 800685c:	7818      	ldrb	r0, [r3, #0]
 800685e:	461f      	mov	r7, r3
 8006860:	2830      	cmp	r0, #48	; 0x30
 8006862:	f103 0301 	add.w	r3, r3, #1
 8006866:	d0f9      	beq.n	800685c <__gethex+0x70>
 8006868:	f7ff ffab 	bl	80067c2 <__hexdig_fun>
 800686c:	2301      	movs	r3, #1
 800686e:	fab0 f480 	clz	r4, r0
 8006872:	4635      	mov	r5, r6
 8006874:	0964      	lsrs	r4, r4, #5
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	463a      	mov	r2, r7
 800687a:	4616      	mov	r6, r2
 800687c:	7830      	ldrb	r0, [r6, #0]
 800687e:	3201      	adds	r2, #1
 8006880:	f7ff ff9f 	bl	80067c2 <__hexdig_fun>
 8006884:	2800      	cmp	r0, #0
 8006886:	d1f8      	bne.n	800687a <__gethex+0x8e>
 8006888:	4652      	mov	r2, sl
 800688a:	4630      	mov	r0, r6
 800688c:	9903      	ldr	r1, [sp, #12]
 800688e:	f001 f9c3 	bl	8007c18 <strncmp>
 8006892:	b980      	cbnz	r0, 80068b6 <__gethex+0xca>
 8006894:	b94d      	cbnz	r5, 80068aa <__gethex+0xbe>
 8006896:	eb06 050a 	add.w	r5, r6, sl
 800689a:	462a      	mov	r2, r5
 800689c:	4616      	mov	r6, r2
 800689e:	7830      	ldrb	r0, [r6, #0]
 80068a0:	3201      	adds	r2, #1
 80068a2:	f7ff ff8e 	bl	80067c2 <__hexdig_fun>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d1f8      	bne.n	800689c <__gethex+0xb0>
 80068aa:	1bad      	subs	r5, r5, r6
 80068ac:	00ad      	lsls	r5, r5, #2
 80068ae:	e004      	b.n	80068ba <__gethex+0xce>
 80068b0:	2400      	movs	r4, #0
 80068b2:	4625      	mov	r5, r4
 80068b4:	e7e0      	b.n	8006878 <__gethex+0x8c>
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	d1f7      	bne.n	80068aa <__gethex+0xbe>
 80068ba:	7833      	ldrb	r3, [r6, #0]
 80068bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068c0:	2b50      	cmp	r3, #80	; 0x50
 80068c2:	d139      	bne.n	8006938 <__gethex+0x14c>
 80068c4:	7873      	ldrb	r3, [r6, #1]
 80068c6:	2b2b      	cmp	r3, #43	; 0x2b
 80068c8:	d02a      	beq.n	8006920 <__gethex+0x134>
 80068ca:	2b2d      	cmp	r3, #45	; 0x2d
 80068cc:	d02c      	beq.n	8006928 <__gethex+0x13c>
 80068ce:	f04f 0900 	mov.w	r9, #0
 80068d2:	1c71      	adds	r1, r6, #1
 80068d4:	7808      	ldrb	r0, [r1, #0]
 80068d6:	f7ff ff74 	bl	80067c2 <__hexdig_fun>
 80068da:	1e43      	subs	r3, r0, #1
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b18      	cmp	r3, #24
 80068e0:	d82a      	bhi.n	8006938 <__gethex+0x14c>
 80068e2:	f1a0 0210 	sub.w	r2, r0, #16
 80068e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80068ea:	f7ff ff6a 	bl	80067c2 <__hexdig_fun>
 80068ee:	1e43      	subs	r3, r0, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b18      	cmp	r3, #24
 80068f4:	d91b      	bls.n	800692e <__gethex+0x142>
 80068f6:	f1b9 0f00 	cmp.w	r9, #0
 80068fa:	d000      	beq.n	80068fe <__gethex+0x112>
 80068fc:	4252      	negs	r2, r2
 80068fe:	4415      	add	r5, r2
 8006900:	f8cb 1000 	str.w	r1, [fp]
 8006904:	b1d4      	cbz	r4, 800693c <__gethex+0x150>
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	bf14      	ite	ne
 800690c:	2700      	movne	r7, #0
 800690e:	2706      	moveq	r7, #6
 8006910:	4638      	mov	r0, r7
 8006912:	b00b      	add	sp, #44	; 0x2c
 8006914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006918:	463e      	mov	r6, r7
 800691a:	4625      	mov	r5, r4
 800691c:	2401      	movs	r4, #1
 800691e:	e7cc      	b.n	80068ba <__gethex+0xce>
 8006920:	f04f 0900 	mov.w	r9, #0
 8006924:	1cb1      	adds	r1, r6, #2
 8006926:	e7d5      	b.n	80068d4 <__gethex+0xe8>
 8006928:	f04f 0901 	mov.w	r9, #1
 800692c:	e7fa      	b.n	8006924 <__gethex+0x138>
 800692e:	230a      	movs	r3, #10
 8006930:	fb03 0202 	mla	r2, r3, r2, r0
 8006934:	3a10      	subs	r2, #16
 8006936:	e7d6      	b.n	80068e6 <__gethex+0xfa>
 8006938:	4631      	mov	r1, r6
 800693a:	e7e1      	b.n	8006900 <__gethex+0x114>
 800693c:	4621      	mov	r1, r4
 800693e:	1bf3      	subs	r3, r6, r7
 8006940:	3b01      	subs	r3, #1
 8006942:	2b07      	cmp	r3, #7
 8006944:	dc0a      	bgt.n	800695c <__gethex+0x170>
 8006946:	9802      	ldr	r0, [sp, #8]
 8006948:	f000 fa88 	bl	8006e5c <_Balloc>
 800694c:	4604      	mov	r4, r0
 800694e:	b940      	cbnz	r0, 8006962 <__gethex+0x176>
 8006950:	4602      	mov	r2, r0
 8006952:	21de      	movs	r1, #222	; 0xde
 8006954:	4b62      	ldr	r3, [pc, #392]	; (8006ae0 <__gethex+0x2f4>)
 8006956:	4863      	ldr	r0, [pc, #396]	; (8006ae4 <__gethex+0x2f8>)
 8006958:	f001 f97e 	bl	8007c58 <__assert_func>
 800695c:	3101      	adds	r1, #1
 800695e:	105b      	asrs	r3, r3, #1
 8006960:	e7ef      	b.n	8006942 <__gethex+0x156>
 8006962:	f04f 0b00 	mov.w	fp, #0
 8006966:	f100 0914 	add.w	r9, r0, #20
 800696a:	f1ca 0301 	rsb	r3, sl, #1
 800696e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006972:	f8cd b004 	str.w	fp, [sp, #4]
 8006976:	9308      	str	r3, [sp, #32]
 8006978:	42b7      	cmp	r7, r6
 800697a:	d33f      	bcc.n	80069fc <__gethex+0x210>
 800697c:	9f04      	ldr	r7, [sp, #16]
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	f847 3b04 	str.w	r3, [r7], #4
 8006984:	eba7 0709 	sub.w	r7, r7, r9
 8006988:	10bf      	asrs	r7, r7, #2
 800698a:	6127      	str	r7, [r4, #16]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fb5b 	bl	8007048 <__hi0bits>
 8006992:	017f      	lsls	r7, r7, #5
 8006994:	f8d8 6000 	ldr.w	r6, [r8]
 8006998:	1a3f      	subs	r7, r7, r0
 800699a:	42b7      	cmp	r7, r6
 800699c:	dd62      	ble.n	8006a64 <__gethex+0x278>
 800699e:	1bbf      	subs	r7, r7, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 fef1 	bl	800778a <__any_on>
 80069a8:	4682      	mov	sl, r0
 80069aa:	b1a8      	cbz	r0, 80069d8 <__gethex+0x1ec>
 80069ac:	f04f 0a01 	mov.w	sl, #1
 80069b0:	1e7b      	subs	r3, r7, #1
 80069b2:	1159      	asrs	r1, r3, #5
 80069b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80069b8:	f003 021f 	and.w	r2, r3, #31
 80069bc:	fa0a f202 	lsl.w	r2, sl, r2
 80069c0:	420a      	tst	r2, r1
 80069c2:	d009      	beq.n	80069d8 <__gethex+0x1ec>
 80069c4:	4553      	cmp	r3, sl
 80069c6:	dd05      	ble.n	80069d4 <__gethex+0x1e8>
 80069c8:	4620      	mov	r0, r4
 80069ca:	1eb9      	subs	r1, r7, #2
 80069cc:	f000 fedd 	bl	800778a <__any_on>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d144      	bne.n	8006a5e <__gethex+0x272>
 80069d4:	f04f 0a02 	mov.w	sl, #2
 80069d8:	4639      	mov	r1, r7
 80069da:	4620      	mov	r0, r4
 80069dc:	f7ff fe9e 	bl	800671c <rshift>
 80069e0:	443d      	add	r5, r7
 80069e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069e6:	42ab      	cmp	r3, r5
 80069e8:	da4a      	bge.n	8006a80 <__gethex+0x294>
 80069ea:	4621      	mov	r1, r4
 80069ec:	9802      	ldr	r0, [sp, #8]
 80069ee:	f000 fa75 	bl	8006edc <_Bfree>
 80069f2:	2300      	movs	r3, #0
 80069f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069f6:	27a3      	movs	r7, #163	; 0xa3
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	e789      	b.n	8006910 <__gethex+0x124>
 80069fc:	1e73      	subs	r3, r6, #1
 80069fe:	9a07      	ldr	r2, [sp, #28]
 8006a00:	9305      	str	r3, [sp, #20]
 8006a02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d019      	beq.n	8006a3e <__gethex+0x252>
 8006a0a:	f1bb 0f20 	cmp.w	fp, #32
 8006a0e:	d107      	bne.n	8006a20 <__gethex+0x234>
 8006a10:	9b04      	ldr	r3, [sp, #16]
 8006a12:	9a01      	ldr	r2, [sp, #4]
 8006a14:	f843 2b04 	str.w	r2, [r3], #4
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	469b      	mov	fp, r3
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006a24:	f7ff fecd 	bl	80067c2 <__hexdig_fun>
 8006a28:	9b01      	ldr	r3, [sp, #4]
 8006a2a:	f000 000f 	and.w	r0, r0, #15
 8006a2e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006a32:	4303      	orrs	r3, r0
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	f10b 0b04 	add.w	fp, fp, #4
 8006a3a:	9b05      	ldr	r3, [sp, #20]
 8006a3c:	e00d      	b.n	8006a5a <__gethex+0x26e>
 8006a3e:	9b05      	ldr	r3, [sp, #20]
 8006a40:	9a08      	ldr	r2, [sp, #32]
 8006a42:	4413      	add	r3, r2
 8006a44:	42bb      	cmp	r3, r7
 8006a46:	d3e0      	bcc.n	8006a0a <__gethex+0x21e>
 8006a48:	4618      	mov	r0, r3
 8006a4a:	4652      	mov	r2, sl
 8006a4c:	9903      	ldr	r1, [sp, #12]
 8006a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a50:	f001 f8e2 	bl	8007c18 <strncmp>
 8006a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d1d7      	bne.n	8006a0a <__gethex+0x21e>
 8006a5a:	461e      	mov	r6, r3
 8006a5c:	e78c      	b.n	8006978 <__gethex+0x18c>
 8006a5e:	f04f 0a03 	mov.w	sl, #3
 8006a62:	e7b9      	b.n	80069d8 <__gethex+0x1ec>
 8006a64:	da09      	bge.n	8006a7a <__gethex+0x28e>
 8006a66:	1bf7      	subs	r7, r6, r7
 8006a68:	4621      	mov	r1, r4
 8006a6a:	463a      	mov	r2, r7
 8006a6c:	9802      	ldr	r0, [sp, #8]
 8006a6e:	f000 fc4d 	bl	800730c <__lshift>
 8006a72:	4604      	mov	r4, r0
 8006a74:	1bed      	subs	r5, r5, r7
 8006a76:	f100 0914 	add.w	r9, r0, #20
 8006a7a:	f04f 0a00 	mov.w	sl, #0
 8006a7e:	e7b0      	b.n	80069e2 <__gethex+0x1f6>
 8006a80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006a84:	42a8      	cmp	r0, r5
 8006a86:	dd71      	ble.n	8006b6c <__gethex+0x380>
 8006a88:	1b45      	subs	r5, r0, r5
 8006a8a:	42ae      	cmp	r6, r5
 8006a8c:	dc34      	bgt.n	8006af8 <__gethex+0x30c>
 8006a8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d028      	beq.n	8006ae8 <__gethex+0x2fc>
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d02a      	beq.n	8006af0 <__gethex+0x304>
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d115      	bne.n	8006aca <__gethex+0x2de>
 8006a9e:	42ae      	cmp	r6, r5
 8006aa0:	d113      	bne.n	8006aca <__gethex+0x2de>
 8006aa2:	2e01      	cmp	r6, #1
 8006aa4:	d10b      	bne.n	8006abe <__gethex+0x2d2>
 8006aa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006aaa:	9a06      	ldr	r2, [sp, #24]
 8006aac:	2762      	movs	r7, #98	; 0x62
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	6123      	str	r3, [r4, #16]
 8006ab4:	f8c9 3000 	str.w	r3, [r9]
 8006ab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006aba:	601c      	str	r4, [r3, #0]
 8006abc:	e728      	b.n	8006910 <__gethex+0x124>
 8006abe:	4620      	mov	r0, r4
 8006ac0:	1e71      	subs	r1, r6, #1
 8006ac2:	f000 fe62 	bl	800778a <__any_on>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d1ed      	bne.n	8006aa6 <__gethex+0x2ba>
 8006aca:	4621      	mov	r1, r4
 8006acc:	9802      	ldr	r0, [sp, #8]
 8006ace:	f000 fa05 	bl	8006edc <_Bfree>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ad6:	2750      	movs	r7, #80	; 0x50
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e719      	b.n	8006910 <__gethex+0x124>
 8006adc:	08009264 	.word	0x08009264
 8006ae0:	080091e9 	.word	0x080091e9
 8006ae4:	080091fa 	.word	0x080091fa
 8006ae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1ed      	bne.n	8006aca <__gethex+0x2de>
 8006aee:	e7da      	b.n	8006aa6 <__gethex+0x2ba>
 8006af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1d7      	bne.n	8006aa6 <__gethex+0x2ba>
 8006af6:	e7e8      	b.n	8006aca <__gethex+0x2de>
 8006af8:	1e6f      	subs	r7, r5, #1
 8006afa:	f1ba 0f00 	cmp.w	sl, #0
 8006afe:	d132      	bne.n	8006b66 <__gethex+0x37a>
 8006b00:	b127      	cbz	r7, 8006b0c <__gethex+0x320>
 8006b02:	4639      	mov	r1, r7
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fe40 	bl	800778a <__any_on>
 8006b0a:	4682      	mov	sl, r0
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	117b      	asrs	r3, r7, #5
 8006b10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006b14:	f007 071f 	and.w	r7, r7, #31
 8006b18:	fa01 f707 	lsl.w	r7, r1, r7
 8006b1c:	421f      	tst	r7, r3
 8006b1e:	f04f 0702 	mov.w	r7, #2
 8006b22:	4629      	mov	r1, r5
 8006b24:	4620      	mov	r0, r4
 8006b26:	bf18      	it	ne
 8006b28:	f04a 0a02 	orrne.w	sl, sl, #2
 8006b2c:	1b76      	subs	r6, r6, r5
 8006b2e:	f7ff fdf5 	bl	800671c <rshift>
 8006b32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006b36:	f1ba 0f00 	cmp.w	sl, #0
 8006b3a:	d048      	beq.n	8006bce <__gethex+0x3e2>
 8006b3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d015      	beq.n	8006b70 <__gethex+0x384>
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d017      	beq.n	8006b78 <__gethex+0x38c>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d109      	bne.n	8006b60 <__gethex+0x374>
 8006b4c:	f01a 0f02 	tst.w	sl, #2
 8006b50:	d006      	beq.n	8006b60 <__gethex+0x374>
 8006b52:	f8d9 0000 	ldr.w	r0, [r9]
 8006b56:	ea4a 0a00 	orr.w	sl, sl, r0
 8006b5a:	f01a 0f01 	tst.w	sl, #1
 8006b5e:	d10e      	bne.n	8006b7e <__gethex+0x392>
 8006b60:	f047 0710 	orr.w	r7, r7, #16
 8006b64:	e033      	b.n	8006bce <__gethex+0x3e2>
 8006b66:	f04f 0a01 	mov.w	sl, #1
 8006b6a:	e7cf      	b.n	8006b0c <__gethex+0x320>
 8006b6c:	2701      	movs	r7, #1
 8006b6e:	e7e2      	b.n	8006b36 <__gethex+0x34a>
 8006b70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b72:	f1c3 0301 	rsb	r3, r3, #1
 8006b76:	9315      	str	r3, [sp, #84]	; 0x54
 8006b78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0f0      	beq.n	8006b60 <__gethex+0x374>
 8006b7e:	f04f 0c00 	mov.w	ip, #0
 8006b82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006b86:	f104 0314 	add.w	r3, r4, #20
 8006b8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006b8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b98:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006b9c:	d01c      	beq.n	8006bd8 <__gethex+0x3ec>
 8006b9e:	3201      	adds	r2, #1
 8006ba0:	6002      	str	r2, [r0, #0]
 8006ba2:	2f02      	cmp	r7, #2
 8006ba4:	f104 0314 	add.w	r3, r4, #20
 8006ba8:	d13d      	bne.n	8006c26 <__gethex+0x43a>
 8006baa:	f8d8 2000 	ldr.w	r2, [r8]
 8006bae:	3a01      	subs	r2, #1
 8006bb0:	42b2      	cmp	r2, r6
 8006bb2:	d10a      	bne.n	8006bca <__gethex+0x3de>
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	1171      	asrs	r1, r6, #5
 8006bb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bbc:	f006 061f 	and.w	r6, r6, #31
 8006bc0:	fa02 f606 	lsl.w	r6, r2, r6
 8006bc4:	421e      	tst	r6, r3
 8006bc6:	bf18      	it	ne
 8006bc8:	4617      	movne	r7, r2
 8006bca:	f047 0720 	orr.w	r7, r7, #32
 8006bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bd0:	601c      	str	r4, [r3, #0]
 8006bd2:	9b06      	ldr	r3, [sp, #24]
 8006bd4:	601d      	str	r5, [r3, #0]
 8006bd6:	e69b      	b.n	8006910 <__gethex+0x124>
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	f843 cc04 	str.w	ip, [r3, #-4]
 8006bde:	d8d8      	bhi.n	8006b92 <__gethex+0x3a6>
 8006be0:	68a3      	ldr	r3, [r4, #8]
 8006be2:	459b      	cmp	fp, r3
 8006be4:	db17      	blt.n	8006c16 <__gethex+0x42a>
 8006be6:	6861      	ldr	r1, [r4, #4]
 8006be8:	9802      	ldr	r0, [sp, #8]
 8006bea:	3101      	adds	r1, #1
 8006bec:	f000 f936 	bl	8006e5c <_Balloc>
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	b918      	cbnz	r0, 8006bfc <__gethex+0x410>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	2184      	movs	r1, #132	; 0x84
 8006bf8:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <__gethex+0x474>)
 8006bfa:	e6ac      	b.n	8006956 <__gethex+0x16a>
 8006bfc:	6922      	ldr	r2, [r4, #16]
 8006bfe:	f104 010c 	add.w	r1, r4, #12
 8006c02:	3202      	adds	r2, #2
 8006c04:	0092      	lsls	r2, r2, #2
 8006c06:	300c      	adds	r0, #12
 8006c08:	f000 f91a 	bl	8006e40 <memcpy>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	9802      	ldr	r0, [sp, #8]
 8006c10:	f000 f964 	bl	8006edc <_Bfree>
 8006c14:	464c      	mov	r4, r9
 8006c16:	6923      	ldr	r3, [r4, #16]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	6122      	str	r2, [r4, #16]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c22:	615a      	str	r2, [r3, #20]
 8006c24:	e7bd      	b.n	8006ba2 <__gethex+0x3b6>
 8006c26:	6922      	ldr	r2, [r4, #16]
 8006c28:	455a      	cmp	r2, fp
 8006c2a:	dd0b      	ble.n	8006c44 <__gethex+0x458>
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f7ff fd74 	bl	800671c <rshift>
 8006c34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c38:	3501      	adds	r5, #1
 8006c3a:	42ab      	cmp	r3, r5
 8006c3c:	f6ff aed5 	blt.w	80069ea <__gethex+0x1fe>
 8006c40:	2701      	movs	r7, #1
 8006c42:	e7c2      	b.n	8006bca <__gethex+0x3de>
 8006c44:	f016 061f 	ands.w	r6, r6, #31
 8006c48:	d0fa      	beq.n	8006c40 <__gethex+0x454>
 8006c4a:	449a      	add	sl, r3
 8006c4c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006c50:	f000 f9fa 	bl	8007048 <__hi0bits>
 8006c54:	f1c6 0620 	rsb	r6, r6, #32
 8006c58:	42b0      	cmp	r0, r6
 8006c5a:	dbe7      	blt.n	8006c2c <__gethex+0x440>
 8006c5c:	e7f0      	b.n	8006c40 <__gethex+0x454>
 8006c5e:	bf00      	nop
 8006c60:	080091e9 	.word	0x080091e9

08006c64 <L_shift>:
 8006c64:	f1c2 0208 	rsb	r2, r2, #8
 8006c68:	0092      	lsls	r2, r2, #2
 8006c6a:	b570      	push	{r4, r5, r6, lr}
 8006c6c:	f1c2 0620 	rsb	r6, r2, #32
 8006c70:	6843      	ldr	r3, [r0, #4]
 8006c72:	6804      	ldr	r4, [r0, #0]
 8006c74:	fa03 f506 	lsl.w	r5, r3, r6
 8006c78:	432c      	orrs	r4, r5
 8006c7a:	40d3      	lsrs	r3, r2
 8006c7c:	6004      	str	r4, [r0, #0]
 8006c7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006c82:	4288      	cmp	r0, r1
 8006c84:	d3f4      	bcc.n	8006c70 <L_shift+0xc>
 8006c86:	bd70      	pop	{r4, r5, r6, pc}

08006c88 <__match>:
 8006c88:	b530      	push	{r4, r5, lr}
 8006c8a:	6803      	ldr	r3, [r0, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c92:	b914      	cbnz	r4, 8006c9a <__match+0x12>
 8006c94:	6003      	str	r3, [r0, #0]
 8006c96:	2001      	movs	r0, #1
 8006c98:	bd30      	pop	{r4, r5, pc}
 8006c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006ca2:	2d19      	cmp	r5, #25
 8006ca4:	bf98      	it	ls
 8006ca6:	3220      	addls	r2, #32
 8006ca8:	42a2      	cmp	r2, r4
 8006caa:	d0f0      	beq.n	8006c8e <__match+0x6>
 8006cac:	2000      	movs	r0, #0
 8006cae:	e7f3      	b.n	8006c98 <__match+0x10>

08006cb0 <__hexnan>:
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	2500      	movs	r5, #0
 8006cb6:	680b      	ldr	r3, [r1, #0]
 8006cb8:	4682      	mov	sl, r0
 8006cba:	115e      	asrs	r6, r3, #5
 8006cbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006cc0:	f013 031f 	ands.w	r3, r3, #31
 8006cc4:	bf18      	it	ne
 8006cc6:	3604      	addne	r6, #4
 8006cc8:	1f37      	subs	r7, r6, #4
 8006cca:	4690      	mov	r8, r2
 8006ccc:	46b9      	mov	r9, r7
 8006cce:	463c      	mov	r4, r7
 8006cd0:	46ab      	mov	fp, r5
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	6801      	ldr	r1, [r0, #0]
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	f846 5c04 	str.w	r5, [r6, #-4]
 8006cdc:	9502      	str	r5, [sp, #8]
 8006cde:	784a      	ldrb	r2, [r1, #1]
 8006ce0:	1c4b      	adds	r3, r1, #1
 8006ce2:	9303      	str	r3, [sp, #12]
 8006ce4:	b342      	cbz	r2, 8006d38 <__hexnan+0x88>
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	9105      	str	r1, [sp, #20]
 8006cea:	9204      	str	r2, [sp, #16]
 8006cec:	f7ff fd69 	bl	80067c2 <__hexdig_fun>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d14f      	bne.n	8006d94 <__hexnan+0xe4>
 8006cf4:	9a04      	ldr	r2, [sp, #16]
 8006cf6:	9905      	ldr	r1, [sp, #20]
 8006cf8:	2a20      	cmp	r2, #32
 8006cfa:	d818      	bhi.n	8006d2e <__hexnan+0x7e>
 8006cfc:	9b02      	ldr	r3, [sp, #8]
 8006cfe:	459b      	cmp	fp, r3
 8006d00:	dd13      	ble.n	8006d2a <__hexnan+0x7a>
 8006d02:	454c      	cmp	r4, r9
 8006d04:	d206      	bcs.n	8006d14 <__hexnan+0x64>
 8006d06:	2d07      	cmp	r5, #7
 8006d08:	dc04      	bgt.n	8006d14 <__hexnan+0x64>
 8006d0a:	462a      	mov	r2, r5
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff ffa8 	bl	8006c64 <L_shift>
 8006d14:	4544      	cmp	r4, r8
 8006d16:	d950      	bls.n	8006dba <__hexnan+0x10a>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f1a4 0904 	sub.w	r9, r4, #4
 8006d1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d22:	461d      	mov	r5, r3
 8006d24:	464c      	mov	r4, r9
 8006d26:	f8cd b008 	str.w	fp, [sp, #8]
 8006d2a:	9903      	ldr	r1, [sp, #12]
 8006d2c:	e7d7      	b.n	8006cde <__hexnan+0x2e>
 8006d2e:	2a29      	cmp	r2, #41	; 0x29
 8006d30:	d156      	bne.n	8006de0 <__hexnan+0x130>
 8006d32:	3102      	adds	r1, #2
 8006d34:	f8ca 1000 	str.w	r1, [sl]
 8006d38:	f1bb 0f00 	cmp.w	fp, #0
 8006d3c:	d050      	beq.n	8006de0 <__hexnan+0x130>
 8006d3e:	454c      	cmp	r4, r9
 8006d40:	d206      	bcs.n	8006d50 <__hexnan+0xa0>
 8006d42:	2d07      	cmp	r5, #7
 8006d44:	dc04      	bgt.n	8006d50 <__hexnan+0xa0>
 8006d46:	462a      	mov	r2, r5
 8006d48:	4649      	mov	r1, r9
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f7ff ff8a 	bl	8006c64 <L_shift>
 8006d50:	4544      	cmp	r4, r8
 8006d52:	d934      	bls.n	8006dbe <__hexnan+0x10e>
 8006d54:	4623      	mov	r3, r4
 8006d56:	f1a8 0204 	sub.w	r2, r8, #4
 8006d5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006d5e:	429f      	cmp	r7, r3
 8006d60:	f842 1f04 	str.w	r1, [r2, #4]!
 8006d64:	d2f9      	bcs.n	8006d5a <__hexnan+0xaa>
 8006d66:	1b3b      	subs	r3, r7, r4
 8006d68:	f023 0303 	bic.w	r3, r3, #3
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	3401      	adds	r4, #1
 8006d70:	3e03      	subs	r6, #3
 8006d72:	42b4      	cmp	r4, r6
 8006d74:	bf88      	it	hi
 8006d76:	2304      	movhi	r3, #4
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4443      	add	r3, r8
 8006d7c:	f843 2b04 	str.w	r2, [r3], #4
 8006d80:	429f      	cmp	r7, r3
 8006d82:	d2fb      	bcs.n	8006d7c <__hexnan+0xcc>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	b91b      	cbnz	r3, 8006d90 <__hexnan+0xe0>
 8006d88:	4547      	cmp	r7, r8
 8006d8a:	d127      	bne.n	8006ddc <__hexnan+0x12c>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	2005      	movs	r0, #5
 8006d92:	e026      	b.n	8006de2 <__hexnan+0x132>
 8006d94:	3501      	adds	r5, #1
 8006d96:	2d08      	cmp	r5, #8
 8006d98:	f10b 0b01 	add.w	fp, fp, #1
 8006d9c:	dd06      	ble.n	8006dac <__hexnan+0xfc>
 8006d9e:	4544      	cmp	r4, r8
 8006da0:	d9c3      	bls.n	8006d2a <__hexnan+0x7a>
 8006da2:	2300      	movs	r3, #0
 8006da4:	2501      	movs	r5, #1
 8006da6:	f844 3c04 	str.w	r3, [r4, #-4]
 8006daa:	3c04      	subs	r4, #4
 8006dac:	6822      	ldr	r2, [r4, #0]
 8006dae:	f000 000f 	and.w	r0, r0, #15
 8006db2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006db6:	6022      	str	r2, [r4, #0]
 8006db8:	e7b7      	b.n	8006d2a <__hexnan+0x7a>
 8006dba:	2508      	movs	r5, #8
 8006dbc:	e7b5      	b.n	8006d2a <__hexnan+0x7a>
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0df      	beq.n	8006d84 <__hexnan+0xd4>
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	f1c3 0320 	rsb	r3, r3, #32
 8006dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006dd4:	401a      	ands	r2, r3
 8006dd6:	f846 2c04 	str.w	r2, [r6, #-4]
 8006dda:	e7d3      	b.n	8006d84 <__hexnan+0xd4>
 8006ddc:	3f04      	subs	r7, #4
 8006dde:	e7d1      	b.n	8006d84 <__hexnan+0xd4>
 8006de0:	2004      	movs	r0, #4
 8006de2:	b007      	add	sp, #28
 8006de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006de8 <_localeconv_r>:
 8006de8:	4800      	ldr	r0, [pc, #0]	; (8006dec <_localeconv_r+0x4>)
 8006dea:	4770      	bx	lr
 8006dec:	2000016c 	.word	0x2000016c

08006df0 <malloc>:
 8006df0:	4b02      	ldr	r3, [pc, #8]	; (8006dfc <malloc+0xc>)
 8006df2:	4601      	mov	r1, r0
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	f000 bd43 	b.w	8007880 <_malloc_r>
 8006dfa:	bf00      	nop
 8006dfc:	20000014 	.word	0x20000014

08006e00 <__ascii_mbtowc>:
 8006e00:	b082      	sub	sp, #8
 8006e02:	b901      	cbnz	r1, 8006e06 <__ascii_mbtowc+0x6>
 8006e04:	a901      	add	r1, sp, #4
 8006e06:	b142      	cbz	r2, 8006e1a <__ascii_mbtowc+0x1a>
 8006e08:	b14b      	cbz	r3, 8006e1e <__ascii_mbtowc+0x1e>
 8006e0a:	7813      	ldrb	r3, [r2, #0]
 8006e0c:	600b      	str	r3, [r1, #0]
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	1e10      	subs	r0, r2, #0
 8006e12:	bf18      	it	ne
 8006e14:	2001      	movne	r0, #1
 8006e16:	b002      	add	sp, #8
 8006e18:	4770      	bx	lr
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	e7fb      	b.n	8006e16 <__ascii_mbtowc+0x16>
 8006e1e:	f06f 0001 	mvn.w	r0, #1
 8006e22:	e7f8      	b.n	8006e16 <__ascii_mbtowc+0x16>

08006e24 <memchr>:
 8006e24:	4603      	mov	r3, r0
 8006e26:	b510      	push	{r4, lr}
 8006e28:	b2c9      	uxtb	r1, r1
 8006e2a:	4402      	add	r2, r0
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	d101      	bne.n	8006e36 <memchr+0x12>
 8006e32:	2000      	movs	r0, #0
 8006e34:	e003      	b.n	8006e3e <memchr+0x1a>
 8006e36:	7804      	ldrb	r4, [r0, #0]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	428c      	cmp	r4, r1
 8006e3c:	d1f6      	bne.n	8006e2c <memchr+0x8>
 8006e3e:	bd10      	pop	{r4, pc}

08006e40 <memcpy>:
 8006e40:	440a      	add	r2, r1
 8006e42:	4291      	cmp	r1, r2
 8006e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e48:	d100      	bne.n	8006e4c <memcpy+0xc>
 8006e4a:	4770      	bx	lr
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e52:	4291      	cmp	r1, r2
 8006e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e58:	d1f9      	bne.n	8006e4e <memcpy+0xe>
 8006e5a:	bd10      	pop	{r4, pc}

08006e5c <_Balloc>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e60:	4604      	mov	r4, r0
 8006e62:	460d      	mov	r5, r1
 8006e64:	b976      	cbnz	r6, 8006e84 <_Balloc+0x28>
 8006e66:	2010      	movs	r0, #16
 8006e68:	f7ff ffc2 	bl	8006df0 <malloc>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	6260      	str	r0, [r4, #36]	; 0x24
 8006e70:	b920      	cbnz	r0, 8006e7c <_Balloc+0x20>
 8006e72:	2166      	movs	r1, #102	; 0x66
 8006e74:	4b17      	ldr	r3, [pc, #92]	; (8006ed4 <_Balloc+0x78>)
 8006e76:	4818      	ldr	r0, [pc, #96]	; (8006ed8 <_Balloc+0x7c>)
 8006e78:	f000 feee 	bl	8007c58 <__assert_func>
 8006e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e80:	6006      	str	r6, [r0, #0]
 8006e82:	60c6      	str	r6, [r0, #12]
 8006e84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e86:	68f3      	ldr	r3, [r6, #12]
 8006e88:	b183      	cbz	r3, 8006eac <_Balloc+0x50>
 8006e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e92:	b9b8      	cbnz	r0, 8006ec4 <_Balloc+0x68>
 8006e94:	2101      	movs	r1, #1
 8006e96:	fa01 f605 	lsl.w	r6, r1, r5
 8006e9a:	1d72      	adds	r2, r6, #5
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	0092      	lsls	r2, r2, #2
 8006ea0:	f000 fc94 	bl	80077cc <_calloc_r>
 8006ea4:	b160      	cbz	r0, 8006ec0 <_Balloc+0x64>
 8006ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006eaa:	e00e      	b.n	8006eca <_Balloc+0x6e>
 8006eac:	2221      	movs	r2, #33	; 0x21
 8006eae:	2104      	movs	r1, #4
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 fc8b 	bl	80077cc <_calloc_r>
 8006eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eb8:	60f0      	str	r0, [r6, #12]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e4      	bne.n	8006e8a <_Balloc+0x2e>
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	6802      	ldr	r2, [r0, #0]
 8006ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ed0:	e7f7      	b.n	8006ec2 <_Balloc+0x66>
 8006ed2:	bf00      	nop
 8006ed4:	08009173 	.word	0x08009173
 8006ed8:	08009278 	.word	0x08009278

08006edc <_Bfree>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	b976      	cbnz	r6, 8006f04 <_Bfree+0x28>
 8006ee6:	2010      	movs	r0, #16
 8006ee8:	f7ff ff82 	bl	8006df0 <malloc>
 8006eec:	4602      	mov	r2, r0
 8006eee:	6268      	str	r0, [r5, #36]	; 0x24
 8006ef0:	b920      	cbnz	r0, 8006efc <_Bfree+0x20>
 8006ef2:	218a      	movs	r1, #138	; 0x8a
 8006ef4:	4b08      	ldr	r3, [pc, #32]	; (8006f18 <_Bfree+0x3c>)
 8006ef6:	4809      	ldr	r0, [pc, #36]	; (8006f1c <_Bfree+0x40>)
 8006ef8:	f000 feae 	bl	8007c58 <__assert_func>
 8006efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f00:	6006      	str	r6, [r0, #0]
 8006f02:	60c6      	str	r6, [r0, #12]
 8006f04:	b13c      	cbz	r4, 8006f16 <_Bfree+0x3a>
 8006f06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f08:	6862      	ldr	r2, [r4, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f10:	6021      	str	r1, [r4, #0]
 8006f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	08009173 	.word	0x08009173
 8006f1c:	08009278 	.word	0x08009278

08006f20 <__multadd>:
 8006f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f24:	4698      	mov	r8, r3
 8006f26:	460c      	mov	r4, r1
 8006f28:	2300      	movs	r3, #0
 8006f2a:	690e      	ldr	r6, [r1, #16]
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	f101 0014 	add.w	r0, r1, #20
 8006f32:	6805      	ldr	r5, [r0, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	b2a9      	uxth	r1, r5
 8006f38:	fb02 8101 	mla	r1, r2, r1, r8
 8006f3c:	0c2d      	lsrs	r5, r5, #16
 8006f3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006f42:	fb02 c505 	mla	r5, r2, r5, ip
 8006f46:	b289      	uxth	r1, r1
 8006f48:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006f4c:	429e      	cmp	r6, r3
 8006f4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006f52:	f840 1b04 	str.w	r1, [r0], #4
 8006f56:	dcec      	bgt.n	8006f32 <__multadd+0x12>
 8006f58:	f1b8 0f00 	cmp.w	r8, #0
 8006f5c:	d022      	beq.n	8006fa4 <__multadd+0x84>
 8006f5e:	68a3      	ldr	r3, [r4, #8]
 8006f60:	42b3      	cmp	r3, r6
 8006f62:	dc19      	bgt.n	8006f98 <__multadd+0x78>
 8006f64:	6861      	ldr	r1, [r4, #4]
 8006f66:	4638      	mov	r0, r7
 8006f68:	3101      	adds	r1, #1
 8006f6a:	f7ff ff77 	bl	8006e5c <_Balloc>
 8006f6e:	4605      	mov	r5, r0
 8006f70:	b928      	cbnz	r0, 8006f7e <__multadd+0x5e>
 8006f72:	4602      	mov	r2, r0
 8006f74:	21b5      	movs	r1, #181	; 0xb5
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <__multadd+0x8c>)
 8006f78:	480d      	ldr	r0, [pc, #52]	; (8006fb0 <__multadd+0x90>)
 8006f7a:	f000 fe6d 	bl	8007c58 <__assert_func>
 8006f7e:	6922      	ldr	r2, [r4, #16]
 8006f80:	f104 010c 	add.w	r1, r4, #12
 8006f84:	3202      	adds	r2, #2
 8006f86:	0092      	lsls	r2, r2, #2
 8006f88:	300c      	adds	r0, #12
 8006f8a:	f7ff ff59 	bl	8006e40 <memcpy>
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4638      	mov	r0, r7
 8006f92:	f7ff ffa3 	bl	8006edc <_Bfree>
 8006f96:	462c      	mov	r4, r5
 8006f98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f9c:	3601      	adds	r6, #1
 8006f9e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006fa2:	6126      	str	r6, [r4, #16]
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006faa:	bf00      	nop
 8006fac:	080091e9 	.word	0x080091e9
 8006fb0:	08009278 	.word	0x08009278

08006fb4 <__s2b>:
 8006fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb8:	4615      	mov	r5, r2
 8006fba:	2209      	movs	r2, #9
 8006fbc:	461f      	mov	r7, r3
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	2201      	movs	r2, #1
 8006fca:	2100      	movs	r1, #0
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	db09      	blt.n	8006fe4 <__s2b+0x30>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f7ff ff43 	bl	8006e5c <_Balloc>
 8006fd6:	b940      	cbnz	r0, 8006fea <__s2b+0x36>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	21ce      	movs	r1, #206	; 0xce
 8006fdc:	4b18      	ldr	r3, [pc, #96]	; (8007040 <__s2b+0x8c>)
 8006fde:	4819      	ldr	r0, [pc, #100]	; (8007044 <__s2b+0x90>)
 8006fe0:	f000 fe3a 	bl	8007c58 <__assert_func>
 8006fe4:	0052      	lsls	r2, r2, #1
 8006fe6:	3101      	adds	r1, #1
 8006fe8:	e7f0      	b.n	8006fcc <__s2b+0x18>
 8006fea:	9b08      	ldr	r3, [sp, #32]
 8006fec:	2d09      	cmp	r5, #9
 8006fee:	6143      	str	r3, [r0, #20]
 8006ff0:	f04f 0301 	mov.w	r3, #1
 8006ff4:	6103      	str	r3, [r0, #16]
 8006ff6:	dd16      	ble.n	8007026 <__s2b+0x72>
 8006ff8:	f104 0909 	add.w	r9, r4, #9
 8006ffc:	46c8      	mov	r8, r9
 8006ffe:	442c      	add	r4, r5
 8007000:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007004:	4601      	mov	r1, r0
 8007006:	220a      	movs	r2, #10
 8007008:	4630      	mov	r0, r6
 800700a:	3b30      	subs	r3, #48	; 0x30
 800700c:	f7ff ff88 	bl	8006f20 <__multadd>
 8007010:	45a0      	cmp	r8, r4
 8007012:	d1f5      	bne.n	8007000 <__s2b+0x4c>
 8007014:	f1a5 0408 	sub.w	r4, r5, #8
 8007018:	444c      	add	r4, r9
 800701a:	1b2d      	subs	r5, r5, r4
 800701c:	1963      	adds	r3, r4, r5
 800701e:	42bb      	cmp	r3, r7
 8007020:	db04      	blt.n	800702c <__s2b+0x78>
 8007022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007026:	2509      	movs	r5, #9
 8007028:	340a      	adds	r4, #10
 800702a:	e7f6      	b.n	800701a <__s2b+0x66>
 800702c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007030:	4601      	mov	r1, r0
 8007032:	220a      	movs	r2, #10
 8007034:	4630      	mov	r0, r6
 8007036:	3b30      	subs	r3, #48	; 0x30
 8007038:	f7ff ff72 	bl	8006f20 <__multadd>
 800703c:	e7ee      	b.n	800701c <__s2b+0x68>
 800703e:	bf00      	nop
 8007040:	080091e9 	.word	0x080091e9
 8007044:	08009278 	.word	0x08009278

08007048 <__hi0bits>:
 8007048:	0c02      	lsrs	r2, r0, #16
 800704a:	0412      	lsls	r2, r2, #16
 800704c:	4603      	mov	r3, r0
 800704e:	b9ca      	cbnz	r2, 8007084 <__hi0bits+0x3c>
 8007050:	0403      	lsls	r3, r0, #16
 8007052:	2010      	movs	r0, #16
 8007054:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007058:	bf04      	itt	eq
 800705a:	021b      	lsleq	r3, r3, #8
 800705c:	3008      	addeq	r0, #8
 800705e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007062:	bf04      	itt	eq
 8007064:	011b      	lsleq	r3, r3, #4
 8007066:	3004      	addeq	r0, #4
 8007068:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800706c:	bf04      	itt	eq
 800706e:	009b      	lsleq	r3, r3, #2
 8007070:	3002      	addeq	r0, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	db05      	blt.n	8007082 <__hi0bits+0x3a>
 8007076:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800707a:	f100 0001 	add.w	r0, r0, #1
 800707e:	bf08      	it	eq
 8007080:	2020      	moveq	r0, #32
 8007082:	4770      	bx	lr
 8007084:	2000      	movs	r0, #0
 8007086:	e7e5      	b.n	8007054 <__hi0bits+0xc>

08007088 <__lo0bits>:
 8007088:	6803      	ldr	r3, [r0, #0]
 800708a:	4602      	mov	r2, r0
 800708c:	f013 0007 	ands.w	r0, r3, #7
 8007090:	d00b      	beq.n	80070aa <__lo0bits+0x22>
 8007092:	07d9      	lsls	r1, r3, #31
 8007094:	d422      	bmi.n	80070dc <__lo0bits+0x54>
 8007096:	0798      	lsls	r0, r3, #30
 8007098:	bf49      	itett	mi
 800709a:	085b      	lsrmi	r3, r3, #1
 800709c:	089b      	lsrpl	r3, r3, #2
 800709e:	2001      	movmi	r0, #1
 80070a0:	6013      	strmi	r3, [r2, #0]
 80070a2:	bf5c      	itt	pl
 80070a4:	2002      	movpl	r0, #2
 80070a6:	6013      	strpl	r3, [r2, #0]
 80070a8:	4770      	bx	lr
 80070aa:	b299      	uxth	r1, r3
 80070ac:	b909      	cbnz	r1, 80070b2 <__lo0bits+0x2a>
 80070ae:	2010      	movs	r0, #16
 80070b0:	0c1b      	lsrs	r3, r3, #16
 80070b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80070b6:	bf04      	itt	eq
 80070b8:	0a1b      	lsreq	r3, r3, #8
 80070ba:	3008      	addeq	r0, #8
 80070bc:	0719      	lsls	r1, r3, #28
 80070be:	bf04      	itt	eq
 80070c0:	091b      	lsreq	r3, r3, #4
 80070c2:	3004      	addeq	r0, #4
 80070c4:	0799      	lsls	r1, r3, #30
 80070c6:	bf04      	itt	eq
 80070c8:	089b      	lsreq	r3, r3, #2
 80070ca:	3002      	addeq	r0, #2
 80070cc:	07d9      	lsls	r1, r3, #31
 80070ce:	d403      	bmi.n	80070d8 <__lo0bits+0x50>
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	f100 0001 	add.w	r0, r0, #1
 80070d6:	d003      	beq.n	80070e0 <__lo0bits+0x58>
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	4770      	bx	lr
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr
 80070e0:	2020      	movs	r0, #32
 80070e2:	4770      	bx	lr

080070e4 <__i2b>:
 80070e4:	b510      	push	{r4, lr}
 80070e6:	460c      	mov	r4, r1
 80070e8:	2101      	movs	r1, #1
 80070ea:	f7ff feb7 	bl	8006e5c <_Balloc>
 80070ee:	4602      	mov	r2, r0
 80070f0:	b928      	cbnz	r0, 80070fe <__i2b+0x1a>
 80070f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070f6:	4b04      	ldr	r3, [pc, #16]	; (8007108 <__i2b+0x24>)
 80070f8:	4804      	ldr	r0, [pc, #16]	; (800710c <__i2b+0x28>)
 80070fa:	f000 fdad 	bl	8007c58 <__assert_func>
 80070fe:	2301      	movs	r3, #1
 8007100:	6144      	str	r4, [r0, #20]
 8007102:	6103      	str	r3, [r0, #16]
 8007104:	bd10      	pop	{r4, pc}
 8007106:	bf00      	nop
 8007108:	080091e9 	.word	0x080091e9
 800710c:	08009278 	.word	0x08009278

08007110 <__multiply>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	4614      	mov	r4, r2
 8007116:	690a      	ldr	r2, [r1, #16]
 8007118:	6923      	ldr	r3, [r4, #16]
 800711a:	460d      	mov	r5, r1
 800711c:	429a      	cmp	r2, r3
 800711e:	bfbe      	ittt	lt
 8007120:	460b      	movlt	r3, r1
 8007122:	4625      	movlt	r5, r4
 8007124:	461c      	movlt	r4, r3
 8007126:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800712a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800712e:	68ab      	ldr	r3, [r5, #8]
 8007130:	6869      	ldr	r1, [r5, #4]
 8007132:	eb0a 0709 	add.w	r7, sl, r9
 8007136:	42bb      	cmp	r3, r7
 8007138:	b085      	sub	sp, #20
 800713a:	bfb8      	it	lt
 800713c:	3101      	addlt	r1, #1
 800713e:	f7ff fe8d 	bl	8006e5c <_Balloc>
 8007142:	b930      	cbnz	r0, 8007152 <__multiply+0x42>
 8007144:	4602      	mov	r2, r0
 8007146:	f240 115d 	movw	r1, #349	; 0x15d
 800714a:	4b41      	ldr	r3, [pc, #260]	; (8007250 <__multiply+0x140>)
 800714c:	4841      	ldr	r0, [pc, #260]	; (8007254 <__multiply+0x144>)
 800714e:	f000 fd83 	bl	8007c58 <__assert_func>
 8007152:	f100 0614 	add.w	r6, r0, #20
 8007156:	4633      	mov	r3, r6
 8007158:	2200      	movs	r2, #0
 800715a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800715e:	4543      	cmp	r3, r8
 8007160:	d31e      	bcc.n	80071a0 <__multiply+0x90>
 8007162:	f105 0c14 	add.w	ip, r5, #20
 8007166:	f104 0314 	add.w	r3, r4, #20
 800716a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800716e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007172:	9202      	str	r2, [sp, #8]
 8007174:	ebac 0205 	sub.w	r2, ip, r5
 8007178:	3a15      	subs	r2, #21
 800717a:	f022 0203 	bic.w	r2, r2, #3
 800717e:	3204      	adds	r2, #4
 8007180:	f105 0115 	add.w	r1, r5, #21
 8007184:	458c      	cmp	ip, r1
 8007186:	bf38      	it	cc
 8007188:	2204      	movcc	r2, #4
 800718a:	9201      	str	r2, [sp, #4]
 800718c:	9a02      	ldr	r2, [sp, #8]
 800718e:	9303      	str	r3, [sp, #12]
 8007190:	429a      	cmp	r2, r3
 8007192:	d808      	bhi.n	80071a6 <__multiply+0x96>
 8007194:	2f00      	cmp	r7, #0
 8007196:	dc55      	bgt.n	8007244 <__multiply+0x134>
 8007198:	6107      	str	r7, [r0, #16]
 800719a:	b005      	add	sp, #20
 800719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a0:	f843 2b04 	str.w	r2, [r3], #4
 80071a4:	e7db      	b.n	800715e <__multiply+0x4e>
 80071a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80071aa:	f1ba 0f00 	cmp.w	sl, #0
 80071ae:	d020      	beq.n	80071f2 <__multiply+0xe2>
 80071b0:	46b1      	mov	r9, r6
 80071b2:	2200      	movs	r2, #0
 80071b4:	f105 0e14 	add.w	lr, r5, #20
 80071b8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80071bc:	f8d9 b000 	ldr.w	fp, [r9]
 80071c0:	b2a1      	uxth	r1, r4
 80071c2:	fa1f fb8b 	uxth.w	fp, fp
 80071c6:	fb0a b101 	mla	r1, sl, r1, fp
 80071ca:	4411      	add	r1, r2
 80071cc:	f8d9 2000 	ldr.w	r2, [r9]
 80071d0:	0c24      	lsrs	r4, r4, #16
 80071d2:	0c12      	lsrs	r2, r2, #16
 80071d4:	fb0a 2404 	mla	r4, sl, r4, r2
 80071d8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80071dc:	b289      	uxth	r1, r1
 80071de:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80071e2:	45f4      	cmp	ip, lr
 80071e4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80071e8:	f849 1b04 	str.w	r1, [r9], #4
 80071ec:	d8e4      	bhi.n	80071b8 <__multiply+0xa8>
 80071ee:	9901      	ldr	r1, [sp, #4]
 80071f0:	5072      	str	r2, [r6, r1]
 80071f2:	9a03      	ldr	r2, [sp, #12]
 80071f4:	3304      	adds	r3, #4
 80071f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071fa:	f1b9 0f00 	cmp.w	r9, #0
 80071fe:	d01f      	beq.n	8007240 <__multiply+0x130>
 8007200:	46b6      	mov	lr, r6
 8007202:	f04f 0a00 	mov.w	sl, #0
 8007206:	6834      	ldr	r4, [r6, #0]
 8007208:	f105 0114 	add.w	r1, r5, #20
 800720c:	880a      	ldrh	r2, [r1, #0]
 800720e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007212:	b2a4      	uxth	r4, r4
 8007214:	fb09 b202 	mla	r2, r9, r2, fp
 8007218:	4492      	add	sl, r2
 800721a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800721e:	f84e 4b04 	str.w	r4, [lr], #4
 8007222:	f851 4b04 	ldr.w	r4, [r1], #4
 8007226:	f8be 2000 	ldrh.w	r2, [lr]
 800722a:	0c24      	lsrs	r4, r4, #16
 800722c:	fb09 2404 	mla	r4, r9, r4, r2
 8007230:	458c      	cmp	ip, r1
 8007232:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007236:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800723a:	d8e7      	bhi.n	800720c <__multiply+0xfc>
 800723c:	9a01      	ldr	r2, [sp, #4]
 800723e:	50b4      	str	r4, [r6, r2]
 8007240:	3604      	adds	r6, #4
 8007242:	e7a3      	b.n	800718c <__multiply+0x7c>
 8007244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1a5      	bne.n	8007198 <__multiply+0x88>
 800724c:	3f01      	subs	r7, #1
 800724e:	e7a1      	b.n	8007194 <__multiply+0x84>
 8007250:	080091e9 	.word	0x080091e9
 8007254:	08009278 	.word	0x08009278

08007258 <__pow5mult>:
 8007258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800725c:	4615      	mov	r5, r2
 800725e:	f012 0203 	ands.w	r2, r2, #3
 8007262:	4606      	mov	r6, r0
 8007264:	460f      	mov	r7, r1
 8007266:	d007      	beq.n	8007278 <__pow5mult+0x20>
 8007268:	4c25      	ldr	r4, [pc, #148]	; (8007300 <__pow5mult+0xa8>)
 800726a:	3a01      	subs	r2, #1
 800726c:	2300      	movs	r3, #0
 800726e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007272:	f7ff fe55 	bl	8006f20 <__multadd>
 8007276:	4607      	mov	r7, r0
 8007278:	10ad      	asrs	r5, r5, #2
 800727a:	d03d      	beq.n	80072f8 <__pow5mult+0xa0>
 800727c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800727e:	b97c      	cbnz	r4, 80072a0 <__pow5mult+0x48>
 8007280:	2010      	movs	r0, #16
 8007282:	f7ff fdb5 	bl	8006df0 <malloc>
 8007286:	4602      	mov	r2, r0
 8007288:	6270      	str	r0, [r6, #36]	; 0x24
 800728a:	b928      	cbnz	r0, 8007298 <__pow5mult+0x40>
 800728c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007290:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <__pow5mult+0xac>)
 8007292:	481d      	ldr	r0, [pc, #116]	; (8007308 <__pow5mult+0xb0>)
 8007294:	f000 fce0 	bl	8007c58 <__assert_func>
 8007298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800729c:	6004      	str	r4, [r0, #0]
 800729e:	60c4      	str	r4, [r0, #12]
 80072a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072a8:	b94c      	cbnz	r4, 80072be <__pow5mult+0x66>
 80072aa:	f240 2171 	movw	r1, #625	; 0x271
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff ff18 	bl	80070e4 <__i2b>
 80072b4:	2300      	movs	r3, #0
 80072b6:	4604      	mov	r4, r0
 80072b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	f04f 0900 	mov.w	r9, #0
 80072c2:	07eb      	lsls	r3, r5, #31
 80072c4:	d50a      	bpl.n	80072dc <__pow5mult+0x84>
 80072c6:	4639      	mov	r1, r7
 80072c8:	4622      	mov	r2, r4
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff ff20 	bl	8007110 <__multiply>
 80072d0:	4680      	mov	r8, r0
 80072d2:	4639      	mov	r1, r7
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7ff fe01 	bl	8006edc <_Bfree>
 80072da:	4647      	mov	r7, r8
 80072dc:	106d      	asrs	r5, r5, #1
 80072de:	d00b      	beq.n	80072f8 <__pow5mult+0xa0>
 80072e0:	6820      	ldr	r0, [r4, #0]
 80072e2:	b938      	cbnz	r0, 80072f4 <__pow5mult+0x9c>
 80072e4:	4622      	mov	r2, r4
 80072e6:	4621      	mov	r1, r4
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff ff11 	bl	8007110 <__multiply>
 80072ee:	6020      	str	r0, [r4, #0]
 80072f0:	f8c0 9000 	str.w	r9, [r0]
 80072f4:	4604      	mov	r4, r0
 80072f6:	e7e4      	b.n	80072c2 <__pow5mult+0x6a>
 80072f8:	4638      	mov	r0, r7
 80072fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072fe:	bf00      	nop
 8007300:	080093c8 	.word	0x080093c8
 8007304:	08009173 	.word	0x08009173
 8007308:	08009278 	.word	0x08009278

0800730c <__lshift>:
 800730c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	460c      	mov	r4, r1
 8007312:	4607      	mov	r7, r0
 8007314:	4691      	mov	r9, r2
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	6849      	ldr	r1, [r1, #4]
 800731a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007324:	f108 0601 	add.w	r6, r8, #1
 8007328:	42b3      	cmp	r3, r6
 800732a:	db0b      	blt.n	8007344 <__lshift+0x38>
 800732c:	4638      	mov	r0, r7
 800732e:	f7ff fd95 	bl	8006e5c <_Balloc>
 8007332:	4605      	mov	r5, r0
 8007334:	b948      	cbnz	r0, 800734a <__lshift+0x3e>
 8007336:	4602      	mov	r2, r0
 8007338:	f240 11d9 	movw	r1, #473	; 0x1d9
 800733c:	4b27      	ldr	r3, [pc, #156]	; (80073dc <__lshift+0xd0>)
 800733e:	4828      	ldr	r0, [pc, #160]	; (80073e0 <__lshift+0xd4>)
 8007340:	f000 fc8a 	bl	8007c58 <__assert_func>
 8007344:	3101      	adds	r1, #1
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	e7ee      	b.n	8007328 <__lshift+0x1c>
 800734a:	2300      	movs	r3, #0
 800734c:	f100 0114 	add.w	r1, r0, #20
 8007350:	f100 0210 	add.w	r2, r0, #16
 8007354:	4618      	mov	r0, r3
 8007356:	4553      	cmp	r3, sl
 8007358:	db33      	blt.n	80073c2 <__lshift+0xb6>
 800735a:	6920      	ldr	r0, [r4, #16]
 800735c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007360:	f104 0314 	add.w	r3, r4, #20
 8007364:	f019 091f 	ands.w	r9, r9, #31
 8007368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800736c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007370:	d02b      	beq.n	80073ca <__lshift+0xbe>
 8007372:	468a      	mov	sl, r1
 8007374:	2200      	movs	r2, #0
 8007376:	f1c9 0e20 	rsb	lr, r9, #32
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	fa00 f009 	lsl.w	r0, r0, r9
 8007380:	4302      	orrs	r2, r0
 8007382:	f84a 2b04 	str.w	r2, [sl], #4
 8007386:	f853 2b04 	ldr.w	r2, [r3], #4
 800738a:	459c      	cmp	ip, r3
 800738c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007390:	d8f3      	bhi.n	800737a <__lshift+0x6e>
 8007392:	ebac 0304 	sub.w	r3, ip, r4
 8007396:	3b15      	subs	r3, #21
 8007398:	f023 0303 	bic.w	r3, r3, #3
 800739c:	3304      	adds	r3, #4
 800739e:	f104 0015 	add.w	r0, r4, #21
 80073a2:	4584      	cmp	ip, r0
 80073a4:	bf38      	it	cc
 80073a6:	2304      	movcc	r3, #4
 80073a8:	50ca      	str	r2, [r1, r3]
 80073aa:	b10a      	cbz	r2, 80073b0 <__lshift+0xa4>
 80073ac:	f108 0602 	add.w	r6, r8, #2
 80073b0:	3e01      	subs	r6, #1
 80073b2:	4638      	mov	r0, r7
 80073b4:	4621      	mov	r1, r4
 80073b6:	612e      	str	r6, [r5, #16]
 80073b8:	f7ff fd90 	bl	8006edc <_Bfree>
 80073bc:	4628      	mov	r0, r5
 80073be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80073c6:	3301      	adds	r3, #1
 80073c8:	e7c5      	b.n	8007356 <__lshift+0x4a>
 80073ca:	3904      	subs	r1, #4
 80073cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d0:	459c      	cmp	ip, r3
 80073d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80073d6:	d8f9      	bhi.n	80073cc <__lshift+0xc0>
 80073d8:	e7ea      	b.n	80073b0 <__lshift+0xa4>
 80073da:	bf00      	nop
 80073dc:	080091e9 	.word	0x080091e9
 80073e0:	08009278 	.word	0x08009278

080073e4 <__mcmp>:
 80073e4:	4603      	mov	r3, r0
 80073e6:	690a      	ldr	r2, [r1, #16]
 80073e8:	6900      	ldr	r0, [r0, #16]
 80073ea:	b530      	push	{r4, r5, lr}
 80073ec:	1a80      	subs	r0, r0, r2
 80073ee:	d10d      	bne.n	800740c <__mcmp+0x28>
 80073f0:	3314      	adds	r3, #20
 80073f2:	3114      	adds	r1, #20
 80073f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007404:	4295      	cmp	r5, r2
 8007406:	d002      	beq.n	800740e <__mcmp+0x2a>
 8007408:	d304      	bcc.n	8007414 <__mcmp+0x30>
 800740a:	2001      	movs	r0, #1
 800740c:	bd30      	pop	{r4, r5, pc}
 800740e:	42a3      	cmp	r3, r4
 8007410:	d3f4      	bcc.n	80073fc <__mcmp+0x18>
 8007412:	e7fb      	b.n	800740c <__mcmp+0x28>
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	e7f8      	b.n	800740c <__mcmp+0x28>
	...

0800741c <__mdiff>:
 800741c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	460c      	mov	r4, r1
 8007422:	4606      	mov	r6, r0
 8007424:	4611      	mov	r1, r2
 8007426:	4620      	mov	r0, r4
 8007428:	4692      	mov	sl, r2
 800742a:	f7ff ffdb 	bl	80073e4 <__mcmp>
 800742e:	1e05      	subs	r5, r0, #0
 8007430:	d111      	bne.n	8007456 <__mdiff+0x3a>
 8007432:	4629      	mov	r1, r5
 8007434:	4630      	mov	r0, r6
 8007436:	f7ff fd11 	bl	8006e5c <_Balloc>
 800743a:	4602      	mov	r2, r0
 800743c:	b928      	cbnz	r0, 800744a <__mdiff+0x2e>
 800743e:	f240 2132 	movw	r1, #562	; 0x232
 8007442:	4b3c      	ldr	r3, [pc, #240]	; (8007534 <__mdiff+0x118>)
 8007444:	483c      	ldr	r0, [pc, #240]	; (8007538 <__mdiff+0x11c>)
 8007446:	f000 fc07 	bl	8007c58 <__assert_func>
 800744a:	2301      	movs	r3, #1
 800744c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007450:	4610      	mov	r0, r2
 8007452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007456:	bfa4      	itt	ge
 8007458:	4653      	movge	r3, sl
 800745a:	46a2      	movge	sl, r4
 800745c:	4630      	mov	r0, r6
 800745e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007462:	bfa6      	itte	ge
 8007464:	461c      	movge	r4, r3
 8007466:	2500      	movge	r5, #0
 8007468:	2501      	movlt	r5, #1
 800746a:	f7ff fcf7 	bl	8006e5c <_Balloc>
 800746e:	4602      	mov	r2, r0
 8007470:	b918      	cbnz	r0, 800747a <__mdiff+0x5e>
 8007472:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007476:	4b2f      	ldr	r3, [pc, #188]	; (8007534 <__mdiff+0x118>)
 8007478:	e7e4      	b.n	8007444 <__mdiff+0x28>
 800747a:	f100 0814 	add.w	r8, r0, #20
 800747e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007482:	60c5      	str	r5, [r0, #12]
 8007484:	f04f 0c00 	mov.w	ip, #0
 8007488:	f10a 0514 	add.w	r5, sl, #20
 800748c:	f10a 0010 	add.w	r0, sl, #16
 8007490:	46c2      	mov	sl, r8
 8007492:	6926      	ldr	r6, [r4, #16]
 8007494:	f104 0914 	add.w	r9, r4, #20
 8007498:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800749c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074a0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80074a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80074a8:	fa1f f18b 	uxth.w	r1, fp
 80074ac:	4461      	add	r1, ip
 80074ae:	fa1f fc83 	uxth.w	ip, r3
 80074b2:	0c1b      	lsrs	r3, r3, #16
 80074b4:	eba1 010c 	sub.w	r1, r1, ip
 80074b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80074c0:	b289      	uxth	r1, r1
 80074c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80074c6:	454e      	cmp	r6, r9
 80074c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80074cc:	f84a 3b04 	str.w	r3, [sl], #4
 80074d0:	d8e6      	bhi.n	80074a0 <__mdiff+0x84>
 80074d2:	1b33      	subs	r3, r6, r4
 80074d4:	3b15      	subs	r3, #21
 80074d6:	f023 0303 	bic.w	r3, r3, #3
 80074da:	3415      	adds	r4, #21
 80074dc:	3304      	adds	r3, #4
 80074de:	42a6      	cmp	r6, r4
 80074e0:	bf38      	it	cc
 80074e2:	2304      	movcc	r3, #4
 80074e4:	441d      	add	r5, r3
 80074e6:	4443      	add	r3, r8
 80074e8:	461e      	mov	r6, r3
 80074ea:	462c      	mov	r4, r5
 80074ec:	4574      	cmp	r4, lr
 80074ee:	d30e      	bcc.n	800750e <__mdiff+0xf2>
 80074f0:	f10e 0103 	add.w	r1, lr, #3
 80074f4:	1b49      	subs	r1, r1, r5
 80074f6:	f021 0103 	bic.w	r1, r1, #3
 80074fa:	3d03      	subs	r5, #3
 80074fc:	45ae      	cmp	lr, r5
 80074fe:	bf38      	it	cc
 8007500:	2100      	movcc	r1, #0
 8007502:	4419      	add	r1, r3
 8007504:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007508:	b18b      	cbz	r3, 800752e <__mdiff+0x112>
 800750a:	6117      	str	r7, [r2, #16]
 800750c:	e7a0      	b.n	8007450 <__mdiff+0x34>
 800750e:	f854 8b04 	ldr.w	r8, [r4], #4
 8007512:	fa1f f188 	uxth.w	r1, r8
 8007516:	4461      	add	r1, ip
 8007518:	1408      	asrs	r0, r1, #16
 800751a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800751e:	b289      	uxth	r1, r1
 8007520:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007524:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007528:	f846 1b04 	str.w	r1, [r6], #4
 800752c:	e7de      	b.n	80074ec <__mdiff+0xd0>
 800752e:	3f01      	subs	r7, #1
 8007530:	e7e8      	b.n	8007504 <__mdiff+0xe8>
 8007532:	bf00      	nop
 8007534:	080091e9 	.word	0x080091e9
 8007538:	08009278 	.word	0x08009278

0800753c <__ulp>:
 800753c:	4b11      	ldr	r3, [pc, #68]	; (8007584 <__ulp+0x48>)
 800753e:	400b      	ands	r3, r1
 8007540:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007544:	2b00      	cmp	r3, #0
 8007546:	dd02      	ble.n	800754e <__ulp+0x12>
 8007548:	2000      	movs	r0, #0
 800754a:	4619      	mov	r1, r3
 800754c:	4770      	bx	lr
 800754e:	425b      	negs	r3, r3
 8007550:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007554:	f04f 0000 	mov.w	r0, #0
 8007558:	f04f 0100 	mov.w	r1, #0
 800755c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007560:	da04      	bge.n	800756c <__ulp+0x30>
 8007562:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007566:	fa43 f102 	asr.w	r1, r3, r2
 800756a:	4770      	bx	lr
 800756c:	f1a2 0314 	sub.w	r3, r2, #20
 8007570:	2b1e      	cmp	r3, #30
 8007572:	bfd6      	itet	le
 8007574:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007578:	2301      	movgt	r3, #1
 800757a:	fa22 f303 	lsrle.w	r3, r2, r3
 800757e:	4618      	mov	r0, r3
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	7ff00000 	.word	0x7ff00000

08007588 <__b2d>:
 8007588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800758c:	6907      	ldr	r7, [r0, #16]
 800758e:	f100 0914 	add.w	r9, r0, #20
 8007592:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007596:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800759a:	f1a7 0804 	sub.w	r8, r7, #4
 800759e:	4630      	mov	r0, r6
 80075a0:	f7ff fd52 	bl	8007048 <__hi0bits>
 80075a4:	f1c0 0320 	rsb	r3, r0, #32
 80075a8:	280a      	cmp	r0, #10
 80075aa:	600b      	str	r3, [r1, #0]
 80075ac:	491f      	ldr	r1, [pc, #124]	; (800762c <__b2d+0xa4>)
 80075ae:	dc17      	bgt.n	80075e0 <__b2d+0x58>
 80075b0:	45c1      	cmp	r9, r8
 80075b2:	bf28      	it	cs
 80075b4:	2200      	movcs	r2, #0
 80075b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80075ba:	fa26 f30c 	lsr.w	r3, r6, ip
 80075be:	bf38      	it	cc
 80075c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80075c4:	ea43 0501 	orr.w	r5, r3, r1
 80075c8:	f100 0315 	add.w	r3, r0, #21
 80075cc:	fa06 f303 	lsl.w	r3, r6, r3
 80075d0:	fa22 f20c 	lsr.w	r2, r2, ip
 80075d4:	ea43 0402 	orr.w	r4, r3, r2
 80075d8:	4620      	mov	r0, r4
 80075da:	4629      	mov	r1, r5
 80075dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e0:	45c1      	cmp	r9, r8
 80075e2:	bf2e      	itee	cs
 80075e4:	2200      	movcs	r2, #0
 80075e6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80075ea:	f1a7 0808 	subcc.w	r8, r7, #8
 80075ee:	f1b0 030b 	subs.w	r3, r0, #11
 80075f2:	d016      	beq.n	8007622 <__b2d+0x9a>
 80075f4:	f1c3 0720 	rsb	r7, r3, #32
 80075f8:	fa22 f107 	lsr.w	r1, r2, r7
 80075fc:	45c8      	cmp	r8, r9
 80075fe:	fa06 f603 	lsl.w	r6, r6, r3
 8007602:	ea46 0601 	orr.w	r6, r6, r1
 8007606:	bf94      	ite	ls
 8007608:	2100      	movls	r1, #0
 800760a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800760e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007612:	fa02 f003 	lsl.w	r0, r2, r3
 8007616:	40f9      	lsrs	r1, r7
 8007618:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800761c:	ea40 0401 	orr.w	r4, r0, r1
 8007620:	e7da      	b.n	80075d8 <__b2d+0x50>
 8007622:	4614      	mov	r4, r2
 8007624:	ea46 0501 	orr.w	r5, r6, r1
 8007628:	e7d6      	b.n	80075d8 <__b2d+0x50>
 800762a:	bf00      	nop
 800762c:	3ff00000 	.word	0x3ff00000

08007630 <__d2b>:
 8007630:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007634:	2101      	movs	r1, #1
 8007636:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800763a:	4690      	mov	r8, r2
 800763c:	461d      	mov	r5, r3
 800763e:	f7ff fc0d 	bl	8006e5c <_Balloc>
 8007642:	4604      	mov	r4, r0
 8007644:	b930      	cbnz	r0, 8007654 <__d2b+0x24>
 8007646:	4602      	mov	r2, r0
 8007648:	f240 310a 	movw	r1, #778	; 0x30a
 800764c:	4b24      	ldr	r3, [pc, #144]	; (80076e0 <__d2b+0xb0>)
 800764e:	4825      	ldr	r0, [pc, #148]	; (80076e4 <__d2b+0xb4>)
 8007650:	f000 fb02 	bl	8007c58 <__assert_func>
 8007654:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007658:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800765c:	bb2d      	cbnz	r5, 80076aa <__d2b+0x7a>
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	f1b8 0300 	subs.w	r3, r8, #0
 8007664:	d026      	beq.n	80076b4 <__d2b+0x84>
 8007666:	4668      	mov	r0, sp
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	f7ff fd0d 	bl	8007088 <__lo0bits>
 800766e:	9900      	ldr	r1, [sp, #0]
 8007670:	b1f0      	cbz	r0, 80076b0 <__d2b+0x80>
 8007672:	9a01      	ldr	r2, [sp, #4]
 8007674:	f1c0 0320 	rsb	r3, r0, #32
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	430b      	orrs	r3, r1
 800767e:	40c2      	lsrs	r2, r0
 8007680:	6163      	str	r3, [r4, #20]
 8007682:	9201      	str	r2, [sp, #4]
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	bf14      	ite	ne
 800768a:	2102      	movne	r1, #2
 800768c:	2101      	moveq	r1, #1
 800768e:	61a3      	str	r3, [r4, #24]
 8007690:	6121      	str	r1, [r4, #16]
 8007692:	b1c5      	cbz	r5, 80076c6 <__d2b+0x96>
 8007694:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007698:	4405      	add	r5, r0
 800769a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800769e:	603d      	str	r5, [r7, #0]
 80076a0:	6030      	str	r0, [r6, #0]
 80076a2:	4620      	mov	r0, r4
 80076a4:	b002      	add	sp, #8
 80076a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ae:	e7d6      	b.n	800765e <__d2b+0x2e>
 80076b0:	6161      	str	r1, [r4, #20]
 80076b2:	e7e7      	b.n	8007684 <__d2b+0x54>
 80076b4:	a801      	add	r0, sp, #4
 80076b6:	f7ff fce7 	bl	8007088 <__lo0bits>
 80076ba:	2101      	movs	r1, #1
 80076bc:	9b01      	ldr	r3, [sp, #4]
 80076be:	6121      	str	r1, [r4, #16]
 80076c0:	6163      	str	r3, [r4, #20]
 80076c2:	3020      	adds	r0, #32
 80076c4:	e7e5      	b.n	8007692 <__d2b+0x62>
 80076c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80076ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076ce:	6038      	str	r0, [r7, #0]
 80076d0:	6918      	ldr	r0, [r3, #16]
 80076d2:	f7ff fcb9 	bl	8007048 <__hi0bits>
 80076d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80076da:	6031      	str	r1, [r6, #0]
 80076dc:	e7e1      	b.n	80076a2 <__d2b+0x72>
 80076de:	bf00      	nop
 80076e0:	080091e9 	.word	0x080091e9
 80076e4:	08009278 	.word	0x08009278

080076e8 <__ratio>:
 80076e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	4688      	mov	r8, r1
 80076ee:	4669      	mov	r1, sp
 80076f0:	4681      	mov	r9, r0
 80076f2:	f7ff ff49 	bl	8007588 <__b2d>
 80076f6:	460f      	mov	r7, r1
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	4640      	mov	r0, r8
 80076fe:	a901      	add	r1, sp, #4
 8007700:	f7ff ff42 	bl	8007588 <__b2d>
 8007704:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007708:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800770c:	468b      	mov	fp, r1
 800770e:	eba3 0c02 	sub.w	ip, r3, r2
 8007712:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800771c:	2b00      	cmp	r3, #0
 800771e:	bfd5      	itete	le
 8007720:	460a      	movle	r2, r1
 8007722:	462a      	movgt	r2, r5
 8007724:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007728:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800772c:	bfd8      	it	le
 800772e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007732:	465b      	mov	r3, fp
 8007734:	4602      	mov	r2, r0
 8007736:	4639      	mov	r1, r7
 8007738:	4620      	mov	r0, r4
 800773a:	f7f8 fff7 	bl	800072c <__aeabi_ddiv>
 800773e:	b003      	add	sp, #12
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007744 <__copybits>:
 8007744:	3901      	subs	r1, #1
 8007746:	b570      	push	{r4, r5, r6, lr}
 8007748:	1149      	asrs	r1, r1, #5
 800774a:	6914      	ldr	r4, [r2, #16]
 800774c:	3101      	adds	r1, #1
 800774e:	f102 0314 	add.w	r3, r2, #20
 8007752:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007756:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800775a:	1f05      	subs	r5, r0, #4
 800775c:	42a3      	cmp	r3, r4
 800775e:	d30c      	bcc.n	800777a <__copybits+0x36>
 8007760:	1aa3      	subs	r3, r4, r2
 8007762:	3b11      	subs	r3, #17
 8007764:	f023 0303 	bic.w	r3, r3, #3
 8007768:	3211      	adds	r2, #17
 800776a:	42a2      	cmp	r2, r4
 800776c:	bf88      	it	hi
 800776e:	2300      	movhi	r3, #0
 8007770:	4418      	add	r0, r3
 8007772:	2300      	movs	r3, #0
 8007774:	4288      	cmp	r0, r1
 8007776:	d305      	bcc.n	8007784 <__copybits+0x40>
 8007778:	bd70      	pop	{r4, r5, r6, pc}
 800777a:	f853 6b04 	ldr.w	r6, [r3], #4
 800777e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007782:	e7eb      	b.n	800775c <__copybits+0x18>
 8007784:	f840 3b04 	str.w	r3, [r0], #4
 8007788:	e7f4      	b.n	8007774 <__copybits+0x30>

0800778a <__any_on>:
 800778a:	f100 0214 	add.w	r2, r0, #20
 800778e:	6900      	ldr	r0, [r0, #16]
 8007790:	114b      	asrs	r3, r1, #5
 8007792:	4298      	cmp	r0, r3
 8007794:	b510      	push	{r4, lr}
 8007796:	db11      	blt.n	80077bc <__any_on+0x32>
 8007798:	dd0a      	ble.n	80077b0 <__any_on+0x26>
 800779a:	f011 011f 	ands.w	r1, r1, #31
 800779e:	d007      	beq.n	80077b0 <__any_on+0x26>
 80077a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80077a4:	fa24 f001 	lsr.w	r0, r4, r1
 80077a8:	fa00 f101 	lsl.w	r1, r0, r1
 80077ac:	428c      	cmp	r4, r1
 80077ae:	d10b      	bne.n	80077c8 <__any_on+0x3e>
 80077b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d803      	bhi.n	80077c0 <__any_on+0x36>
 80077b8:	2000      	movs	r0, #0
 80077ba:	bd10      	pop	{r4, pc}
 80077bc:	4603      	mov	r3, r0
 80077be:	e7f7      	b.n	80077b0 <__any_on+0x26>
 80077c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077c4:	2900      	cmp	r1, #0
 80077c6:	d0f5      	beq.n	80077b4 <__any_on+0x2a>
 80077c8:	2001      	movs	r0, #1
 80077ca:	e7f6      	b.n	80077ba <__any_on+0x30>

080077cc <_calloc_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	fb02 f501 	mul.w	r5, r2, r1
 80077d2:	4629      	mov	r1, r5
 80077d4:	f000 f854 	bl	8007880 <_malloc_r>
 80077d8:	4604      	mov	r4, r0
 80077da:	b118      	cbz	r0, 80077e4 <_calloc_r+0x18>
 80077dc:	462a      	mov	r2, r5
 80077de:	2100      	movs	r1, #0
 80077e0:	f7fc fb9a 	bl	8003f18 <memset>
 80077e4:	4620      	mov	r0, r4
 80077e6:	bd38      	pop	{r3, r4, r5, pc}

080077e8 <_free_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4605      	mov	r5, r0
 80077ec:	2900      	cmp	r1, #0
 80077ee:	d043      	beq.n	8007878 <_free_r+0x90>
 80077f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f4:	1f0c      	subs	r4, r1, #4
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bfb8      	it	lt
 80077fa:	18e4      	addlt	r4, r4, r3
 80077fc:	f000 fa76 	bl	8007cec <__malloc_lock>
 8007800:	4a1e      	ldr	r2, [pc, #120]	; (800787c <_free_r+0x94>)
 8007802:	6813      	ldr	r3, [r2, #0]
 8007804:	4610      	mov	r0, r2
 8007806:	b933      	cbnz	r3, 8007816 <_free_r+0x2e>
 8007808:	6063      	str	r3, [r4, #4]
 800780a:	6014      	str	r4, [r2, #0]
 800780c:	4628      	mov	r0, r5
 800780e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007812:	f000 ba71 	b.w	8007cf8 <__malloc_unlock>
 8007816:	42a3      	cmp	r3, r4
 8007818:	d90a      	bls.n	8007830 <_free_r+0x48>
 800781a:	6821      	ldr	r1, [r4, #0]
 800781c:	1862      	adds	r2, r4, r1
 800781e:	4293      	cmp	r3, r2
 8007820:	bf01      	itttt	eq
 8007822:	681a      	ldreq	r2, [r3, #0]
 8007824:	685b      	ldreq	r3, [r3, #4]
 8007826:	1852      	addeq	r2, r2, r1
 8007828:	6022      	streq	r2, [r4, #0]
 800782a:	6063      	str	r3, [r4, #4]
 800782c:	6004      	str	r4, [r0, #0]
 800782e:	e7ed      	b.n	800780c <_free_r+0x24>
 8007830:	461a      	mov	r2, r3
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	b10b      	cbz	r3, 800783a <_free_r+0x52>
 8007836:	42a3      	cmp	r3, r4
 8007838:	d9fa      	bls.n	8007830 <_free_r+0x48>
 800783a:	6811      	ldr	r1, [r2, #0]
 800783c:	1850      	adds	r0, r2, r1
 800783e:	42a0      	cmp	r0, r4
 8007840:	d10b      	bne.n	800785a <_free_r+0x72>
 8007842:	6820      	ldr	r0, [r4, #0]
 8007844:	4401      	add	r1, r0
 8007846:	1850      	adds	r0, r2, r1
 8007848:	4283      	cmp	r3, r0
 800784a:	6011      	str	r1, [r2, #0]
 800784c:	d1de      	bne.n	800780c <_free_r+0x24>
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	4401      	add	r1, r0
 8007854:	6011      	str	r1, [r2, #0]
 8007856:	6053      	str	r3, [r2, #4]
 8007858:	e7d8      	b.n	800780c <_free_r+0x24>
 800785a:	d902      	bls.n	8007862 <_free_r+0x7a>
 800785c:	230c      	movs	r3, #12
 800785e:	602b      	str	r3, [r5, #0]
 8007860:	e7d4      	b.n	800780c <_free_r+0x24>
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	1821      	adds	r1, r4, r0
 8007866:	428b      	cmp	r3, r1
 8007868:	bf01      	itttt	eq
 800786a:	6819      	ldreq	r1, [r3, #0]
 800786c:	685b      	ldreq	r3, [r3, #4]
 800786e:	1809      	addeq	r1, r1, r0
 8007870:	6021      	streq	r1, [r4, #0]
 8007872:	6063      	str	r3, [r4, #4]
 8007874:	6054      	str	r4, [r2, #4]
 8007876:	e7c9      	b.n	800780c <_free_r+0x24>
 8007878:	bd38      	pop	{r3, r4, r5, pc}
 800787a:	bf00      	nop
 800787c:	20000610 	.word	0x20000610

08007880 <_malloc_r>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	1ccd      	adds	r5, r1, #3
 8007884:	f025 0503 	bic.w	r5, r5, #3
 8007888:	3508      	adds	r5, #8
 800788a:	2d0c      	cmp	r5, #12
 800788c:	bf38      	it	cc
 800788e:	250c      	movcc	r5, #12
 8007890:	2d00      	cmp	r5, #0
 8007892:	4606      	mov	r6, r0
 8007894:	db01      	blt.n	800789a <_malloc_r+0x1a>
 8007896:	42a9      	cmp	r1, r5
 8007898:	d903      	bls.n	80078a2 <_malloc_r+0x22>
 800789a:	230c      	movs	r3, #12
 800789c:	6033      	str	r3, [r6, #0]
 800789e:	2000      	movs	r0, #0
 80078a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a2:	f000 fa23 	bl	8007cec <__malloc_lock>
 80078a6:	4921      	ldr	r1, [pc, #132]	; (800792c <_malloc_r+0xac>)
 80078a8:	680a      	ldr	r2, [r1, #0]
 80078aa:	4614      	mov	r4, r2
 80078ac:	b99c      	cbnz	r4, 80078d6 <_malloc_r+0x56>
 80078ae:	4f20      	ldr	r7, [pc, #128]	; (8007930 <_malloc_r+0xb0>)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	b923      	cbnz	r3, 80078be <_malloc_r+0x3e>
 80078b4:	4621      	mov	r1, r4
 80078b6:	4630      	mov	r0, r6
 80078b8:	f000 f99e 	bl	8007bf8 <_sbrk_r>
 80078bc:	6038      	str	r0, [r7, #0]
 80078be:	4629      	mov	r1, r5
 80078c0:	4630      	mov	r0, r6
 80078c2:	f000 f999 	bl	8007bf8 <_sbrk_r>
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	d123      	bne.n	8007912 <_malloc_r+0x92>
 80078ca:	230c      	movs	r3, #12
 80078cc:	4630      	mov	r0, r6
 80078ce:	6033      	str	r3, [r6, #0]
 80078d0:	f000 fa12 	bl	8007cf8 <__malloc_unlock>
 80078d4:	e7e3      	b.n	800789e <_malloc_r+0x1e>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	1b5b      	subs	r3, r3, r5
 80078da:	d417      	bmi.n	800790c <_malloc_r+0x8c>
 80078dc:	2b0b      	cmp	r3, #11
 80078de:	d903      	bls.n	80078e8 <_malloc_r+0x68>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	441c      	add	r4, r3
 80078e4:	6025      	str	r5, [r4, #0]
 80078e6:	e004      	b.n	80078f2 <_malloc_r+0x72>
 80078e8:	6863      	ldr	r3, [r4, #4]
 80078ea:	42a2      	cmp	r2, r4
 80078ec:	bf0c      	ite	eq
 80078ee:	600b      	streq	r3, [r1, #0]
 80078f0:	6053      	strne	r3, [r2, #4]
 80078f2:	4630      	mov	r0, r6
 80078f4:	f000 fa00 	bl	8007cf8 <__malloc_unlock>
 80078f8:	f104 000b 	add.w	r0, r4, #11
 80078fc:	1d23      	adds	r3, r4, #4
 80078fe:	f020 0007 	bic.w	r0, r0, #7
 8007902:	1ac2      	subs	r2, r0, r3
 8007904:	d0cc      	beq.n	80078a0 <_malloc_r+0x20>
 8007906:	1a1b      	subs	r3, r3, r0
 8007908:	50a3      	str	r3, [r4, r2]
 800790a:	e7c9      	b.n	80078a0 <_malloc_r+0x20>
 800790c:	4622      	mov	r2, r4
 800790e:	6864      	ldr	r4, [r4, #4]
 8007910:	e7cc      	b.n	80078ac <_malloc_r+0x2c>
 8007912:	1cc4      	adds	r4, r0, #3
 8007914:	f024 0403 	bic.w	r4, r4, #3
 8007918:	42a0      	cmp	r0, r4
 800791a:	d0e3      	beq.n	80078e4 <_malloc_r+0x64>
 800791c:	1a21      	subs	r1, r4, r0
 800791e:	4630      	mov	r0, r6
 8007920:	f000 f96a 	bl	8007bf8 <_sbrk_r>
 8007924:	3001      	adds	r0, #1
 8007926:	d1dd      	bne.n	80078e4 <_malloc_r+0x64>
 8007928:	e7cf      	b.n	80078ca <_malloc_r+0x4a>
 800792a:	bf00      	nop
 800792c:	20000610 	.word	0x20000610
 8007930:	20000614 	.word	0x20000614

08007934 <__ssputs_r>:
 8007934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007938:	688e      	ldr	r6, [r1, #8]
 800793a:	4682      	mov	sl, r0
 800793c:	429e      	cmp	r6, r3
 800793e:	460c      	mov	r4, r1
 8007940:	4690      	mov	r8, r2
 8007942:	461f      	mov	r7, r3
 8007944:	d838      	bhi.n	80079b8 <__ssputs_r+0x84>
 8007946:	898a      	ldrh	r2, [r1, #12]
 8007948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800794c:	d032      	beq.n	80079b4 <__ssputs_r+0x80>
 800794e:	6825      	ldr	r5, [r4, #0]
 8007950:	6909      	ldr	r1, [r1, #16]
 8007952:	3301      	adds	r3, #1
 8007954:	eba5 0901 	sub.w	r9, r5, r1
 8007958:	6965      	ldr	r5, [r4, #20]
 800795a:	444b      	add	r3, r9
 800795c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007964:	106d      	asrs	r5, r5, #1
 8007966:	429d      	cmp	r5, r3
 8007968:	bf38      	it	cc
 800796a:	461d      	movcc	r5, r3
 800796c:	0553      	lsls	r3, r2, #21
 800796e:	d531      	bpl.n	80079d4 <__ssputs_r+0xa0>
 8007970:	4629      	mov	r1, r5
 8007972:	f7ff ff85 	bl	8007880 <_malloc_r>
 8007976:	4606      	mov	r6, r0
 8007978:	b950      	cbnz	r0, 8007990 <__ssputs_r+0x5c>
 800797a:	230c      	movs	r3, #12
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
 8007980:	f8ca 3000 	str.w	r3, [sl]
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007990:	464a      	mov	r2, r9
 8007992:	6921      	ldr	r1, [r4, #16]
 8007994:	f7ff fa54 	bl	8006e40 <memcpy>
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800799e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	6126      	str	r6, [r4, #16]
 80079a6:	444e      	add	r6, r9
 80079a8:	6026      	str	r6, [r4, #0]
 80079aa:	463e      	mov	r6, r7
 80079ac:	6165      	str	r5, [r4, #20]
 80079ae:	eba5 0509 	sub.w	r5, r5, r9
 80079b2:	60a5      	str	r5, [r4, #8]
 80079b4:	42be      	cmp	r6, r7
 80079b6:	d900      	bls.n	80079ba <__ssputs_r+0x86>
 80079b8:	463e      	mov	r6, r7
 80079ba:	4632      	mov	r2, r6
 80079bc:	4641      	mov	r1, r8
 80079be:	6820      	ldr	r0, [r4, #0]
 80079c0:	f000 f97a 	bl	8007cb8 <memmove>
 80079c4:	68a3      	ldr	r3, [r4, #8]
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	1b9b      	subs	r3, r3, r6
 80079ca:	4432      	add	r2, r6
 80079cc:	2000      	movs	r0, #0
 80079ce:	60a3      	str	r3, [r4, #8]
 80079d0:	6022      	str	r2, [r4, #0]
 80079d2:	e7db      	b.n	800798c <__ssputs_r+0x58>
 80079d4:	462a      	mov	r2, r5
 80079d6:	f000 f995 	bl	8007d04 <_realloc_r>
 80079da:	4606      	mov	r6, r0
 80079dc:	2800      	cmp	r0, #0
 80079de:	d1e1      	bne.n	80079a4 <__ssputs_r+0x70>
 80079e0:	4650      	mov	r0, sl
 80079e2:	6921      	ldr	r1, [r4, #16]
 80079e4:	f7ff ff00 	bl	80077e8 <_free_r>
 80079e8:	e7c7      	b.n	800797a <__ssputs_r+0x46>
	...

080079ec <_svfiprintf_r>:
 80079ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	4698      	mov	r8, r3
 80079f2:	898b      	ldrh	r3, [r1, #12]
 80079f4:	4607      	mov	r7, r0
 80079f6:	061b      	lsls	r3, r3, #24
 80079f8:	460d      	mov	r5, r1
 80079fa:	4614      	mov	r4, r2
 80079fc:	b09d      	sub	sp, #116	; 0x74
 80079fe:	d50e      	bpl.n	8007a1e <_svfiprintf_r+0x32>
 8007a00:	690b      	ldr	r3, [r1, #16]
 8007a02:	b963      	cbnz	r3, 8007a1e <_svfiprintf_r+0x32>
 8007a04:	2140      	movs	r1, #64	; 0x40
 8007a06:	f7ff ff3b 	bl	8007880 <_malloc_r>
 8007a0a:	6028      	str	r0, [r5, #0]
 8007a0c:	6128      	str	r0, [r5, #16]
 8007a0e:	b920      	cbnz	r0, 8007a1a <_svfiprintf_r+0x2e>
 8007a10:	230c      	movs	r3, #12
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	e0d1      	b.n	8007bbe <_svfiprintf_r+0x1d2>
 8007a1a:	2340      	movs	r3, #64	; 0x40
 8007a1c:	616b      	str	r3, [r5, #20]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9309      	str	r3, [sp, #36]	; 0x24
 8007a22:	2320      	movs	r3, #32
 8007a24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a28:	2330      	movs	r3, #48	; 0x30
 8007a2a:	f04f 0901 	mov.w	r9, #1
 8007a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007bd8 <_svfiprintf_r+0x1ec>
 8007a36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a3a:	4623      	mov	r3, r4
 8007a3c:	469a      	mov	sl, r3
 8007a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a42:	b10a      	cbz	r2, 8007a48 <_svfiprintf_r+0x5c>
 8007a44:	2a25      	cmp	r2, #37	; 0x25
 8007a46:	d1f9      	bne.n	8007a3c <_svfiprintf_r+0x50>
 8007a48:	ebba 0b04 	subs.w	fp, sl, r4
 8007a4c:	d00b      	beq.n	8007a66 <_svfiprintf_r+0x7a>
 8007a4e:	465b      	mov	r3, fp
 8007a50:	4622      	mov	r2, r4
 8007a52:	4629      	mov	r1, r5
 8007a54:	4638      	mov	r0, r7
 8007a56:	f7ff ff6d 	bl	8007934 <__ssputs_r>
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f000 80aa 	beq.w	8007bb4 <_svfiprintf_r+0x1c8>
 8007a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a62:	445a      	add	r2, fp
 8007a64:	9209      	str	r2, [sp, #36]	; 0x24
 8007a66:	f89a 3000 	ldrb.w	r3, [sl]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80a2 	beq.w	8007bb4 <_svfiprintf_r+0x1c8>
 8007a70:	2300      	movs	r3, #0
 8007a72:	f04f 32ff 	mov.w	r2, #4294967295
 8007a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a7a:	f10a 0a01 	add.w	sl, sl, #1
 8007a7e:	9304      	str	r3, [sp, #16]
 8007a80:	9307      	str	r3, [sp, #28]
 8007a82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a86:	931a      	str	r3, [sp, #104]	; 0x68
 8007a88:	4654      	mov	r4, sl
 8007a8a:	2205      	movs	r2, #5
 8007a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a90:	4851      	ldr	r0, [pc, #324]	; (8007bd8 <_svfiprintf_r+0x1ec>)
 8007a92:	f7ff f9c7 	bl	8006e24 <memchr>
 8007a96:	9a04      	ldr	r2, [sp, #16]
 8007a98:	b9d8      	cbnz	r0, 8007ad2 <_svfiprintf_r+0xe6>
 8007a9a:	06d0      	lsls	r0, r2, #27
 8007a9c:	bf44      	itt	mi
 8007a9e:	2320      	movmi	r3, #32
 8007aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa4:	0711      	lsls	r1, r2, #28
 8007aa6:	bf44      	itt	mi
 8007aa8:	232b      	movmi	r3, #43	; 0x2b
 8007aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aae:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab4:	d015      	beq.n	8007ae2 <_svfiprintf_r+0xf6>
 8007ab6:	4654      	mov	r4, sl
 8007ab8:	2000      	movs	r0, #0
 8007aba:	f04f 0c0a 	mov.w	ip, #10
 8007abe:	9a07      	ldr	r2, [sp, #28]
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac6:	3b30      	subs	r3, #48	; 0x30
 8007ac8:	2b09      	cmp	r3, #9
 8007aca:	d94e      	bls.n	8007b6a <_svfiprintf_r+0x17e>
 8007acc:	b1b0      	cbz	r0, 8007afc <_svfiprintf_r+0x110>
 8007ace:	9207      	str	r2, [sp, #28]
 8007ad0:	e014      	b.n	8007afc <_svfiprintf_r+0x110>
 8007ad2:	eba0 0308 	sub.w	r3, r0, r8
 8007ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8007ada:	4313      	orrs	r3, r2
 8007adc:	46a2      	mov	sl, r4
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	e7d2      	b.n	8007a88 <_svfiprintf_r+0x9c>
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	1d19      	adds	r1, r3, #4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	9103      	str	r1, [sp, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bfbb      	ittet	lt
 8007aee:	425b      	neglt	r3, r3
 8007af0:	f042 0202 	orrlt.w	r2, r2, #2
 8007af4:	9307      	strge	r3, [sp, #28]
 8007af6:	9307      	strlt	r3, [sp, #28]
 8007af8:	bfb8      	it	lt
 8007afa:	9204      	strlt	r2, [sp, #16]
 8007afc:	7823      	ldrb	r3, [r4, #0]
 8007afe:	2b2e      	cmp	r3, #46	; 0x2e
 8007b00:	d10c      	bne.n	8007b1c <_svfiprintf_r+0x130>
 8007b02:	7863      	ldrb	r3, [r4, #1]
 8007b04:	2b2a      	cmp	r3, #42	; 0x2a
 8007b06:	d135      	bne.n	8007b74 <_svfiprintf_r+0x188>
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	3402      	adds	r4, #2
 8007b0c:	1d1a      	adds	r2, r3, #4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	9203      	str	r2, [sp, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bfb8      	it	lt
 8007b16:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b1a:	9305      	str	r3, [sp, #20]
 8007b1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007be8 <_svfiprintf_r+0x1fc>
 8007b20:	2203      	movs	r2, #3
 8007b22:	4650      	mov	r0, sl
 8007b24:	7821      	ldrb	r1, [r4, #0]
 8007b26:	f7ff f97d 	bl	8006e24 <memchr>
 8007b2a:	b140      	cbz	r0, 8007b3e <_svfiprintf_r+0x152>
 8007b2c:	2340      	movs	r3, #64	; 0x40
 8007b2e:	eba0 000a 	sub.w	r0, r0, sl
 8007b32:	fa03 f000 	lsl.w	r0, r3, r0
 8007b36:	9b04      	ldr	r3, [sp, #16]
 8007b38:	3401      	adds	r4, #1
 8007b3a:	4303      	orrs	r3, r0
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b42:	2206      	movs	r2, #6
 8007b44:	4825      	ldr	r0, [pc, #148]	; (8007bdc <_svfiprintf_r+0x1f0>)
 8007b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b4a:	f7ff f96b 	bl	8006e24 <memchr>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d038      	beq.n	8007bc4 <_svfiprintf_r+0x1d8>
 8007b52:	4b23      	ldr	r3, [pc, #140]	; (8007be0 <_svfiprintf_r+0x1f4>)
 8007b54:	bb1b      	cbnz	r3, 8007b9e <_svfiprintf_r+0x1b2>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	3307      	adds	r3, #7
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	3308      	adds	r3, #8
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b64:	4433      	add	r3, r6
 8007b66:	9309      	str	r3, [sp, #36]	; 0x24
 8007b68:	e767      	b.n	8007a3a <_svfiprintf_r+0x4e>
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b72:	e7a5      	b.n	8007ac0 <_svfiprintf_r+0xd4>
 8007b74:	2300      	movs	r3, #0
 8007b76:	f04f 0c0a 	mov.w	ip, #10
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	3401      	adds	r4, #1
 8007b7e:	9305      	str	r3, [sp, #20]
 8007b80:	4620      	mov	r0, r4
 8007b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b86:	3a30      	subs	r2, #48	; 0x30
 8007b88:	2a09      	cmp	r2, #9
 8007b8a:	d903      	bls.n	8007b94 <_svfiprintf_r+0x1a8>
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0c5      	beq.n	8007b1c <_svfiprintf_r+0x130>
 8007b90:	9105      	str	r1, [sp, #20]
 8007b92:	e7c3      	b.n	8007b1c <_svfiprintf_r+0x130>
 8007b94:	4604      	mov	r4, r0
 8007b96:	2301      	movs	r3, #1
 8007b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b9c:	e7f0      	b.n	8007b80 <_svfiprintf_r+0x194>
 8007b9e:	ab03      	add	r3, sp, #12
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <_svfiprintf_r+0x1f8>)
 8007ba8:	a904      	add	r1, sp, #16
 8007baa:	f7fc fa5b 	bl	8004064 <_printf_float>
 8007bae:	1c42      	adds	r2, r0, #1
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	d1d6      	bne.n	8007b62 <_svfiprintf_r+0x176>
 8007bb4:	89ab      	ldrh	r3, [r5, #12]
 8007bb6:	065b      	lsls	r3, r3, #25
 8007bb8:	f53f af2c 	bmi.w	8007a14 <_svfiprintf_r+0x28>
 8007bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bbe:	b01d      	add	sp, #116	; 0x74
 8007bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	ab03      	add	r3, sp, #12
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	462a      	mov	r2, r5
 8007bca:	4638      	mov	r0, r7
 8007bcc:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <_svfiprintf_r+0x1f8>)
 8007bce:	a904      	add	r1, sp, #16
 8007bd0:	f7fc fce4 	bl	800459c <_printf_i>
 8007bd4:	e7eb      	b.n	8007bae <_svfiprintf_r+0x1c2>
 8007bd6:	bf00      	nop
 8007bd8:	080093d4 	.word	0x080093d4
 8007bdc:	080093de 	.word	0x080093de
 8007be0:	08004065 	.word	0x08004065
 8007be4:	08007935 	.word	0x08007935
 8007be8:	080093da 	.word	0x080093da

08007bec <nan>:
 8007bec:	2000      	movs	r0, #0
 8007bee:	4901      	ldr	r1, [pc, #4]	; (8007bf4 <nan+0x8>)
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	7ff80000 	.word	0x7ff80000

08007bf8 <_sbrk_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4d05      	ldr	r5, [pc, #20]	; (8007c14 <_sbrk_r+0x1c>)
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	f7f9 ff0e 	bl	8001a24 <_sbrk>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_sbrk_r+0x1a>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_sbrk_r+0x1a>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	200006c4 	.word	0x200006c4

08007c18 <strncmp>:
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	b16a      	cbz	r2, 8007c38 <strncmp+0x20>
 8007c1c:	3901      	subs	r1, #1
 8007c1e:	1884      	adds	r4, r0, r2
 8007c20:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007c24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d103      	bne.n	8007c34 <strncmp+0x1c>
 8007c2c:	42a0      	cmp	r0, r4
 8007c2e:	d001      	beq.n	8007c34 <strncmp+0x1c>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1f5      	bne.n	8007c20 <strncmp+0x8>
 8007c34:	1a98      	subs	r0, r3, r2
 8007c36:	bd10      	pop	{r4, pc}
 8007c38:	4610      	mov	r0, r2
 8007c3a:	e7fc      	b.n	8007c36 <strncmp+0x1e>

08007c3c <__ascii_wctomb>:
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	b141      	cbz	r1, 8007c54 <__ascii_wctomb+0x18>
 8007c42:	2aff      	cmp	r2, #255	; 0xff
 8007c44:	d904      	bls.n	8007c50 <__ascii_wctomb+0x14>
 8007c46:	228a      	movs	r2, #138	; 0x8a
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	4770      	bx	lr
 8007c50:	2001      	movs	r0, #1
 8007c52:	700a      	strb	r2, [r1, #0]
 8007c54:	4770      	bx	lr
	...

08007c58 <__assert_func>:
 8007c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c5a:	4614      	mov	r4, r2
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <__assert_func+0x2c>)
 8007c60:	4605      	mov	r5, r0
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68d8      	ldr	r0, [r3, #12]
 8007c66:	b14c      	cbz	r4, 8007c7c <__assert_func+0x24>
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <__assert_func+0x30>)
 8007c6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c6e:	9100      	str	r1, [sp, #0]
 8007c70:	462b      	mov	r3, r5
 8007c72:	4906      	ldr	r1, [pc, #24]	; (8007c8c <__assert_func+0x34>)
 8007c74:	f000 f80e 	bl	8007c94 <fiprintf>
 8007c78:	f000 fa82 	bl	8008180 <abort>
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <__assert_func+0x38>)
 8007c7e:	461c      	mov	r4, r3
 8007c80:	e7f3      	b.n	8007c6a <__assert_func+0x12>
 8007c82:	bf00      	nop
 8007c84:	20000014 	.word	0x20000014
 8007c88:	080093e5 	.word	0x080093e5
 8007c8c:	080093f2 	.word	0x080093f2
 8007c90:	08009420 	.word	0x08009420

08007c94 <fiprintf>:
 8007c94:	b40e      	push	{r1, r2, r3}
 8007c96:	b503      	push	{r0, r1, lr}
 8007c98:	4601      	mov	r1, r0
 8007c9a:	ab03      	add	r3, sp, #12
 8007c9c:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <fiprintf+0x20>)
 8007c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca2:	6800      	ldr	r0, [r0, #0]
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	f000 f87b 	bl	8007da0 <_vfiprintf_r>
 8007caa:	b002      	add	sp, #8
 8007cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cb0:	b003      	add	sp, #12
 8007cb2:	4770      	bx	lr
 8007cb4:	20000014 	.word	0x20000014

08007cb8 <memmove>:
 8007cb8:	4288      	cmp	r0, r1
 8007cba:	b510      	push	{r4, lr}
 8007cbc:	eb01 0402 	add.w	r4, r1, r2
 8007cc0:	d902      	bls.n	8007cc8 <memmove+0x10>
 8007cc2:	4284      	cmp	r4, r0
 8007cc4:	4623      	mov	r3, r4
 8007cc6:	d807      	bhi.n	8007cd8 <memmove+0x20>
 8007cc8:	1e43      	subs	r3, r0, #1
 8007cca:	42a1      	cmp	r1, r4
 8007ccc:	d008      	beq.n	8007ce0 <memmove+0x28>
 8007cce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cd6:	e7f8      	b.n	8007cca <memmove+0x12>
 8007cd8:	4601      	mov	r1, r0
 8007cda:	4402      	add	r2, r0
 8007cdc:	428a      	cmp	r2, r1
 8007cde:	d100      	bne.n	8007ce2 <memmove+0x2a>
 8007ce0:	bd10      	pop	{r4, pc}
 8007ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ce6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cea:	e7f7      	b.n	8007cdc <memmove+0x24>

08007cec <__malloc_lock>:
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__malloc_lock+0x8>)
 8007cee:	f000 bc07 	b.w	8008500 <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	200006cc 	.word	0x200006cc

08007cf8 <__malloc_unlock>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__malloc_unlock+0x8>)
 8007cfa:	f000 bc02 	b.w	8008502 <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	200006cc 	.word	0x200006cc

08007d04 <_realloc_r>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	4607      	mov	r7, r0
 8007d08:	4614      	mov	r4, r2
 8007d0a:	460e      	mov	r6, r1
 8007d0c:	b921      	cbnz	r1, 8007d18 <_realloc_r+0x14>
 8007d0e:	4611      	mov	r1, r2
 8007d10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d14:	f7ff bdb4 	b.w	8007880 <_malloc_r>
 8007d18:	b922      	cbnz	r2, 8007d24 <_realloc_r+0x20>
 8007d1a:	f7ff fd65 	bl	80077e8 <_free_r>
 8007d1e:	4625      	mov	r5, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d24:	f000 fc52 	bl	80085cc <_malloc_usable_size_r>
 8007d28:	42a0      	cmp	r0, r4
 8007d2a:	d20f      	bcs.n	8007d4c <_realloc_r+0x48>
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f7ff fda6 	bl	8007880 <_malloc_r>
 8007d34:	4605      	mov	r5, r0
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d0f2      	beq.n	8007d20 <_realloc_r+0x1c>
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	f7ff f87f 	bl	8006e40 <memcpy>
 8007d42:	4631      	mov	r1, r6
 8007d44:	4638      	mov	r0, r7
 8007d46:	f7ff fd4f 	bl	80077e8 <_free_r>
 8007d4a:	e7e9      	b.n	8007d20 <_realloc_r+0x1c>
 8007d4c:	4635      	mov	r5, r6
 8007d4e:	e7e7      	b.n	8007d20 <_realloc_r+0x1c>

08007d50 <__sfputc_r>:
 8007d50:	6893      	ldr	r3, [r2, #8]
 8007d52:	b410      	push	{r4}
 8007d54:	3b01      	subs	r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	6093      	str	r3, [r2, #8]
 8007d5a:	da07      	bge.n	8007d6c <__sfputc_r+0x1c>
 8007d5c:	6994      	ldr	r4, [r2, #24]
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	db01      	blt.n	8007d66 <__sfputc_r+0x16>
 8007d62:	290a      	cmp	r1, #10
 8007d64:	d102      	bne.n	8007d6c <__sfputc_r+0x1c>
 8007d66:	bc10      	pop	{r4}
 8007d68:	f000 b94a 	b.w	8008000 <__swbuf_r>
 8007d6c:	6813      	ldr	r3, [r2, #0]
 8007d6e:	1c58      	adds	r0, r3, #1
 8007d70:	6010      	str	r0, [r2, #0]
 8007d72:	7019      	strb	r1, [r3, #0]
 8007d74:	4608      	mov	r0, r1
 8007d76:	bc10      	pop	{r4}
 8007d78:	4770      	bx	lr

08007d7a <__sfputs_r>:
 8007d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	460f      	mov	r7, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	18d5      	adds	r5, r2, r3
 8007d84:	42ac      	cmp	r4, r5
 8007d86:	d101      	bne.n	8007d8c <__sfputs_r+0x12>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	e007      	b.n	8007d9c <__sfputs_r+0x22>
 8007d8c:	463a      	mov	r2, r7
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	f7ff ffdc 	bl	8007d50 <__sfputc_r>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d1f3      	bne.n	8007d84 <__sfputs_r+0xa>
 8007d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007da0 <_vfiprintf_r>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	460d      	mov	r5, r1
 8007da6:	4614      	mov	r4, r2
 8007da8:	4698      	mov	r8, r3
 8007daa:	4606      	mov	r6, r0
 8007dac:	b09d      	sub	sp, #116	; 0x74
 8007dae:	b118      	cbz	r0, 8007db8 <_vfiprintf_r+0x18>
 8007db0:	6983      	ldr	r3, [r0, #24]
 8007db2:	b90b      	cbnz	r3, 8007db8 <_vfiprintf_r+0x18>
 8007db4:	f000 fb06 	bl	80083c4 <__sinit>
 8007db8:	4b89      	ldr	r3, [pc, #548]	; (8007fe0 <_vfiprintf_r+0x240>)
 8007dba:	429d      	cmp	r5, r3
 8007dbc:	d11b      	bne.n	8007df6 <_vfiprintf_r+0x56>
 8007dbe:	6875      	ldr	r5, [r6, #4]
 8007dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dc2:	07d9      	lsls	r1, r3, #31
 8007dc4:	d405      	bmi.n	8007dd2 <_vfiprintf_r+0x32>
 8007dc6:	89ab      	ldrh	r3, [r5, #12]
 8007dc8:	059a      	lsls	r2, r3, #22
 8007dca:	d402      	bmi.n	8007dd2 <_vfiprintf_r+0x32>
 8007dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dce:	f000 fb97 	bl	8008500 <__retarget_lock_acquire_recursive>
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	071b      	lsls	r3, r3, #28
 8007dd6:	d501      	bpl.n	8007ddc <_vfiprintf_r+0x3c>
 8007dd8:	692b      	ldr	r3, [r5, #16]
 8007dda:	b9eb      	cbnz	r3, 8007e18 <_vfiprintf_r+0x78>
 8007ddc:	4629      	mov	r1, r5
 8007dde:	4630      	mov	r0, r6
 8007de0:	f000 f960 	bl	80080a4 <__swsetup_r>
 8007de4:	b1c0      	cbz	r0, 8007e18 <_vfiprintf_r+0x78>
 8007de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007de8:	07dc      	lsls	r4, r3, #31
 8007dea:	d50e      	bpl.n	8007e0a <_vfiprintf_r+0x6a>
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	b01d      	add	sp, #116	; 0x74
 8007df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df6:	4b7b      	ldr	r3, [pc, #492]	; (8007fe4 <_vfiprintf_r+0x244>)
 8007df8:	429d      	cmp	r5, r3
 8007dfa:	d101      	bne.n	8007e00 <_vfiprintf_r+0x60>
 8007dfc:	68b5      	ldr	r5, [r6, #8]
 8007dfe:	e7df      	b.n	8007dc0 <_vfiprintf_r+0x20>
 8007e00:	4b79      	ldr	r3, [pc, #484]	; (8007fe8 <_vfiprintf_r+0x248>)
 8007e02:	429d      	cmp	r5, r3
 8007e04:	bf08      	it	eq
 8007e06:	68f5      	ldreq	r5, [r6, #12]
 8007e08:	e7da      	b.n	8007dc0 <_vfiprintf_r+0x20>
 8007e0a:	89ab      	ldrh	r3, [r5, #12]
 8007e0c:	0598      	lsls	r0, r3, #22
 8007e0e:	d4ed      	bmi.n	8007dec <_vfiprintf_r+0x4c>
 8007e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e12:	f000 fb76 	bl	8008502 <__retarget_lock_release_recursive>
 8007e16:	e7e9      	b.n	8007dec <_vfiprintf_r+0x4c>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1c:	2320      	movs	r3, #32
 8007e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e22:	2330      	movs	r3, #48	; 0x30
 8007e24:	f04f 0901 	mov.w	r9, #1
 8007e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007fec <_vfiprintf_r+0x24c>
 8007e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e34:	4623      	mov	r3, r4
 8007e36:	469a      	mov	sl, r3
 8007e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e3c:	b10a      	cbz	r2, 8007e42 <_vfiprintf_r+0xa2>
 8007e3e:	2a25      	cmp	r2, #37	; 0x25
 8007e40:	d1f9      	bne.n	8007e36 <_vfiprintf_r+0x96>
 8007e42:	ebba 0b04 	subs.w	fp, sl, r4
 8007e46:	d00b      	beq.n	8007e60 <_vfiprintf_r+0xc0>
 8007e48:	465b      	mov	r3, fp
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff ff93 	bl	8007d7a <__sfputs_r>
 8007e54:	3001      	adds	r0, #1
 8007e56:	f000 80aa 	beq.w	8007fae <_vfiprintf_r+0x20e>
 8007e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e5c:	445a      	add	r2, fp
 8007e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e60:	f89a 3000 	ldrb.w	r3, [sl]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 80a2 	beq.w	8007fae <_vfiprintf_r+0x20e>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e74:	f10a 0a01 	add.w	sl, sl, #1
 8007e78:	9304      	str	r3, [sp, #16]
 8007e7a:	9307      	str	r3, [sp, #28]
 8007e7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e80:	931a      	str	r3, [sp, #104]	; 0x68
 8007e82:	4654      	mov	r4, sl
 8007e84:	2205      	movs	r2, #5
 8007e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8a:	4858      	ldr	r0, [pc, #352]	; (8007fec <_vfiprintf_r+0x24c>)
 8007e8c:	f7fe ffca 	bl	8006e24 <memchr>
 8007e90:	9a04      	ldr	r2, [sp, #16]
 8007e92:	b9d8      	cbnz	r0, 8007ecc <_vfiprintf_r+0x12c>
 8007e94:	06d1      	lsls	r1, r2, #27
 8007e96:	bf44      	itt	mi
 8007e98:	2320      	movmi	r3, #32
 8007e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e9e:	0713      	lsls	r3, r2, #28
 8007ea0:	bf44      	itt	mi
 8007ea2:	232b      	movmi	r3, #43	; 0x2b
 8007ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8007eac:	2b2a      	cmp	r3, #42	; 0x2a
 8007eae:	d015      	beq.n	8007edc <_vfiprintf_r+0x13c>
 8007eb0:	4654      	mov	r4, sl
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f04f 0c0a 	mov.w	ip, #10
 8007eb8:	9a07      	ldr	r2, [sp, #28]
 8007eba:	4621      	mov	r1, r4
 8007ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ec0:	3b30      	subs	r3, #48	; 0x30
 8007ec2:	2b09      	cmp	r3, #9
 8007ec4:	d94e      	bls.n	8007f64 <_vfiprintf_r+0x1c4>
 8007ec6:	b1b0      	cbz	r0, 8007ef6 <_vfiprintf_r+0x156>
 8007ec8:	9207      	str	r2, [sp, #28]
 8007eca:	e014      	b.n	8007ef6 <_vfiprintf_r+0x156>
 8007ecc:	eba0 0308 	sub.w	r3, r0, r8
 8007ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	46a2      	mov	sl, r4
 8007ed8:	9304      	str	r3, [sp, #16]
 8007eda:	e7d2      	b.n	8007e82 <_vfiprintf_r+0xe2>
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	1d19      	adds	r1, r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	9103      	str	r1, [sp, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	bfbb      	ittet	lt
 8007ee8:	425b      	neglt	r3, r3
 8007eea:	f042 0202 	orrlt.w	r2, r2, #2
 8007eee:	9307      	strge	r3, [sp, #28]
 8007ef0:	9307      	strlt	r3, [sp, #28]
 8007ef2:	bfb8      	it	lt
 8007ef4:	9204      	strlt	r2, [sp, #16]
 8007ef6:	7823      	ldrb	r3, [r4, #0]
 8007ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8007efa:	d10c      	bne.n	8007f16 <_vfiprintf_r+0x176>
 8007efc:	7863      	ldrb	r3, [r4, #1]
 8007efe:	2b2a      	cmp	r3, #42	; 0x2a
 8007f00:	d135      	bne.n	8007f6e <_vfiprintf_r+0x1ce>
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	3402      	adds	r4, #2
 8007f06:	1d1a      	adds	r2, r3, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	9203      	str	r2, [sp, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bfb8      	it	lt
 8007f10:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f14:	9305      	str	r3, [sp, #20]
 8007f16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ffc <_vfiprintf_r+0x25c>
 8007f1a:	2203      	movs	r2, #3
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	7821      	ldrb	r1, [r4, #0]
 8007f20:	f7fe ff80 	bl	8006e24 <memchr>
 8007f24:	b140      	cbz	r0, 8007f38 <_vfiprintf_r+0x198>
 8007f26:	2340      	movs	r3, #64	; 0x40
 8007f28:	eba0 000a 	sub.w	r0, r0, sl
 8007f2c:	fa03 f000 	lsl.w	r0, r3, r0
 8007f30:	9b04      	ldr	r3, [sp, #16]
 8007f32:	3401      	adds	r4, #1
 8007f34:	4303      	orrs	r3, r0
 8007f36:	9304      	str	r3, [sp, #16]
 8007f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f3c:	2206      	movs	r2, #6
 8007f3e:	482c      	ldr	r0, [pc, #176]	; (8007ff0 <_vfiprintf_r+0x250>)
 8007f40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f44:	f7fe ff6e 	bl	8006e24 <memchr>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d03f      	beq.n	8007fcc <_vfiprintf_r+0x22c>
 8007f4c:	4b29      	ldr	r3, [pc, #164]	; (8007ff4 <_vfiprintf_r+0x254>)
 8007f4e:	bb1b      	cbnz	r3, 8007f98 <_vfiprintf_r+0x1f8>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	3307      	adds	r3, #7
 8007f54:	f023 0307 	bic.w	r3, r3, #7
 8007f58:	3308      	adds	r3, #8
 8007f5a:	9303      	str	r3, [sp, #12]
 8007f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5e:	443b      	add	r3, r7
 8007f60:	9309      	str	r3, [sp, #36]	; 0x24
 8007f62:	e767      	b.n	8007e34 <_vfiprintf_r+0x94>
 8007f64:	460c      	mov	r4, r1
 8007f66:	2001      	movs	r0, #1
 8007f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f6c:	e7a5      	b.n	8007eba <_vfiprintf_r+0x11a>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f04f 0c0a 	mov.w	ip, #10
 8007f74:	4619      	mov	r1, r3
 8007f76:	3401      	adds	r4, #1
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f80:	3a30      	subs	r2, #48	; 0x30
 8007f82:	2a09      	cmp	r2, #9
 8007f84:	d903      	bls.n	8007f8e <_vfiprintf_r+0x1ee>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0c5      	beq.n	8007f16 <_vfiprintf_r+0x176>
 8007f8a:	9105      	str	r1, [sp, #20]
 8007f8c:	e7c3      	b.n	8007f16 <_vfiprintf_r+0x176>
 8007f8e:	4604      	mov	r4, r0
 8007f90:	2301      	movs	r3, #1
 8007f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f96:	e7f0      	b.n	8007f7a <_vfiprintf_r+0x1da>
 8007f98:	ab03      	add	r3, sp, #12
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	4b15      	ldr	r3, [pc, #84]	; (8007ff8 <_vfiprintf_r+0x258>)
 8007fa2:	a904      	add	r1, sp, #16
 8007fa4:	f7fc f85e 	bl	8004064 <_printf_float>
 8007fa8:	4607      	mov	r7, r0
 8007faa:	1c78      	adds	r0, r7, #1
 8007fac:	d1d6      	bne.n	8007f5c <_vfiprintf_r+0x1bc>
 8007fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fb0:	07d9      	lsls	r1, r3, #31
 8007fb2:	d405      	bmi.n	8007fc0 <_vfiprintf_r+0x220>
 8007fb4:	89ab      	ldrh	r3, [r5, #12]
 8007fb6:	059a      	lsls	r2, r3, #22
 8007fb8:	d402      	bmi.n	8007fc0 <_vfiprintf_r+0x220>
 8007fba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fbc:	f000 faa1 	bl	8008502 <__retarget_lock_release_recursive>
 8007fc0:	89ab      	ldrh	r3, [r5, #12]
 8007fc2:	065b      	lsls	r3, r3, #25
 8007fc4:	f53f af12 	bmi.w	8007dec <_vfiprintf_r+0x4c>
 8007fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fca:	e711      	b.n	8007df0 <_vfiprintf_r+0x50>
 8007fcc:	ab03      	add	r3, sp, #12
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	4b08      	ldr	r3, [pc, #32]	; (8007ff8 <_vfiprintf_r+0x258>)
 8007fd6:	a904      	add	r1, sp, #16
 8007fd8:	f7fc fae0 	bl	800459c <_printf_i>
 8007fdc:	e7e4      	b.n	8007fa8 <_vfiprintf_r+0x208>
 8007fde:	bf00      	nop
 8007fe0:	08009444 	.word	0x08009444
 8007fe4:	08009464 	.word	0x08009464
 8007fe8:	08009424 	.word	0x08009424
 8007fec:	080093d4 	.word	0x080093d4
 8007ff0:	080093de 	.word	0x080093de
 8007ff4:	08004065 	.word	0x08004065
 8007ff8:	08007d7b 	.word	0x08007d7b
 8007ffc:	080093da 	.word	0x080093da

08008000 <__swbuf_r>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	460e      	mov	r6, r1
 8008004:	4614      	mov	r4, r2
 8008006:	4605      	mov	r5, r0
 8008008:	b118      	cbz	r0, 8008012 <__swbuf_r+0x12>
 800800a:	6983      	ldr	r3, [r0, #24]
 800800c:	b90b      	cbnz	r3, 8008012 <__swbuf_r+0x12>
 800800e:	f000 f9d9 	bl	80083c4 <__sinit>
 8008012:	4b21      	ldr	r3, [pc, #132]	; (8008098 <__swbuf_r+0x98>)
 8008014:	429c      	cmp	r4, r3
 8008016:	d12b      	bne.n	8008070 <__swbuf_r+0x70>
 8008018:	686c      	ldr	r4, [r5, #4]
 800801a:	69a3      	ldr	r3, [r4, #24]
 800801c:	60a3      	str	r3, [r4, #8]
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	071a      	lsls	r2, r3, #28
 8008022:	d52f      	bpl.n	8008084 <__swbuf_r+0x84>
 8008024:	6923      	ldr	r3, [r4, #16]
 8008026:	b36b      	cbz	r3, 8008084 <__swbuf_r+0x84>
 8008028:	6923      	ldr	r3, [r4, #16]
 800802a:	6820      	ldr	r0, [r4, #0]
 800802c:	b2f6      	uxtb	r6, r6
 800802e:	1ac0      	subs	r0, r0, r3
 8008030:	6963      	ldr	r3, [r4, #20]
 8008032:	4637      	mov	r7, r6
 8008034:	4283      	cmp	r3, r0
 8008036:	dc04      	bgt.n	8008042 <__swbuf_r+0x42>
 8008038:	4621      	mov	r1, r4
 800803a:	4628      	mov	r0, r5
 800803c:	f000 f92e 	bl	800829c <_fflush_r>
 8008040:	bb30      	cbnz	r0, 8008090 <__swbuf_r+0x90>
 8008042:	68a3      	ldr	r3, [r4, #8]
 8008044:	3001      	adds	r0, #1
 8008046:	3b01      	subs	r3, #1
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	6022      	str	r2, [r4, #0]
 8008050:	701e      	strb	r6, [r3, #0]
 8008052:	6963      	ldr	r3, [r4, #20]
 8008054:	4283      	cmp	r3, r0
 8008056:	d004      	beq.n	8008062 <__swbuf_r+0x62>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	07db      	lsls	r3, r3, #31
 800805c:	d506      	bpl.n	800806c <__swbuf_r+0x6c>
 800805e:	2e0a      	cmp	r6, #10
 8008060:	d104      	bne.n	800806c <__swbuf_r+0x6c>
 8008062:	4621      	mov	r1, r4
 8008064:	4628      	mov	r0, r5
 8008066:	f000 f919 	bl	800829c <_fflush_r>
 800806a:	b988      	cbnz	r0, 8008090 <__swbuf_r+0x90>
 800806c:	4638      	mov	r0, r7
 800806e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008070:	4b0a      	ldr	r3, [pc, #40]	; (800809c <__swbuf_r+0x9c>)
 8008072:	429c      	cmp	r4, r3
 8008074:	d101      	bne.n	800807a <__swbuf_r+0x7a>
 8008076:	68ac      	ldr	r4, [r5, #8]
 8008078:	e7cf      	b.n	800801a <__swbuf_r+0x1a>
 800807a:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <__swbuf_r+0xa0>)
 800807c:	429c      	cmp	r4, r3
 800807e:	bf08      	it	eq
 8008080:	68ec      	ldreq	r4, [r5, #12]
 8008082:	e7ca      	b.n	800801a <__swbuf_r+0x1a>
 8008084:	4621      	mov	r1, r4
 8008086:	4628      	mov	r0, r5
 8008088:	f000 f80c 	bl	80080a4 <__swsetup_r>
 800808c:	2800      	cmp	r0, #0
 800808e:	d0cb      	beq.n	8008028 <__swbuf_r+0x28>
 8008090:	f04f 37ff 	mov.w	r7, #4294967295
 8008094:	e7ea      	b.n	800806c <__swbuf_r+0x6c>
 8008096:	bf00      	nop
 8008098:	08009444 	.word	0x08009444
 800809c:	08009464 	.word	0x08009464
 80080a0:	08009424 	.word	0x08009424

080080a4 <__swsetup_r>:
 80080a4:	4b32      	ldr	r3, [pc, #200]	; (8008170 <__swsetup_r+0xcc>)
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	681d      	ldr	r5, [r3, #0]
 80080aa:	4606      	mov	r6, r0
 80080ac:	460c      	mov	r4, r1
 80080ae:	b125      	cbz	r5, 80080ba <__swsetup_r+0x16>
 80080b0:	69ab      	ldr	r3, [r5, #24]
 80080b2:	b913      	cbnz	r3, 80080ba <__swsetup_r+0x16>
 80080b4:	4628      	mov	r0, r5
 80080b6:	f000 f985 	bl	80083c4 <__sinit>
 80080ba:	4b2e      	ldr	r3, [pc, #184]	; (8008174 <__swsetup_r+0xd0>)
 80080bc:	429c      	cmp	r4, r3
 80080be:	d10f      	bne.n	80080e0 <__swsetup_r+0x3c>
 80080c0:	686c      	ldr	r4, [r5, #4]
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080c8:	0719      	lsls	r1, r3, #28
 80080ca:	d42c      	bmi.n	8008126 <__swsetup_r+0x82>
 80080cc:	06dd      	lsls	r5, r3, #27
 80080ce:	d411      	bmi.n	80080f4 <__swsetup_r+0x50>
 80080d0:	2309      	movs	r3, #9
 80080d2:	6033      	str	r3, [r6, #0]
 80080d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	e03e      	b.n	800815e <__swsetup_r+0xba>
 80080e0:	4b25      	ldr	r3, [pc, #148]	; (8008178 <__swsetup_r+0xd4>)
 80080e2:	429c      	cmp	r4, r3
 80080e4:	d101      	bne.n	80080ea <__swsetup_r+0x46>
 80080e6:	68ac      	ldr	r4, [r5, #8]
 80080e8:	e7eb      	b.n	80080c2 <__swsetup_r+0x1e>
 80080ea:	4b24      	ldr	r3, [pc, #144]	; (800817c <__swsetup_r+0xd8>)
 80080ec:	429c      	cmp	r4, r3
 80080ee:	bf08      	it	eq
 80080f0:	68ec      	ldreq	r4, [r5, #12]
 80080f2:	e7e6      	b.n	80080c2 <__swsetup_r+0x1e>
 80080f4:	0758      	lsls	r0, r3, #29
 80080f6:	d512      	bpl.n	800811e <__swsetup_r+0x7a>
 80080f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080fa:	b141      	cbz	r1, 800810e <__swsetup_r+0x6a>
 80080fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008100:	4299      	cmp	r1, r3
 8008102:	d002      	beq.n	800810a <__swsetup_r+0x66>
 8008104:	4630      	mov	r0, r6
 8008106:	f7ff fb6f 	bl	80077e8 <_free_r>
 800810a:	2300      	movs	r3, #0
 800810c:	6363      	str	r3, [r4, #52]	; 0x34
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	2300      	movs	r3, #0
 8008118:	6063      	str	r3, [r4, #4]
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	f043 0308 	orr.w	r3, r3, #8
 8008124:	81a3      	strh	r3, [r4, #12]
 8008126:	6923      	ldr	r3, [r4, #16]
 8008128:	b94b      	cbnz	r3, 800813e <__swsetup_r+0x9a>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008134:	d003      	beq.n	800813e <__swsetup_r+0x9a>
 8008136:	4621      	mov	r1, r4
 8008138:	4630      	mov	r0, r6
 800813a:	f000 fa07 	bl	800854c <__smakebuf_r>
 800813e:	89a0      	ldrh	r0, [r4, #12]
 8008140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008144:	f010 0301 	ands.w	r3, r0, #1
 8008148:	d00a      	beq.n	8008160 <__swsetup_r+0xbc>
 800814a:	2300      	movs	r3, #0
 800814c:	60a3      	str	r3, [r4, #8]
 800814e:	6963      	ldr	r3, [r4, #20]
 8008150:	425b      	negs	r3, r3
 8008152:	61a3      	str	r3, [r4, #24]
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	b943      	cbnz	r3, 800816a <__swsetup_r+0xc6>
 8008158:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800815c:	d1ba      	bne.n	80080d4 <__swsetup_r+0x30>
 800815e:	bd70      	pop	{r4, r5, r6, pc}
 8008160:	0781      	lsls	r1, r0, #30
 8008162:	bf58      	it	pl
 8008164:	6963      	ldrpl	r3, [r4, #20]
 8008166:	60a3      	str	r3, [r4, #8]
 8008168:	e7f4      	b.n	8008154 <__swsetup_r+0xb0>
 800816a:	2000      	movs	r0, #0
 800816c:	e7f7      	b.n	800815e <__swsetup_r+0xba>
 800816e:	bf00      	nop
 8008170:	20000014 	.word	0x20000014
 8008174:	08009444 	.word	0x08009444
 8008178:	08009464 	.word	0x08009464
 800817c:	08009424 	.word	0x08009424

08008180 <abort>:
 8008180:	2006      	movs	r0, #6
 8008182:	b508      	push	{r3, lr}
 8008184:	f000 fa52 	bl	800862c <raise>
 8008188:	2001      	movs	r0, #1
 800818a:	f7f9 fbd7 	bl	800193c <_exit>
	...

08008190 <__sflush_r>:
 8008190:	898a      	ldrh	r2, [r1, #12]
 8008192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008196:	4605      	mov	r5, r0
 8008198:	0710      	lsls	r0, r2, #28
 800819a:	460c      	mov	r4, r1
 800819c:	d458      	bmi.n	8008250 <__sflush_r+0xc0>
 800819e:	684b      	ldr	r3, [r1, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	dc05      	bgt.n	80081b0 <__sflush_r+0x20>
 80081a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dc02      	bgt.n	80081b0 <__sflush_r+0x20>
 80081aa:	2000      	movs	r0, #0
 80081ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081b2:	2e00      	cmp	r6, #0
 80081b4:	d0f9      	beq.n	80081aa <__sflush_r+0x1a>
 80081b6:	2300      	movs	r3, #0
 80081b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081bc:	682f      	ldr	r7, [r5, #0]
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	d032      	beq.n	8008228 <__sflush_r+0x98>
 80081c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	075a      	lsls	r2, r3, #29
 80081c8:	d505      	bpl.n	80081d6 <__sflush_r+0x46>
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	1ac0      	subs	r0, r0, r3
 80081ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081d0:	b10b      	cbz	r3, 80081d6 <__sflush_r+0x46>
 80081d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081d4:	1ac0      	subs	r0, r0, r3
 80081d6:	2300      	movs	r3, #0
 80081d8:	4602      	mov	r2, r0
 80081da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081dc:	4628      	mov	r0, r5
 80081de:	6a21      	ldr	r1, [r4, #32]
 80081e0:	47b0      	blx	r6
 80081e2:	1c43      	adds	r3, r0, #1
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	d106      	bne.n	80081f6 <__sflush_r+0x66>
 80081e8:	6829      	ldr	r1, [r5, #0]
 80081ea:	291d      	cmp	r1, #29
 80081ec:	d82c      	bhi.n	8008248 <__sflush_r+0xb8>
 80081ee:	4a2a      	ldr	r2, [pc, #168]	; (8008298 <__sflush_r+0x108>)
 80081f0:	40ca      	lsrs	r2, r1
 80081f2:	07d6      	lsls	r6, r2, #31
 80081f4:	d528      	bpl.n	8008248 <__sflush_r+0xb8>
 80081f6:	2200      	movs	r2, #0
 80081f8:	6062      	str	r2, [r4, #4]
 80081fa:	6922      	ldr	r2, [r4, #16]
 80081fc:	04d9      	lsls	r1, r3, #19
 80081fe:	6022      	str	r2, [r4, #0]
 8008200:	d504      	bpl.n	800820c <__sflush_r+0x7c>
 8008202:	1c42      	adds	r2, r0, #1
 8008204:	d101      	bne.n	800820a <__sflush_r+0x7a>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	b903      	cbnz	r3, 800820c <__sflush_r+0x7c>
 800820a:	6560      	str	r0, [r4, #84]	; 0x54
 800820c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800820e:	602f      	str	r7, [r5, #0]
 8008210:	2900      	cmp	r1, #0
 8008212:	d0ca      	beq.n	80081aa <__sflush_r+0x1a>
 8008214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008218:	4299      	cmp	r1, r3
 800821a:	d002      	beq.n	8008222 <__sflush_r+0x92>
 800821c:	4628      	mov	r0, r5
 800821e:	f7ff fae3 	bl	80077e8 <_free_r>
 8008222:	2000      	movs	r0, #0
 8008224:	6360      	str	r0, [r4, #52]	; 0x34
 8008226:	e7c1      	b.n	80081ac <__sflush_r+0x1c>
 8008228:	6a21      	ldr	r1, [r4, #32]
 800822a:	2301      	movs	r3, #1
 800822c:	4628      	mov	r0, r5
 800822e:	47b0      	blx	r6
 8008230:	1c41      	adds	r1, r0, #1
 8008232:	d1c7      	bne.n	80081c4 <__sflush_r+0x34>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0c4      	beq.n	80081c4 <__sflush_r+0x34>
 800823a:	2b1d      	cmp	r3, #29
 800823c:	d001      	beq.n	8008242 <__sflush_r+0xb2>
 800823e:	2b16      	cmp	r3, #22
 8008240:	d101      	bne.n	8008246 <__sflush_r+0xb6>
 8008242:	602f      	str	r7, [r5, #0]
 8008244:	e7b1      	b.n	80081aa <__sflush_r+0x1a>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	e7ad      	b.n	80081ac <__sflush_r+0x1c>
 8008250:	690f      	ldr	r7, [r1, #16]
 8008252:	2f00      	cmp	r7, #0
 8008254:	d0a9      	beq.n	80081aa <__sflush_r+0x1a>
 8008256:	0793      	lsls	r3, r2, #30
 8008258:	bf18      	it	ne
 800825a:	2300      	movne	r3, #0
 800825c:	680e      	ldr	r6, [r1, #0]
 800825e:	bf08      	it	eq
 8008260:	694b      	ldreq	r3, [r1, #20]
 8008262:	eba6 0807 	sub.w	r8, r6, r7
 8008266:	600f      	str	r7, [r1, #0]
 8008268:	608b      	str	r3, [r1, #8]
 800826a:	f1b8 0f00 	cmp.w	r8, #0
 800826e:	dd9c      	ble.n	80081aa <__sflush_r+0x1a>
 8008270:	4643      	mov	r3, r8
 8008272:	463a      	mov	r2, r7
 8008274:	4628      	mov	r0, r5
 8008276:	6a21      	ldr	r1, [r4, #32]
 8008278:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800827a:	47b0      	blx	r6
 800827c:	2800      	cmp	r0, #0
 800827e:	dc06      	bgt.n	800828e <__sflush_r+0xfe>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	e78e      	b.n	80081ac <__sflush_r+0x1c>
 800828e:	4407      	add	r7, r0
 8008290:	eba8 0800 	sub.w	r8, r8, r0
 8008294:	e7e9      	b.n	800826a <__sflush_r+0xda>
 8008296:	bf00      	nop
 8008298:	20400001 	.word	0x20400001

0800829c <_fflush_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	690b      	ldr	r3, [r1, #16]
 80082a0:	4605      	mov	r5, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	b913      	cbnz	r3, 80082ac <_fflush_r+0x10>
 80082a6:	2500      	movs	r5, #0
 80082a8:	4628      	mov	r0, r5
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	b118      	cbz	r0, 80082b6 <_fflush_r+0x1a>
 80082ae:	6983      	ldr	r3, [r0, #24]
 80082b0:	b90b      	cbnz	r3, 80082b6 <_fflush_r+0x1a>
 80082b2:	f000 f887 	bl	80083c4 <__sinit>
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <_fflush_r+0x6c>)
 80082b8:	429c      	cmp	r4, r3
 80082ba:	d11b      	bne.n	80082f4 <_fflush_r+0x58>
 80082bc:	686c      	ldr	r4, [r5, #4]
 80082be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0ef      	beq.n	80082a6 <_fflush_r+0xa>
 80082c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082c8:	07d0      	lsls	r0, r2, #31
 80082ca:	d404      	bmi.n	80082d6 <_fflush_r+0x3a>
 80082cc:	0599      	lsls	r1, r3, #22
 80082ce:	d402      	bmi.n	80082d6 <_fflush_r+0x3a>
 80082d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082d2:	f000 f915 	bl	8008500 <__retarget_lock_acquire_recursive>
 80082d6:	4628      	mov	r0, r5
 80082d8:	4621      	mov	r1, r4
 80082da:	f7ff ff59 	bl	8008190 <__sflush_r>
 80082de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082e0:	4605      	mov	r5, r0
 80082e2:	07da      	lsls	r2, r3, #31
 80082e4:	d4e0      	bmi.n	80082a8 <_fflush_r+0xc>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	059b      	lsls	r3, r3, #22
 80082ea:	d4dd      	bmi.n	80082a8 <_fflush_r+0xc>
 80082ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ee:	f000 f908 	bl	8008502 <__retarget_lock_release_recursive>
 80082f2:	e7d9      	b.n	80082a8 <_fflush_r+0xc>
 80082f4:	4b05      	ldr	r3, [pc, #20]	; (800830c <_fflush_r+0x70>)
 80082f6:	429c      	cmp	r4, r3
 80082f8:	d101      	bne.n	80082fe <_fflush_r+0x62>
 80082fa:	68ac      	ldr	r4, [r5, #8]
 80082fc:	e7df      	b.n	80082be <_fflush_r+0x22>
 80082fe:	4b04      	ldr	r3, [pc, #16]	; (8008310 <_fflush_r+0x74>)
 8008300:	429c      	cmp	r4, r3
 8008302:	bf08      	it	eq
 8008304:	68ec      	ldreq	r4, [r5, #12]
 8008306:	e7da      	b.n	80082be <_fflush_r+0x22>
 8008308:	08009444 	.word	0x08009444
 800830c:	08009464 	.word	0x08009464
 8008310:	08009424 	.word	0x08009424

08008314 <std>:
 8008314:	2300      	movs	r3, #0
 8008316:	b510      	push	{r4, lr}
 8008318:	4604      	mov	r4, r0
 800831a:	e9c0 3300 	strd	r3, r3, [r0]
 800831e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008322:	6083      	str	r3, [r0, #8]
 8008324:	8181      	strh	r1, [r0, #12]
 8008326:	6643      	str	r3, [r0, #100]	; 0x64
 8008328:	81c2      	strh	r2, [r0, #14]
 800832a:	6183      	str	r3, [r0, #24]
 800832c:	4619      	mov	r1, r3
 800832e:	2208      	movs	r2, #8
 8008330:	305c      	adds	r0, #92	; 0x5c
 8008332:	f7fb fdf1 	bl	8003f18 <memset>
 8008336:	4b05      	ldr	r3, [pc, #20]	; (800834c <std+0x38>)
 8008338:	6224      	str	r4, [r4, #32]
 800833a:	6263      	str	r3, [r4, #36]	; 0x24
 800833c:	4b04      	ldr	r3, [pc, #16]	; (8008350 <std+0x3c>)
 800833e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008340:	4b04      	ldr	r3, [pc, #16]	; (8008354 <std+0x40>)
 8008342:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <std+0x44>)
 8008346:	6323      	str	r3, [r4, #48]	; 0x30
 8008348:	bd10      	pop	{r4, pc}
 800834a:	bf00      	nop
 800834c:	08008665 	.word	0x08008665
 8008350:	08008687 	.word	0x08008687
 8008354:	080086bf 	.word	0x080086bf
 8008358:	080086e3 	.word	0x080086e3

0800835c <_cleanup_r>:
 800835c:	4901      	ldr	r1, [pc, #4]	; (8008364 <_cleanup_r+0x8>)
 800835e:	f000 b8af 	b.w	80084c0 <_fwalk_reent>
 8008362:	bf00      	nop
 8008364:	0800829d 	.word	0x0800829d

08008368 <__sfmoreglue>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	2568      	movs	r5, #104	; 0x68
 800836c:	1e4a      	subs	r2, r1, #1
 800836e:	4355      	muls	r5, r2
 8008370:	460e      	mov	r6, r1
 8008372:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008376:	f7ff fa83 	bl	8007880 <_malloc_r>
 800837a:	4604      	mov	r4, r0
 800837c:	b140      	cbz	r0, 8008390 <__sfmoreglue+0x28>
 800837e:	2100      	movs	r1, #0
 8008380:	e9c0 1600 	strd	r1, r6, [r0]
 8008384:	300c      	adds	r0, #12
 8008386:	60a0      	str	r0, [r4, #8]
 8008388:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800838c:	f7fb fdc4 	bl	8003f18 <memset>
 8008390:	4620      	mov	r0, r4
 8008392:	bd70      	pop	{r4, r5, r6, pc}

08008394 <__sfp_lock_acquire>:
 8008394:	4801      	ldr	r0, [pc, #4]	; (800839c <__sfp_lock_acquire+0x8>)
 8008396:	f000 b8b3 	b.w	8008500 <__retarget_lock_acquire_recursive>
 800839a:	bf00      	nop
 800839c:	200006d0 	.word	0x200006d0

080083a0 <__sfp_lock_release>:
 80083a0:	4801      	ldr	r0, [pc, #4]	; (80083a8 <__sfp_lock_release+0x8>)
 80083a2:	f000 b8ae 	b.w	8008502 <__retarget_lock_release_recursive>
 80083a6:	bf00      	nop
 80083a8:	200006d0 	.word	0x200006d0

080083ac <__sinit_lock_acquire>:
 80083ac:	4801      	ldr	r0, [pc, #4]	; (80083b4 <__sinit_lock_acquire+0x8>)
 80083ae:	f000 b8a7 	b.w	8008500 <__retarget_lock_acquire_recursive>
 80083b2:	bf00      	nop
 80083b4:	200006cb 	.word	0x200006cb

080083b8 <__sinit_lock_release>:
 80083b8:	4801      	ldr	r0, [pc, #4]	; (80083c0 <__sinit_lock_release+0x8>)
 80083ba:	f000 b8a2 	b.w	8008502 <__retarget_lock_release_recursive>
 80083be:	bf00      	nop
 80083c0:	200006cb 	.word	0x200006cb

080083c4 <__sinit>:
 80083c4:	b510      	push	{r4, lr}
 80083c6:	4604      	mov	r4, r0
 80083c8:	f7ff fff0 	bl	80083ac <__sinit_lock_acquire>
 80083cc:	69a3      	ldr	r3, [r4, #24]
 80083ce:	b11b      	cbz	r3, 80083d8 <__sinit+0x14>
 80083d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d4:	f7ff bff0 	b.w	80083b8 <__sinit_lock_release>
 80083d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083dc:	6523      	str	r3, [r4, #80]	; 0x50
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <__sinit+0x68>)
 80083e0:	4a13      	ldr	r2, [pc, #76]	; (8008430 <__sinit+0x6c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80083e6:	42a3      	cmp	r3, r4
 80083e8:	bf08      	it	eq
 80083ea:	2301      	moveq	r3, #1
 80083ec:	4620      	mov	r0, r4
 80083ee:	bf08      	it	eq
 80083f0:	61a3      	streq	r3, [r4, #24]
 80083f2:	f000 f81f 	bl	8008434 <__sfp>
 80083f6:	6060      	str	r0, [r4, #4]
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 f81b 	bl	8008434 <__sfp>
 80083fe:	60a0      	str	r0, [r4, #8]
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f817 	bl	8008434 <__sfp>
 8008406:	2200      	movs	r2, #0
 8008408:	2104      	movs	r1, #4
 800840a:	60e0      	str	r0, [r4, #12]
 800840c:	6860      	ldr	r0, [r4, #4]
 800840e:	f7ff ff81 	bl	8008314 <std>
 8008412:	2201      	movs	r2, #1
 8008414:	2109      	movs	r1, #9
 8008416:	68a0      	ldr	r0, [r4, #8]
 8008418:	f7ff ff7c 	bl	8008314 <std>
 800841c:	2202      	movs	r2, #2
 800841e:	2112      	movs	r1, #18
 8008420:	68e0      	ldr	r0, [r4, #12]
 8008422:	f7ff ff77 	bl	8008314 <std>
 8008426:	2301      	movs	r3, #1
 8008428:	61a3      	str	r3, [r4, #24]
 800842a:	e7d1      	b.n	80083d0 <__sinit+0xc>
 800842c:	08008fb0 	.word	0x08008fb0
 8008430:	0800835d 	.word	0x0800835d

08008434 <__sfp>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	4607      	mov	r7, r0
 8008438:	f7ff ffac 	bl	8008394 <__sfp_lock_acquire>
 800843c:	4b1e      	ldr	r3, [pc, #120]	; (80084b8 <__sfp+0x84>)
 800843e:	681e      	ldr	r6, [r3, #0]
 8008440:	69b3      	ldr	r3, [r6, #24]
 8008442:	b913      	cbnz	r3, 800844a <__sfp+0x16>
 8008444:	4630      	mov	r0, r6
 8008446:	f7ff ffbd 	bl	80083c4 <__sinit>
 800844a:	3648      	adds	r6, #72	; 0x48
 800844c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008450:	3b01      	subs	r3, #1
 8008452:	d503      	bpl.n	800845c <__sfp+0x28>
 8008454:	6833      	ldr	r3, [r6, #0]
 8008456:	b30b      	cbz	r3, 800849c <__sfp+0x68>
 8008458:	6836      	ldr	r6, [r6, #0]
 800845a:	e7f7      	b.n	800844c <__sfp+0x18>
 800845c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008460:	b9d5      	cbnz	r5, 8008498 <__sfp+0x64>
 8008462:	4b16      	ldr	r3, [pc, #88]	; (80084bc <__sfp+0x88>)
 8008464:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008468:	60e3      	str	r3, [r4, #12]
 800846a:	6665      	str	r5, [r4, #100]	; 0x64
 800846c:	f000 f847 	bl	80084fe <__retarget_lock_init_recursive>
 8008470:	f7ff ff96 	bl	80083a0 <__sfp_lock_release>
 8008474:	2208      	movs	r2, #8
 8008476:	4629      	mov	r1, r5
 8008478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800847c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008480:	6025      	str	r5, [r4, #0]
 8008482:	61a5      	str	r5, [r4, #24]
 8008484:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008488:	f7fb fd46 	bl	8003f18 <memset>
 800848c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008490:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008494:	4620      	mov	r0, r4
 8008496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008498:	3468      	adds	r4, #104	; 0x68
 800849a:	e7d9      	b.n	8008450 <__sfp+0x1c>
 800849c:	2104      	movs	r1, #4
 800849e:	4638      	mov	r0, r7
 80084a0:	f7ff ff62 	bl	8008368 <__sfmoreglue>
 80084a4:	4604      	mov	r4, r0
 80084a6:	6030      	str	r0, [r6, #0]
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d1d5      	bne.n	8008458 <__sfp+0x24>
 80084ac:	f7ff ff78 	bl	80083a0 <__sfp_lock_release>
 80084b0:	230c      	movs	r3, #12
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	e7ee      	b.n	8008494 <__sfp+0x60>
 80084b6:	bf00      	nop
 80084b8:	08008fb0 	.word	0x08008fb0
 80084bc:	ffff0001 	.word	0xffff0001

080084c0 <_fwalk_reent>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	4606      	mov	r6, r0
 80084c6:	4688      	mov	r8, r1
 80084c8:	2700      	movs	r7, #0
 80084ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084d2:	f1b9 0901 	subs.w	r9, r9, #1
 80084d6:	d505      	bpl.n	80084e4 <_fwalk_reent+0x24>
 80084d8:	6824      	ldr	r4, [r4, #0]
 80084da:	2c00      	cmp	r4, #0
 80084dc:	d1f7      	bne.n	80084ce <_fwalk_reent+0xe>
 80084de:	4638      	mov	r0, r7
 80084e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e4:	89ab      	ldrh	r3, [r5, #12]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d907      	bls.n	80084fa <_fwalk_reent+0x3a>
 80084ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084ee:	3301      	adds	r3, #1
 80084f0:	d003      	beq.n	80084fa <_fwalk_reent+0x3a>
 80084f2:	4629      	mov	r1, r5
 80084f4:	4630      	mov	r0, r6
 80084f6:	47c0      	blx	r8
 80084f8:	4307      	orrs	r7, r0
 80084fa:	3568      	adds	r5, #104	; 0x68
 80084fc:	e7e9      	b.n	80084d2 <_fwalk_reent+0x12>

080084fe <__retarget_lock_init_recursive>:
 80084fe:	4770      	bx	lr

08008500 <__retarget_lock_acquire_recursive>:
 8008500:	4770      	bx	lr

08008502 <__retarget_lock_release_recursive>:
 8008502:	4770      	bx	lr

08008504 <__swhatbuf_r>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	460e      	mov	r6, r1
 8008508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800850c:	4614      	mov	r4, r2
 800850e:	2900      	cmp	r1, #0
 8008510:	461d      	mov	r5, r3
 8008512:	b096      	sub	sp, #88	; 0x58
 8008514:	da07      	bge.n	8008526 <__swhatbuf_r+0x22>
 8008516:	2300      	movs	r3, #0
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	89b3      	ldrh	r3, [r6, #12]
 800851c:	061a      	lsls	r2, r3, #24
 800851e:	d410      	bmi.n	8008542 <__swhatbuf_r+0x3e>
 8008520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008524:	e00e      	b.n	8008544 <__swhatbuf_r+0x40>
 8008526:	466a      	mov	r2, sp
 8008528:	f000 f902 	bl	8008730 <_fstat_r>
 800852c:	2800      	cmp	r0, #0
 800852e:	dbf2      	blt.n	8008516 <__swhatbuf_r+0x12>
 8008530:	9a01      	ldr	r2, [sp, #4]
 8008532:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008536:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800853a:	425a      	negs	r2, r3
 800853c:	415a      	adcs	r2, r3
 800853e:	602a      	str	r2, [r5, #0]
 8008540:	e7ee      	b.n	8008520 <__swhatbuf_r+0x1c>
 8008542:	2340      	movs	r3, #64	; 0x40
 8008544:	2000      	movs	r0, #0
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	b016      	add	sp, #88	; 0x58
 800854a:	bd70      	pop	{r4, r5, r6, pc}

0800854c <__smakebuf_r>:
 800854c:	898b      	ldrh	r3, [r1, #12]
 800854e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008550:	079d      	lsls	r5, r3, #30
 8008552:	4606      	mov	r6, r0
 8008554:	460c      	mov	r4, r1
 8008556:	d507      	bpl.n	8008568 <__smakebuf_r+0x1c>
 8008558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	6123      	str	r3, [r4, #16]
 8008560:	2301      	movs	r3, #1
 8008562:	6163      	str	r3, [r4, #20]
 8008564:	b002      	add	sp, #8
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	466a      	mov	r2, sp
 800856a:	ab01      	add	r3, sp, #4
 800856c:	f7ff ffca 	bl	8008504 <__swhatbuf_r>
 8008570:	9900      	ldr	r1, [sp, #0]
 8008572:	4605      	mov	r5, r0
 8008574:	4630      	mov	r0, r6
 8008576:	f7ff f983 	bl	8007880 <_malloc_r>
 800857a:	b948      	cbnz	r0, 8008590 <__smakebuf_r+0x44>
 800857c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008580:	059a      	lsls	r2, r3, #22
 8008582:	d4ef      	bmi.n	8008564 <__smakebuf_r+0x18>
 8008584:	f023 0303 	bic.w	r3, r3, #3
 8008588:	f043 0302 	orr.w	r3, r3, #2
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	e7e3      	b.n	8008558 <__smakebuf_r+0xc>
 8008590:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <__smakebuf_r+0x7c>)
 8008592:	62b3      	str	r3, [r6, #40]	; 0x28
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	6020      	str	r0, [r4, #0]
 8008598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800859c:	81a3      	strh	r3, [r4, #12]
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	6120      	str	r0, [r4, #16]
 80085a2:	6163      	str	r3, [r4, #20]
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	b15b      	cbz	r3, 80085c0 <__smakebuf_r+0x74>
 80085a8:	4630      	mov	r0, r6
 80085aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ae:	f000 f8d1 	bl	8008754 <_isatty_r>
 80085b2:	b128      	cbz	r0, 80085c0 <__smakebuf_r+0x74>
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f023 0303 	bic.w	r3, r3, #3
 80085ba:	f043 0301 	orr.w	r3, r3, #1
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	89a0      	ldrh	r0, [r4, #12]
 80085c2:	4305      	orrs	r5, r0
 80085c4:	81a5      	strh	r5, [r4, #12]
 80085c6:	e7cd      	b.n	8008564 <__smakebuf_r+0x18>
 80085c8:	0800835d 	.word	0x0800835d

080085cc <_malloc_usable_size_r>:
 80085cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d0:	1f18      	subs	r0, r3, #4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bfbc      	itt	lt
 80085d6:	580b      	ldrlt	r3, [r1, r0]
 80085d8:	18c0      	addlt	r0, r0, r3
 80085da:	4770      	bx	lr

080085dc <_raise_r>:
 80085dc:	291f      	cmp	r1, #31
 80085de:	b538      	push	{r3, r4, r5, lr}
 80085e0:	4604      	mov	r4, r0
 80085e2:	460d      	mov	r5, r1
 80085e4:	d904      	bls.n	80085f0 <_raise_r+0x14>
 80085e6:	2316      	movs	r3, #22
 80085e8:	6003      	str	r3, [r0, #0]
 80085ea:	f04f 30ff 	mov.w	r0, #4294967295
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085f2:	b112      	cbz	r2, 80085fa <_raise_r+0x1e>
 80085f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085f8:	b94b      	cbnz	r3, 800860e <_raise_r+0x32>
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 f830 	bl	8008660 <_getpid_r>
 8008600:	462a      	mov	r2, r5
 8008602:	4601      	mov	r1, r0
 8008604:	4620      	mov	r0, r4
 8008606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800860a:	f000 b817 	b.w	800863c <_kill_r>
 800860e:	2b01      	cmp	r3, #1
 8008610:	d00a      	beq.n	8008628 <_raise_r+0x4c>
 8008612:	1c59      	adds	r1, r3, #1
 8008614:	d103      	bne.n	800861e <_raise_r+0x42>
 8008616:	2316      	movs	r3, #22
 8008618:	6003      	str	r3, [r0, #0]
 800861a:	2001      	movs	r0, #1
 800861c:	e7e7      	b.n	80085ee <_raise_r+0x12>
 800861e:	2400      	movs	r4, #0
 8008620:	4628      	mov	r0, r5
 8008622:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008626:	4798      	blx	r3
 8008628:	2000      	movs	r0, #0
 800862a:	e7e0      	b.n	80085ee <_raise_r+0x12>

0800862c <raise>:
 800862c:	4b02      	ldr	r3, [pc, #8]	; (8008638 <raise+0xc>)
 800862e:	4601      	mov	r1, r0
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	f7ff bfd3 	b.w	80085dc <_raise_r>
 8008636:	bf00      	nop
 8008638:	20000014 	.word	0x20000014

0800863c <_kill_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	2300      	movs	r3, #0
 8008640:	4d06      	ldr	r5, [pc, #24]	; (800865c <_kill_r+0x20>)
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	f7f9 f967 	bl	800191c <_kill>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d102      	bne.n	8008658 <_kill_r+0x1c>
 8008652:	682b      	ldr	r3, [r5, #0]
 8008654:	b103      	cbz	r3, 8008658 <_kill_r+0x1c>
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	bd38      	pop	{r3, r4, r5, pc}
 800865a:	bf00      	nop
 800865c:	200006c4 	.word	0x200006c4

08008660 <_getpid_r>:
 8008660:	f7f9 b955 	b.w	800190e <_getpid>

08008664 <__sread>:
 8008664:	b510      	push	{r4, lr}
 8008666:	460c      	mov	r4, r1
 8008668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866c:	f000 f894 	bl	8008798 <_read_r>
 8008670:	2800      	cmp	r0, #0
 8008672:	bfab      	itete	ge
 8008674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008676:	89a3      	ldrhlt	r3, [r4, #12]
 8008678:	181b      	addge	r3, r3, r0
 800867a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800867e:	bfac      	ite	ge
 8008680:	6563      	strge	r3, [r4, #84]	; 0x54
 8008682:	81a3      	strhlt	r3, [r4, #12]
 8008684:	bd10      	pop	{r4, pc}

08008686 <__swrite>:
 8008686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868a:	461f      	mov	r7, r3
 800868c:	898b      	ldrh	r3, [r1, #12]
 800868e:	4605      	mov	r5, r0
 8008690:	05db      	lsls	r3, r3, #23
 8008692:	460c      	mov	r4, r1
 8008694:	4616      	mov	r6, r2
 8008696:	d505      	bpl.n	80086a4 <__swrite+0x1e>
 8008698:	2302      	movs	r3, #2
 800869a:	2200      	movs	r2, #0
 800869c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a0:	f000 f868 	bl	8008774 <_lseek_r>
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	4632      	mov	r2, r6
 80086a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	4628      	mov	r0, r5
 80086b0:	463b      	mov	r3, r7
 80086b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ba:	f000 b817 	b.w	80086ec <_write_r>

080086be <__sseek>:
 80086be:	b510      	push	{r4, lr}
 80086c0:	460c      	mov	r4, r1
 80086c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c6:	f000 f855 	bl	8008774 <_lseek_r>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	bf15      	itete	ne
 80086d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80086d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086da:	81a3      	strheq	r3, [r4, #12]
 80086dc:	bf18      	it	ne
 80086de:	81a3      	strhne	r3, [r4, #12]
 80086e0:	bd10      	pop	{r4, pc}

080086e2 <__sclose>:
 80086e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e6:	f000 b813 	b.w	8008710 <_close_r>
	...

080086ec <_write_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4604      	mov	r4, r0
 80086f0:	4608      	mov	r0, r1
 80086f2:	4611      	mov	r1, r2
 80086f4:	2200      	movs	r2, #0
 80086f6:	4d05      	ldr	r5, [pc, #20]	; (800870c <_write_r+0x20>)
 80086f8:	602a      	str	r2, [r5, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f7f9 f945 	bl	800198a <_write>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_write_r+0x1e>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_write_r+0x1e>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	200006c4 	.word	0x200006c4

08008710 <_close_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	2300      	movs	r3, #0
 8008714:	4d05      	ldr	r5, [pc, #20]	; (800872c <_close_r+0x1c>)
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	f7f9 f951 	bl	80019c2 <_close>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_close_r+0x1a>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_close_r+0x1a>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	200006c4 	.word	0x200006c4

08008730 <_fstat_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	2300      	movs	r3, #0
 8008734:	4d06      	ldr	r5, [pc, #24]	; (8008750 <_fstat_r+0x20>)
 8008736:	4604      	mov	r4, r0
 8008738:	4608      	mov	r0, r1
 800873a:	4611      	mov	r1, r2
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	f7f9 f94b 	bl	80019d8 <_fstat>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	d102      	bne.n	800874c <_fstat_r+0x1c>
 8008746:	682b      	ldr	r3, [r5, #0]
 8008748:	b103      	cbz	r3, 800874c <_fstat_r+0x1c>
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	bd38      	pop	{r3, r4, r5, pc}
 800874e:	bf00      	nop
 8008750:	200006c4 	.word	0x200006c4

08008754 <_isatty_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	2300      	movs	r3, #0
 8008758:	4d05      	ldr	r5, [pc, #20]	; (8008770 <_isatty_r+0x1c>)
 800875a:	4604      	mov	r4, r0
 800875c:	4608      	mov	r0, r1
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	f7f9 f949 	bl	80019f6 <_isatty>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_isatty_r+0x1a>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_isatty_r+0x1a>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	200006c4 	.word	0x200006c4

08008774 <_lseek_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4604      	mov	r4, r0
 8008778:	4608      	mov	r0, r1
 800877a:	4611      	mov	r1, r2
 800877c:	2200      	movs	r2, #0
 800877e:	4d05      	ldr	r5, [pc, #20]	; (8008794 <_lseek_r+0x20>)
 8008780:	602a      	str	r2, [r5, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	f7f9 f941 	bl	8001a0a <_lseek>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d102      	bne.n	8008792 <_lseek_r+0x1e>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	b103      	cbz	r3, 8008792 <_lseek_r+0x1e>
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	200006c4 	.word	0x200006c4

08008798 <_read_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	4611      	mov	r1, r2
 80087a0:	2200      	movs	r2, #0
 80087a2:	4d05      	ldr	r5, [pc, #20]	; (80087b8 <_read_r+0x20>)
 80087a4:	602a      	str	r2, [r5, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f7f9 f8d2 	bl	8001950 <_read>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_read_r+0x1e>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_read_r+0x1e>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	200006c4 	.word	0x200006c4

080087bc <_init>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr

080087c8 <_fini>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	bf00      	nop
 80087cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ce:	bc08      	pop	{r3}
 80087d0:	469e      	mov	lr, r3
 80087d2:	4770      	bx	lr
